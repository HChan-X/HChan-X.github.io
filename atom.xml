<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HCHAN</title>
  
  <subtitle>幸运</subtitle>
  <link href="http://mjean.life/atom.xml" rel="self"/>
  
  <link href="http://mjean.life/"/>
  <updated>2022-04-18T12:48:45.850Z</updated>
  <id>http://mjean.life/</id>
  
  <author>
    <name>HCHAN</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java并发</title>
    <link href="http://mjean.life/posts/918971b1.html"/>
    <id>http://mjean.life/posts/918971b1.html</id>
    <published>2021-07-26T14:30:08.000Z</published>
    <updated>2022-04-18T12:48:45.850Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本次学习是从【黑马java并发编程教程】视频中进行的。<a href="https://www.bilibili.com/video/av81461839?from=search&amp;seid=8445102345230304010">视频地址</a></p><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h2><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><ul><li>程序由<code>指令</code>和<code>数据</code>组成，但这些指令要运行，数据要读写，就必须<code>将指令加载至 CPU</code>，<code>数据加载至内存</code>。在指令运行过程中还需要用到磁盘、网络等设备。进程就是<code>用来加载指令、管理内存、管理 IO 的</code>。</li><li>当一个程序被运行，从<code>磁盘加载</code>这个程序的代码<code>至内存</code>，这时就开启了一个进程。</li><li>进程可以看做是程序的一个实例。（也可以理解为<code>进程是程序的执行过程</code>，<code>程序是静态的</code>，<code>进程是动态的</code>）</li></ul><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><ul><li>一个进程之内可以分为<code>一到多个线程</code>。</li><li>一个线程就是一个指令流，将指令流中的一条条指令以一定的顺序交给 CPU 执行 。</li><li>Java 中，<code>线程作为最小调度单位</code>，<code>进程作为资源分配的最小单位</code>。 在 windows 中进程是不活动的，只是作为线程的容器</li></ul><h3 id="二者对比"><a href="#二者对比" class="headerlink" title="二者对比"></a>二者对比</h3><ul><li><p>进程基本上<code>相互独立</code>的，而<code>线程存在于进程</code>内，是进程的一个子集 </p></li><li><p>进程拥有<code>共享的资源</code>，如内存空间等，供<code>其内部的线程共享</code></p></li><li><p>进程间通信较为复杂</p><ul><li><p>同一台计算机的进程通信称为 IPC（Inter-process communication）</p></li><li><p>不同计算机之间的进程通信，需要通过网络，并遵守共同的协议，例如 HTTP</p></li></ul></li><li><p>线程通信相对简单，因为它们共享进程内的内存，一个例子是多个线程可以访问同一个共享变量 </p></li><li><p>线程更轻量，线程上下文切换成本一般上要比进程上下文切换低</p></li></ul><h4 id="进程和线程的切换"><a href="#进程和线程的切换" class="headerlink" title="进程和线程的切换"></a>进程和线程的切换</h4><blockquote><p><strong>上下文切换</strong></p></blockquote><p>内核为每一个进程维持一个上下文。<code>上下文就是内核重新启动一个被抢占的进程所需的状态</code>。包括以下内容：</p><ul><li>通用目的寄存器</li><li>浮点寄存器</li><li>程序计数器</li><li>用户栈</li><li>状态寄存器</li><li>内核栈</li><li>各种内核数据结构：比如描绘地址空间的<code>页表</code>，包含有关当前进程信息的<code>进程表</code>，以及包含进程已打开文件的信息的<code>文件表</code></li></ul><blockquote><p><strong>进程切换和线程切换的主要区别</strong></p></blockquote><p>最主要的一个区别在于<code>进程切换涉及虚拟地址空间的切换而线程不会</code>。因为每个进程都有自己的虚拟地址空间，而<code>线程是共享所在进程的虚拟地址空间的</code>，因此同一个进程中的线程进行线程切换时不涉及虚拟地址空间的转换</p><p>页表查找是一个很慢的过程，因此通常使用cache来缓存常用的地址映射，这样可以加速页表查找，这个cache就是快表TLB（translation Lookaside Buffer，用来加速页表查找）。由于每个进程都有自己的虚拟地址空间，那么显然每个进程都有自己的页表，那么<code>当进程切换后页表也要进行切换，页表切换后TLB就失效了</code>，cache失效导致命中率降低，那么虚拟地址转换为物理地址就会变慢，表现出来的就是程序运行会变慢，而<code>线程切换则不会导致TLB失效，因为线程线程无需切换地址空间</code>，因此我们通常说线程切换要比较进程切换快</p><p>而且还可能出现<code>缺页中断</code>，这就需要操作系统将需要的内容调入内存中，若内存已满则还需要将不用的内容调出内存，这也需要花费时间</p><blockquote><p><strong>为什么TLB能加快访问速度</strong></p></blockquote><p>快表可以避免每次都对页号进行地址的有效性判断。快表中保存了对应的物理块号，可以直接计算出物理地址，无需再进行有效性检查</p><h2 id="并发与并行"><a href="#并发与并行" class="headerlink" title="并发与并行"></a>并发与并行</h2><p>并发是一个CPU在同一时间段去不同线程中执行指令。(<code>微观串行，宏观并行</code>)</p><p>并行是多个CPU在同一时刻处理不同的线程。</p><p>引用 Rob Pike 的一段描述：</p><ul><li>并发（concurrent）是同一时间<code>应对</code>（dealing with）多件事情的能力</li><li>并行（parallel）是同一时间<code>动手做</code>（doing）多件事情的能力</li></ul><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="应用之异步调用（案例1）"><a href="#应用之异步调用（案例1）" class="headerlink" title="应用之异步调用（案例1）"></a>应用之异步调用（案例1）</h4><p>以<code>调用方</code>角度来讲，如果</p><ul><li><code>需要等待</code>结果返回，<code>才能继续</code>运行就是<code>同步</code></li><li><code>不需要等待</code>结果返回，<code>就能继续运行</code>就是<code>异步</code></li></ul><p><strong>1) 设计</strong><br>多线程可以让方法执行变为异步的（即不要巴巴干等着）比如说读取磁盘文件时，假设读取操作花费了 5 秒钟，如果没有线程调度机制，这 5 秒 cpu 什么都做不了，其它代码都得暂停…<br><strong>2) 结论</strong></p><ul><li>比如在项目中，视频文件需要转换格式等操作比较费时，这时<code>开一个新线程</code>处理视频转换，<code>避免阻塞</code>主线程</li><li>tomcat 的异步 servlet 也是类似的目的，让<code>用户线程处理</code>耗时较长的操作，<code>避免阻塞</code></li><li>tomcat 的工作线程 ui 程序中，开新线程进行其他操作，避免阻塞 ui 线程</li></ul><blockquote><p>注意：需要在多核cpu下才能提高效率，单核仍然是轮流执行</p></blockquote><ol><li><code>单核 cpu</code> 下，多线程<code>不能</code>实际<code>提高</code>程序运行效率，只是为了能够在不同的任务之间切换，不同线程轮流使用 cpu ，不至于一个线程总占用 cpu，别的线程没法干活</li><li>多核 cpu 可以并行跑多个线程，但能否提高程序运行效率还是要分情况的<ul><li>有些任务，经过精心设计，将任务拆分，并行执行，当然可以提高程序的运行效率。但不是所有计算任务都能拆分（参考后文的【阿姆达尔定律】）</li><li>也不是所有任务都需要拆分，任务的目的如果不同，谈拆分和效率没啥意义</li></ul></li><li><code>IO 操作不占用 cpu</code>，只是我们一般拷贝文件使用的是【阻塞 IO】，这时相当于线程虽然不用 cpu，但<code>需要一 直等待 IO 结束</code>，没能充分利用线程。所以才有后面的【非阻塞 IO】和【异步 IO】优化</li></ol><hr><h1 id="Java线程"><a href="#Java线程" class="headerlink" title="Java线程"></a>Java线程</h1><h2 id="创建一个线程（非主线程）"><a href="#创建一个线程（非主线程）" class="headerlink" title="创建一个线程（非主线程）"></a>创建一个线程（非主线程）</h2><h3 id="方法一：直接使用-Thread"><a href="#方法一：直接使用-Thread" class="headerlink" title="方法一：直接使用 Thread"></a>方法一：直接使用 Thread</h3><blockquote><p>通过继承Thread类</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CreateThread</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Thread</span> myThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 启动线程</span>myThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"my thread running..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>继承</code>方式的好处是，在run（）方法内获取当前线程直接使用this就可以了，无须使用Thread.currentThread（）方法；<code>不好的地方是Java不支持多继承</code>，如果继承了Thread类，那么就不能再继承其他类。另外<code>任务与代码没有分离</code>，当多个线程执行一样的任务时需要多份任务代码</p><h3 id="方法二：使用Runnable配合Thread-推荐"><a href="#方法二：使用Runnable配合Thread-推荐" class="headerlink" title="方法二：使用Runnable配合Thread(推荐)"></a>方法二：使用Runnable配合Thread(推荐)</h3><blockquote><p>把【线程】和【任务】（要执行的代码）分开 </p><ul><li>Thread 代表线程 </li><li>Runnable 可运行的任务（线程要执行的代码）</li></ul></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test2</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//创建线程任务</span><span class="token class-name">Runnable</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Runnable running"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//将Runnable对象传给Thread</span><span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//启动线程</span>t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CreateThread2</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"my runnable running..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">MyRunnable</span> myRunnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>myRunnable<span class="token punctuation">)</span><span class="token punctuation">;</span>      thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过<code>实现Runnable接口</code>，并且实现run()方法。在<code>创建线程时作为参数传入该类的实例</code>即可</p><h4 id="方法二的简化：使用lambda表达式简化操作"><a href="#方法二的简化：使用lambda表达式简化操作" class="headerlink" title="方法二的简化：使用lambda表达式简化操作"></a>方法二的简化：使用lambda表达式简化操作</h4><blockquote><p>Java 8 以后可以使用 lambda 精简代码</p></blockquote><p>当一个接口带有<code>@FunctionalInterface注解</code>时，是可以<code>使用lambda来简化</code>操作的</p><p>所以方法二中的代码可以被简化为</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test2</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//创建线程任务</span><span class="token class-name">Runnable</span> r <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token comment">//直接写方法体即可</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Runnable running"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello Thread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//将Runnable对象传给Thread</span><span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//启动线程</span>t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="原理之-Thread-与-Runnable-的关系"><a href="#原理之-Thread-与-Runnable-的关系" class="headerlink" title="原理之 Thread 与 Runnable 的关系"></a>原理之 Thread 与 Runnable 的关系</h4><p>分析 Thread 的源码，理清它与 Runnable 的关系</p><p><strong>小结</strong></p><ul><li>方法1 是把线程和任务合并在了一起，方法2 是把线程和任务分开了</li><li><strong>用 Runnable 更容易与线程池等高级 API 配合</strong> </li><li><strong>用 Runnable 让任务类脱离了 Thread 继承体系，更灵活</strong></li></ul><h3 id="方法三：使用FutureTask与Thread结合"><a href="#方法三：使用FutureTask与Thread结合" class="headerlink" title="方法三：使用FutureTask与Thread结合"></a>方法三：使用FutureTask与Thread结合</h3><blockquote><p><strong>FutureTask 能够接收 Callable 类型的参数，用来处理有返回结果的情况</strong></p><p><strong>使用FutureTask可以用泛型指定线程的返回值类型（Runnable的run方法没有返回值）</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test3</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token comment">//需要传入一个Callable对象</span><span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程执行!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span> r1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>r1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取线程中方法执行后的返回结果</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UseFutureTask</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>      <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyCall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">;</span>      thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 获得线程运行后的返回值</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyCall</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>使用<code>继承方式的好处是方便传参</code>，可以在子类里面添加成员变量，通过set方法设置参数或者通过构造函数进行传递，而如果使用Runnable方式，则只能使用主线程里面被声明为final的变量。<code>不好的地方是Java不支持多继承</code>，如果继承了Thread类，那么子类不能再继承其他类，而Runable则没有这个限制。<code>前两种方式都没办法拿到任务的返回结果，但是Futuretask方式可以</code></p><h2 id="原理之线程运行"><a href="#原理之线程运行" class="headerlink" title="原理之线程运行"></a>原理之线程运行</h2><h3 id="栈与栈帧"><a href="#栈与栈帧" class="headerlink" title="栈与栈帧"></a>栈与栈帧</h3><blockquote><p>Java Virtual Machine Stacks （Java 虚拟机栈） </p></blockquote><p>我们都知道 JVM 中由堆、栈、方法区所组成，其中栈内存是给谁用的呢？</p><ul><li>其实就是线程，每个线程启动后，虚拟机就会为其分配一块<code>栈内存</code></li><li>每个<code>栈由多个栈帧（Frame）组成</code>，对应着每次<code>方法调用时所占用的内存</code></li><li><code>每个线程只能有一个活动栈帧</code>，对应着当前正在执行的那个方法</li></ul><h3 id="线程上下文切换（Thread-Context-Switch）"><a href="#线程上下文切换（Thread-Context-Switch）" class="headerlink" title="线程上下文切换（Thread Context Switch）"></a>线程上下文切换（Thread Context Switch）</h3><p>因为以下一些原因导致 cpu 不再执行当前的线程，转而执行另一个线程的代码</p><ul><li><strong>线程的 cpu 时间片用完</strong></li><li><strong>垃圾回收 有更高优先级的线程需要运行</strong></li><li><strong>线程自己调用了 sleep、yield、wait、join、park、synchronized、lock 等方法</strong></li></ul><p>当 Context Switch 发生时，需要<code>由操作系统保存当前线程的状态</code>，<code>并恢复另一个线程的状态</code>，Java 中对应的概念就是<code>程序计数器（Program Counter Register）</code>，它的作用是<code>记住下一条 jvm 指令的执行地址，是线程私有的</code></p><ul><li>状态包括程序计数器、虚拟机栈中每个栈帧的信息，如<code>局部变量</code>、<code>操作数栈</code>、<code>返回地址</code>等</li><li>Context Switch 频繁发生会影响性能</li></ul><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><table><thead><tr><th align="center">方法名</th><th align="center">static</th><th align="center">功能说明</th><th align="center">注意</th></tr></thead><tbody><tr><td align="center">start()</td><td align="center"></td><td align="center">启动一个新线 程，在新的线程运行 run 方法 中的代码</td><td align="center">start 方法只是让线程进入就绪，里面代码<code>不一定立刻运行</code>（CPU 的时间片还没分给它）。每个线程对象的 start方法<code>只能调用一次</code>，如果调用了多次会出现 IllegalThreadStateException</td></tr><tr><td align="center">run()</td><td align="center"></td><td align="center">新线程启动后会调用的方法</td><td align="center">如果在构造 Thread 对象时传递了 Runnable 参数，则 线程启动后会调用 Runnable 中的 run 方法，否则默认不执行任何操作。但可以创建 Thread 的子类对象， 来覆盖默认行为</td></tr><tr><td align="center">join()</td><td align="center"></td><td align="center">等待线程运行结束</td><td align="center"></td></tr><tr><td align="center">join(long n)</td><td align="center"></td><td align="center">等待线程运行结束,<code>最多等待 n  毫秒</code></td><td align="center"></td></tr><tr><td align="center">getId()</td><td align="center"></td><td align="center">获取线程长整型的 id</td><td align="center">id 唯一</td></tr><tr><td align="center">getName()</td><td align="center"></td><td align="center">获取线程名</td><td align="center"></td></tr><tr><td align="center">setName(String)</td><td align="center"></td><td align="center">修改线程名</td><td align="center"></td></tr><tr><td align="center">getPriority()</td><td align="center"></td><td align="center">获取线程优先级</td><td align="center"></td></tr><tr><td align="center">setPriority(int)</td><td align="center"></td><td align="center">修改线程优先级</td><td align="center">java中规定线程优先级是1~10 的整数，较大的优先级能提高该线程被 CPU 调度的机率</td></tr><tr><td align="center">getState()</td><td align="center"></td><td align="center">获取线程状态</td><td align="center">Java 中线程状态是用 6 个 enum 表示，分别为： NEW, RUNNABLE, BLOCKED, WAITING,  TIMED_WAITING, TERMINATED</td></tr><tr><td align="center">isInterrupted()</td><td align="center"></td><td align="center">判断是否被打断，</td><td align="center">不会清除 <code>打断标记</code></td></tr><tr><td align="center">isAlive()</td><td align="center"></td><td align="center">线程是否存活 （还没有运行完毕）</td><td align="center"></td></tr><tr><td align="center">interrupt()</td><td align="center"></td><td align="center">打断线程</td><td align="center">如果被打断线程正在 sleep，wait，join 会导致被打断的线程抛出 InterruptedException，并清除 <code>打断标记</code> ；如果打断的正在运行的线程，则会设置 <code>打断标记</code> ；park 的线程被打断，也会设置 <code>打断标记</code></td></tr><tr><td align="center">interrupted()</td><td align="center">static</td><td align="center">判断当前线程是否被打断</td><td align="center">会清除 <code>打断标记</code></td></tr><tr><td align="center">currentThread()</td><td align="center">static</td><td align="center">获取当前正在执行的线程</td><td align="center"></td></tr><tr><td align="center">sleep(long n)</td><td align="center">static</td><td align="center">让当前执行的线程休眠n毫秒， 休眠时让出 cpu  的时间片给其它线程</td><td align="center"></td></tr><tr><td align="center">yield()</td><td align="center">static</td><td align="center"><code>提示</code>线程调度器让出当前线程对 CPU的使用</td><td align="center">主要是为了测试和调试</td></tr></tbody></table><h3 id="start-vs-run"><a href="#start-vs-run" class="headerlink" title="start() vs run()"></a>start() vs run()</h3><p>被创建的Thread对象<code>直接调用重写的run方法时</code>， run方法是在<code>主线程</code>中被执行的，而<code>不是</code>在我们所创建的线程中执行。所以如果想要在所创建的线程中执行run方法，<code>需要使用Thread对象的start方法</code>。</p><h3 id="sleep-与yield"><a href="#sleep-与yield" class="headerlink" title="sleep()与yield()"></a>sleep()与yield()</h3><h4 id="sleep-使线程阻塞"><a href="#sleep-使线程阻塞" class="headerlink" title="sleep (使线程阻塞)"></a><strong>sleep</strong> (使线程阻塞)</h4><ol><li><p>调用 sleep 会让当前线程从 <code>Running 进入 Timed Waiting 状态（阻塞）</code>，可通过state()方法查看</p></li><li><p>其它线程可以使用 <code>interrupt</code> 方法打断正在睡眠的线程，这时 sleep 方法会抛出 <code>InterruptedException</code></p></li><li><p>睡眠结束后的线程未必会立刻得到执行</p></li><li><p>建议用 <strong>TimeUnit 的 sleep</strong> 代替 Thread 的 sleep 来获得更好的可读性 。如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//休眠一秒</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//休眠一分钟</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MINUTES<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="yield-（让出当前线程）"><a href="#yield-（让出当前线程）" class="headerlink" title="yield （让出当前线程）"></a>yield （让出当前线程）</h4><ol><li>调用 yield 会让当前线程从 <code>Running 进入 Runnable 就绪状态</code>（仍然有可能被执行），然后调度执行其它线程</li><li>具体的实现依赖于操作系统的任务调度器</li></ol><h4 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h4><ul><li><p>线程优先级会提示（hint）调度器优先调度该线程，但它<code>仅仅是一个提示</code>，调度器可以忽略它</p></li><li><p>如果 cpu 比较忙，那么优先级高的线程会获得更多的时间片，但 cpu 闲时，优先级几乎没作用</p></li><li><p>设置方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">thread1<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>MAX_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置为优先级最高</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="join-方法"><a href="#join-方法" class="headerlink" title="join()方法"></a>join()方法</h3><p>用于<code>等待某个线程结束</code>。哪个线程内调用join()方法，就等待哪个线程结束，然后再去执行其他线程。</p><p>如在主线程中调用ti.join()，则是主线程等待t1线程结束</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等待thread线程执行结束</span>thread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//最多等待1000ms,如果1000ms内线程执行完毕，则会直接执行下面的语句，不会等够1000ms</span>thread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="interrupt-方法"><a href="#interrupt-方法" class="headerlink" title="interrupt()方法"></a>interrupt()方法</h3><blockquote><p>处于阻塞状态的线程，CPU不会给其分配时间片</p></blockquote><p>如果用于打断<code>阻塞</code>**(sleep wait join…)**的线程。 </p><ul><li>如果一个线程<code>在运行中</code>被打断，<code>打断标记</code>会被置<code>为true</code>，<code>不会清空</code>打断状态</li><li>如果是<code>打断</code>因sleep wait join方法而被<code>阻塞</code>的线程，<code>会清空</code>打断状态，会将打断标记<code>置为false</code></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//用于查看打断标记，返回值被boolean类型</span>t1<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>正常运行的线程在被打断后，<code>不会停止</code>，会继续执行。如果要让线程在被打断后停下来，需要<code>使用打断标记来判断</code>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="两阶段终止模式"><a href="#两阶段终止模式" class="headerlink" title="两阶段终止模式"></a>两阶段终止模式</h4><blockquote><p>当我们在执行线程一时，想要终止线程二，这时就需要使用interrupt方法来<strong>优雅</strong>的停止线程二。</p></blockquote><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc1.png"></p><p><strong>代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test7</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span><span class="token class-name">Monitor</span> monitor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Monitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>monitor<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>monitor<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Monitor</span> <span class="token punctuation">{</span><span class="token class-name">Thread</span> monitor<span class="token punctuation">;</span><span class="token comment">/** * 启动监控器线程 */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//设置线控器线程，用于监控线程状态</span>monitor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//开始不停的监控</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">//判断当前线程是否被打断了</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"处理后续任务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//终止线程执行</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"监控器运行中..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token comment">//线程休眠</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果是在休眠的时候被打断，不会将打断标记设置为true，这时要重新设置打断标记</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>monitor<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * 用于停止监控器线程 */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//打断线程</span>monitor<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>打断 park 线程</strong> </p><blockquote><p>打断 park 线程, <code>不会清空</code>打断状态，如果打断标记<code>已经是 true</code>, 则 <code>park 会失效</code></p></blockquote><p><strong>提示：</strong>可以使用 <strong>Thread.interrupted()</strong> <code>清除打断状态</code></p><h3 id="不推荐使用的打断方法"><a href="#不推荐使用的打断方法" class="headerlink" title="不推荐使用的打断方法"></a>不推荐使用的打断方法</h3><table><thead><tr><th align="center">方法名</th><th align="center">static</th><th align="center">功能说明</th></tr></thead><tbody><tr><td align="center">stop()</td><td align="center"></td><td align="center">停止线程运行</td></tr><tr><td align="center">suspend()</td><td align="center"></td><td align="center">挂起（暂停）线程运行</td></tr><tr><td align="center">resume()</td><td align="center"></td><td align="center">恢复线程运行</td></tr></tbody></table><ul><li><p>这些方法<code>已过时</code>，容易破坏同步代码块，造成线程死锁</p></li><li><p>stop方法 停止线程运行（可能造成共享资源<code>无法被释放</code>，其他线程无法使用这些共享资源）</p></li><li><p>suspend（暂停线程）/resume（恢复线程）方法</p></li></ul><h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><p>当JAVA进程中有多个线程在执行时，只有<code>当所有非守护线程都执行完毕后，JAVA进程才会结束</code>。但当<code>非守护线程全部执行完毕</code>后，<code>守护线程无论是否执行完毕</code>，也会<code>一同结束</code>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//将线程设置为守护线程, 默认为false</span>monitor<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>注意</strong></p><ul><li><code>垃圾回收器线程</code>就是一种<code>守护线程</code></li><li>Tomcat 中的 <code>Acceptor</code> 和 <code>Poller 线程</code>都是<code>守护线程</code>，所以 Tomcat 接收到 shutdown 命令后，<code>不会等待</code>它们处理完当前请求</li></ul><h2 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h2><h3 id="五种状态"><a href="#五种状态" class="headerlink" title="五种状态"></a>五种状态</h3><p>这是从 <strong>操作系统</strong> 层面来描述的</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc2.png"></p><ul><li>【初始状态】仅是在语言层面创建了线程对象，还未与操作系统线程关联（例如线程调用了start方法）</li><li>【可运行状态】（就绪状态）指该线程已经被创建（与操作系统线程关联），<code>可以由 CPU 调度执行</code></li><li>【运行状态】指<code>获取了 CPU 时间片</code>运行中的状态<ul><li>当 CPU 时间片用完，会从【运行状态】转换至【可运行状态】，会<code>导致线程的上下文切换</code></li></ul></li><li>【阻塞状态】<ul><li>如果调用了阻塞 API，如 BIO 读写文件，这时该线程实际不会用到 CPU，会导致线程上下文切换，进入 【阻塞状态】</li><li>等 BIO 操作完毕，会由操作系统唤醒阻塞的线程，转换至【可运行状态】</li><li>与【可运行状态】的区别是，对【阻塞状态】的线程来说只要它们一直不唤醒，调度器就一直不会考虑调度它们</li></ul></li><li>【终止状态】表示线程已经执行完毕，生命周期已经结束，不会再转换为其它状态</li></ul><h3 id="六种状态"><a href="#六种状态" class="headerlink" title="六种状态"></a>六种状态</h3><p>这是从 <code>Java API</code> 层面来描述的<br>根据 <code>Thread.State</code> 枚举，分为六种状态</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc3.png"></p><ul><li><code>NEW</code> 线程刚被创建，但是还没有调用 start() 方法</li><li><code>RUNNABLE</code> 当调用了 start() 方法之后，注意，Java API 层面的 RUNNABLE 状态涵盖了操作系统层面的 【可运行状态】、【运行状态】和【阻塞状态】（由于 BIO 导致的线程阻塞，在 Java 里无法区分，仍然认为 是可运行）</li><li><code>BLOCKED</code> ， <strong><code>WAITING</code></strong> ， <code>TIMED_WAITING</code> 都是 <code>Java API 层面</code>对【阻塞状态】的细分，如<strong>sleep就为TIMED_WAITING， join为WAITING状态</strong>。后面会在状态转换一节详述。</li><li><code>TERMINATED</code> 当线程代码运行结束</li></ul><hr><h1 id="共享模型之管程"><a href="#共享模型之管程" class="headerlink" title="共享模型之管程"></a>共享模型之管程</h1><h2 id="共享带来的问题"><a href="#共享带来的问题" class="headerlink" title="共享带来的问题"></a>共享带来的问题</h2><h3 id="临界区-Critical-Section"><a href="#临界区-Critical-Section" class="headerlink" title="临界区 Critical Section"></a>临界区 Critical Section</h3><ul><li><p>一个程序运行多个线程本身是没有问题的</p></li><li><p>问题出在<code>多个线程访问共享资源</code></p><ul><li>多个线程<code>读共享资源</code>其实也<code>没有问题</code></li><li>在多个线程对共享资源<code>读写操作</code>时发生<code>指令交错</code>，<code>就会出现问题</code></li></ul></li><li><p><strong>一段代码块内如果存在对共享资源的多线程读写操作</strong>，称这段代码块为<code>临界区</code></p></li></ul><p>例如，下面代码中的临界区</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 临界区 </span><span class="token punctuation">{</span>       counter<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 临界区 </span><span class="token punctuation">{</span>     counter<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="竞态条件-Race-Condition"><a href="#竞态条件-Race-Condition" class="headerlink" title="竞态条件 Race Condition"></a>竞态条件 Race Condition</h3><p>多个线程在<code>临界区</code>内执行，由于代码的<code>执行序列不同</code>而导致<code>结果无法预测</code>，称之为发生了<code>竞态条件</code></p><h2 id="synchronized-解决方案"><a href="#synchronized-解决方案" class="headerlink" title="synchronized 解决方案"></a>synchronized 解决方案</h2><h3 id="解决手段"><a href="#解决手段" class="headerlink" title="解决手段"></a>解决手段</h3><p>为了避免临界区的竞态条件发生，有多种手段可以达到目的。</p><ul><li><code>阻塞式</code>的解决方案：<code>synchronized</code>，<code>Lock</code></li><li><code>非阻塞式</code>的解决方案：<code>原子变量</code></li></ul><p>本次课使用阻塞式的解决方案：<code>synchronized</code>，来解决上述问题，即俗称的<code>【对象锁】</code>，它采用互斥的方式让<strong>同一时刻至多只有一个线程能持有【对象锁】</strong>，其它线程再想获取这个【对象锁】时就会<code>阻塞住(blocked)</code>。这样就能保证拥有锁的线程可以安全的执行临界区内的代码，不用担心线程上下文切换</p><blockquote><p>注意 </p><p>虽然 java 中互斥和同步都可以采用 synchronized 关键字来完成，但它们还是有区别的： </p><ul><li>互斥是保证临界区的竞态条件发生，同一时刻只能有一个线程执行临界区代码 </li><li>同步是由于线程执行的先后、顺序不同、需要一个线程等待其它线程运行到某个点</li></ul></blockquote><h3 id="synchronized语法"><a href="#synchronized语法" class="headerlink" title="synchronized语法"></a>synchronized语法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">synchronized</span><span class="token punctuation">(</span>对象<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//临界区</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>解决</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//创建一个公共对象，作为对象锁的对象</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> room <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>    <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>room<span class="token punctuation">)</span> <span class="token punctuation">{</span>             counter<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>           <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>               <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                     <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>room<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        counter<span class="token operator">--</span><span class="token punctuation">;</span>                      <span class="token punctuation">}</span>            <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>synchronized 实际是用对象锁<code>保证了临界区内代码的原子性</code>，临界区内的代码对外是不可分割的，不会被线程切换所打断</p></blockquote><h3 id="synchronized加在方法上"><a href="#synchronized加在方法上" class="headerlink" title="synchronized加在方法上"></a>synchronized加在方法上</h3><ul><li><p>加在成员方法上</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span><span class="token comment">//在方法上加上synchronized关键字</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//等价于</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>加在静态方法上</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span><span class="token comment">//在静态方法上加上synchronized关键字</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//等价于</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token class-name">Demo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="变量的线程安全分析"><a href="#变量的线程安全分析" class="headerlink" title="变量的线程安全分析"></a>变量的线程安全分析</h2><h3 id="成员变量和静态变量是否线程安全？"><a href="#成员变量和静态变量是否线程安全？" class="headerlink" title="成员变量和静态变量是否线程安全？"></a>成员变量和静态变量是否线程安全？</h3><ul><li>如果它们<code>没有共享</code>，则<code>线程安全</code></li><li>如果它们<code>被共享了</code>，根据它们的状态是否能够改变，又分两种情况<ul><li>如果<code>只有读操作</code>，则<code>线程安全</code></li><li>如果有<code>读写操作</code>，则这段代码是临界区，<code>需要考虑线程安全</code></li></ul></li></ul><h4 id="局部变量是否线程安全？"><a href="#局部变量是否线程安全？" class="headerlink" title="局部变量是否线程安全？"></a>局部变量是否线程安全？</h4><ul><li><p><strong>局部变量是线程安全的</strong></p></li><li><p>但<code>局部变量引用的对象</code>则未必 （要看该对象<code>是否被共享</code>且被执行了读写操作）</p><ul><li>如果该对象<strong>没有逃离方法的作用范围</strong>，它是线程安全的</li><li>如果该<strong>对象逃离方法的作用范围</strong>，需要考虑线程安全</li></ul></li><li><p>局部变量是线程安全的——每个方法都在对应线程的栈中创建栈帧，不会被其他线程共享</p></li></ul><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc4.png"></p><ul><li>如果调用的对象被共享，且执行了读写操作，则<code>线程不安全</code></li></ul><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc5.png"></p><ul><li>如果是局部变量，则会在堆中创建对应的对象，不会存在线程安全问题。</li></ul><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc6.png"></p><h3 id="常见线程安全类"><a href="#常见线程安全类" class="headerlink" title="常见线程安全类"></a>常见线程安全类</h3><ul><li>String</li><li>Integer</li><li>StringBuﬀer</li><li>Random</li><li>Vector （List的线程安全实现类）</li><li>Hashtable （Hash的线程安全实现类）</li><li>java.util.concurrent 包下的类</li></ul><p>这里说它们是线程安全的是指，多个线程调用它们<code>同一个实例的某个方法时</code>，是线程安全的。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Hashtable</span> table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hashtable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>     table<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span> <span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>     table<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span> <span class="token string">"value2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>它们的每个方法是原子的（都被加上了synchronized）</li><li>但注意它们<strong>多个方法的组合不是原子的</strong>，所以可能会出现线程安全问题</li></ul><p><strong>线程安全类方法的组合</strong> </p><p>分析下面代码是否线程安全？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Hashtable</span> table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hashtable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 线程1，线程2</span><span class="token keyword">if</span><span class="token punctuation">(</span> table<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> table<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc7.png"></p><h3 id="不可变类线程安全性"><a href="#不可变类线程安全性" class="headerlink" title="不可变类线程安全性"></a>不可变类线程安全性</h3><p>String、Integer 等都是<code>不可变类</code>，因为其内部的状态不可以改变，因此它们的方法都是<code>线程安全</code>的</p><p>有同学或许有疑问，String 有 replace，substring 等方法【可以】改变值啊，那么这些方法又是如何保证线程安全的呢？</p><p>这是因为这些方法的返回值都<code>创建了一个新的对象</code>，而不是直接改变String、Integer对象本身</p><h2 id="Monitor概念"><a href="#Monitor概念" class="headerlink" title="Monitor概念"></a>Monitor概念</h2><h3 id="Java对象头"><a href="#Java对象头" class="headerlink" title="Java对象头"></a>Java对象头</h3><blockquote><p>[参考链接](<a href="https://stackoverflow.com/questions/26357186/what-is-in-java-object-header">jvm - What is in Java object header? - Stack Overflow</a>)</p></blockquote><h3 id="原理之-Monitor"><a href="#原理之-Monitor" class="headerlink" title="原理之 Monitor"></a>原理之 Monitor</h3><p>Monitor 被翻译为<code>监视器</code>或<code>管程</code> </p><p>每个 Java 对象<code>都可以关联</code>一个 <code>Monitor 对象</code>，如果使用 synchronized <code>给对象上锁（重量级）</code>之后，该对象头的 Mark Word 中就被设置指向 Monitor 对象的指针 </p><p><strong>Monitor 结构如下</strong></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc8.png"></p><blockquote><ul><li>刚开始 Monitor 中 Owner 为 null </li><li>当 Thread-2 执行 synchronized(obj) 就会将 Monitor 的所有者 Owner 置为 Thread-2，Monitor中只能有一 个 Owner </li><li>在 Thread-2 上锁的过程中，如果 Thread-3，Thread-4，Thread-5 也来执行 synchronized(obj)，就会进入 EntryList BLOCKED </li><li>Thread-2 执行完同步代码块的内容，然后唤醒 EntryList 中等待的线程来竞争锁，竞争的时是非公平的 </li><li>图中 WaitSet 中的 Thread-0，Thread-1 是之前获得过锁，但条件不满足进入 WAITING 状态的线程，后面讲 wait-notify 时会分析</li></ul></blockquote><ul><li>当线程执行到临界区代码时，如果使用了synchronized，会先查询synchronized中所指定的对象(obj)<code>是否绑定</code>了Monitor。<ul><li>如果<code>没有绑定</code>，则会先去与Monitor绑定，并且将Owner设为当前线程。</li><li>如果<code>已经绑定</code>，则会去查询该Monitor是否已经有了Owner<ul><li>如果没有，则Owner与将当前线程绑定</li><li><code>如果有</code>，则<code>放入EntryList</code>，进入<code>阻塞</code>状态(blocked)</li></ul></li></ul></li><li>当Monitor的Owner将临界区中代码执行完毕后，Owner便会被清空，此时EntryList中处于<code>阻塞</code>状态的线程会被<code>叫醒并竞争</code>，此时的竞争是<code>非公平的</code></li><li><strong>注意</strong>：<ul><li>对象在使用了synchronized后与Monitor绑定时，会将对象头中的<code>Mark Word</code>置为<code>Monitor指针</code>。</li><li>每个对象都会绑定一个<code>唯一的Monitor</code>，如果synchronized中所指定的<code>对象(obj)不同</code>，则会<code>绑定不同的Monitor</code></li></ul></li></ul><h2 id="原理之-Synchronized进阶"><a href="#原理之-Synchronized进阶" class="headerlink" title="原理之 Synchronized进阶"></a>原理之 Synchronized进阶</h2><blockquote><p>64 位虚拟机 Mark Word</p></blockquote><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc9.png"></p><h3 id="轻量级锁（用于优化Monitor这类的重量级锁）"><a href="#轻量级锁（用于优化Monitor这类的重量级锁）" class="headerlink" title="轻量级锁（用于优化Monitor这类的重量级锁）"></a>轻量级锁（用于优化Monitor这类的重量级锁）</h3><p><strong>轻量级锁使用场景：</strong>如果一个对象虽然有多线程要加锁，但<code>加锁的时间是错开的（也就是没有竞争）</code>，那么<code>可以使用轻量级锁来优化</code>。</p><p><strong>假设有两个方法同步块，利用同一个对象加锁</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">synchronized</span><span class="token punctuation">(</span> obj <span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">// 同步块 A</span>     <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">synchronized</span><span class="token punctuation">(</span> obj <span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">// 同步块 B</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>创建<code>锁记录</code>（Lock Record）对象，每个线程的栈帧都会包含一个锁记录对象，内部可以存储锁定对象的Mark Word</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc10.png"></p></li><li><p>让锁记录中的Object reference<code>指向锁对象</code>（Object），并尝试用<code>cas</code>去<code>替换</code>Object中的Mark Word，<code>将Mark Word的值存入锁记录</code></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc11.png"></p></li><li><p>如果cas替换成功，则将Object的对象头替换为<code>锁记录的地址</code>和<code>状态 00（轻量级锁状态）</code>，并由该线程给对象加锁</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc12.png"></p></li><li><p>如果 <code>cas 失败</code>，有两种情况 </p><ul><li>如果是其它线程已经持有了该 Object 的轻量级锁，这时表明<code>有竞争</code>，进入<code>锁膨胀</code>过程 </li><li>如果是<code>自己</code>执行了 <code>synchronized 锁重入</code>，那么再添加一条 <code>Lock Record 作为重入的计数</code></li></ul><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc13.png"></p></li><li><p>当退出 synchronized 代码块（解锁时）如果有取值为 null 的锁记录，表示有重入，这时重置锁记录，表示重入计数减一</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc14.png"></p></li><li><p>当退出 synchronized 代码块（解锁时）锁记录的值不为 null，这时使用 cas 将 Mark Word 的值恢复给对象头 </p><ul><li>成功，则解锁成功 </li><li>失败，说明轻量级锁进行了锁膨胀或已经升级为重量级锁，<code>进入重量级锁解锁流程</code></li></ul></li></ul><h3 id="锁膨胀"><a href="#锁膨胀" class="headerlink" title="锁膨胀"></a>锁膨胀</h3><p>如果在尝试<code>加轻量级锁的过程中</code>，<strong>CAS 操作无法成功</strong>，这时一种情况就是有其它线程为此对象加上了<strong>轻量级锁（有竞争）</strong>，这时<strong>需要进行锁膨胀，将轻量级锁变为重量级锁</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">synchronized</span><span class="token punctuation">(</span> obj <span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">// 同步块</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>当 Thread-1 进行轻量级加锁时，Thread-0 已经对该对象加了轻量级锁</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc15.png"></p></li><li><p>这时 Thread-1 加轻量级锁失败，进入锁膨胀流程</p><ul><li><p>即为 Object 对象<code>申请 Monitor 锁</code>，让 Object 指向<code>重量级锁地址</code></p></li><li><p>将对象头的Mark Word改为Monitor的地址，并且状态改为01(重量级锁)</p></li><li><p>并且线程<code>进入Monitor 的 EntryList</code>中，并进入<code>阻塞状态(BLOCKED)</code></p></li></ul><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc16.png"></p></li><li><p>当 Thread-0 退出同步块解锁时，使用 <strong>cas 将 Mark Word 的值恢复给对象头</strong>，<strong>失败。这时会进入重量级解锁流程</strong>，即按照 Monitor 地址找到 Monitor 对象，设置 Owner 为 null，唤醒 EntryList 中 BLOCKED 线程</p></li></ul><h3 id="自旋优化"><a href="#自旋优化" class="headerlink" title="自旋优化"></a>自旋优化</h3><p><code>重量级锁</code>竞争时，还可以使用<code>自旋</code>来进行优化，如果当前线程<code>自旋成功</code>（即使用锁的线程退出了同步块，<code>释放了锁</code>），这时就可以<code>避免线程进入阻塞状态</code>。</p><p><strong>自旋重试成功的情况</strong></p><table><thead><tr><th align="left">线程 1 （core 1 上）</th><th align="left">对象 Mark</th><th>线程 2 （core 2 上）</th></tr></thead><tbody><tr><td align="left">-</td><td align="left">10（重量锁）</td><td>-</td></tr><tr><td align="left">访问同步块，获取 monitor</td><td align="left">10（重量锁）重量锁指针</td><td>-</td></tr><tr><td align="left">成功（加锁）</td><td align="left">10（重量锁）重量锁指针</td><td>-</td></tr><tr><td align="left">执行同步块</td><td align="left">10（重量锁）重量锁指针</td><td>-</td></tr><tr><td align="left">执行同步块</td><td align="left">10（重量锁）重量锁指针</td><td>访问同步块，获取 monitor</td></tr><tr><td align="left">执行同步块</td><td align="left">10（重量锁）重量锁指针</td><td>自旋重试</td></tr><tr><td align="left">执行完毕</td><td align="left">10（重量锁）重量锁指针</td><td>自旋重试</td></tr><tr><td align="left">成功（解锁）</td><td align="left"></td><td>自旋重试</td></tr><tr><td align="left">-</td><td align="left">10（重量锁）重量锁指针</td><td>成功（加锁）</td></tr><tr><td align="left">-</td><td align="left">10（重量锁）重量锁指针</td><td>执行同步块</td></tr><tr><td align="left">-</td><td align="left">…</td><td>…</td></tr></tbody></table><p><strong>自旋重试失败的情况</strong></p><table><thead><tr><th>线程 1（core 1 上）</th><th>对象 Mark</th><th>线程 2（core 2 上）</th></tr></thead><tbody><tr><td>-</td><td>10（重量锁）</td><td>-</td></tr><tr><td>访问同步块，获取 monitor</td><td>10（重量锁）重量锁指针</td><td>-</td></tr><tr><td>成功（加锁）</td><td>10（重量锁）重量锁指针</td><td>-</td></tr><tr><td>执行同步块</td><td>10（重量锁）重量锁指针</td><td>-</td></tr><tr><td>执行同步块</td><td>10（重量锁）重量锁指针</td><td>访问同步块，获取 monitor</td></tr><tr><td>执行同步块</td><td>10（重量锁）重量锁指针</td><td>自旋重试</td></tr><tr><td>执行同步块</td><td>10（重量锁）重量锁指针</td><td>自旋重试</td></tr><tr><td>执行同步块</td><td>10（重量锁）重量锁指针</td><td>自旋重试</td></tr><tr><td>执行同步块</td><td>10（重量锁）重量锁指针</td><td>阻塞</td></tr><tr><td>-</td><td>…</td><td>…</td></tr></tbody></table><ul><li>自旋会<code>占用 CPU 时间</code>，单核 CPU 自旋就是浪费，<code>多核 CPU</code> 自旋才能发挥优势</li><li>在 Java 6 之后自旋锁是自适应的，比如对象刚刚的一次自旋操作成功过，那么认为这次自旋成功的可能性会高，就多自旋几次；反之，就少自旋甚至不自旋，总之，比较智能</li><li>Java 7 之后不能控制是否开启自旋功能</li></ul><h3 id="偏向锁-用于优化轻量级锁重入"><a href="#偏向锁-用于优化轻量级锁重入" class="headerlink" title="偏向锁(用于优化轻量级锁重入)"></a>偏向锁(用于优化轻量级锁重入)</h3><p>轻量级锁在没有竞争时，每次<code>重入</code>（该线程执行的方法中再次锁住该对象）操作仍需要CAS操作，这样会使性能降低的。</p><p>Java 6中引入了<code>偏向锁</code>进行进一步的优化：只有<code>第一次</code>CAS时会将<code>线程的ID</code>写入对象的Mark Word中，此后发现这个线程ID就是自己的，就表示没有竞争，就不需要重新CAS，以后只要不发生竞争，这个对象就归该线程所有</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc17.png"></p><h4 id="偏向状态"><a href="#偏向状态" class="headerlink" title="偏向状态"></a>偏向状态</h4><ul><li>Normal：一般状态，没有加任何锁，前面62位保存的是对象的信息，<strong>最后2位为状态（01），倒数第三位表示是否使用偏向锁（未使用：0）</strong></li><li>Biased：偏向状态，使用偏向锁，前面54位保存的当前线程的ID，<strong>最后2位为状态（01），倒数第三位表示是否使用偏向锁（使用：1）</strong></li><li>Lightweight：使用轻量级锁，前62位保存的是锁记录的指针，<strong>最后两位为状态（00）</strong></li><li>Heavyweight：使用重量级锁，前62位保存的是Monitor的地址指针，<strong>后两位为状态(10)</strong></li></ul><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc18.png"></p><p>一个对象创建时：</p><ul><li>如果开启了偏向锁<code>（默认开启）</code>，在创建对象时，对象的Mark Word后三位应该是101</li><li>但是偏向锁默认是<code>有延迟</code>的，不会在程序一启动时就立即生效，而是会在程序运行一段时间（几秒之后）才会生效，如果想避免延迟，可以加 VM 参数 <code>- XX:BiasedLockingStartupDelay=0</code> 来<code>禁用</code>延迟</li><li>如果没有开启偏向锁，对象的Mark Word后三位应该是001</li></ul><blockquote><p>注意 </p><p>处于偏向锁的对象解锁后，线程 id 仍存储于对象头中</p></blockquote><h4 id="撤销偏向状态"><a href="#撤销偏向状态" class="headerlink" title="撤销偏向状态"></a>撤销偏向状态</h4><p>以下几种情况会使对象的偏向锁失效</p><ul><li>调用对象的hashCode方法，但偏向锁的对象 MarkWord 中存储的是线程 id，如果调用 hashCode 会导致偏向锁被撤销 <ul><li>轻量级锁会在锁记录中记录 hashCode </li><li>重量级锁会在 Monitor 中记录 hashCode</li></ul></li><li>多个线程使用该对象，会将偏向锁升级为轻量级锁</li><li><strong>调用了wait/notify方法</strong>（调用wait方法会导致锁膨胀而使用<code>重量级锁</code>）</li></ul><h3 id="批量重偏向"><a href="#批量重偏向" class="headerlink" title="批量重偏向"></a>批量重偏向</h3><ul><li>如果对象虽然被多个线程访问，但是线程间不存在竞争，这时偏向了线程T1的对象仍有机会重新偏向T2，<code>重偏向会重置Thread ID</code></li><li>当<code>撤销超过20次后（超过阈值）</code>，JVM会觉得是不是偏向错了，这时会在给对象加锁时，<code>重新偏向至加锁线程</code>。</li></ul><h3 id="批量撤销"><a href="#批量撤销" class="headerlink" title="批量撤销"></a>批量撤销</h3><p>当撤销偏向锁的阈值超过40以后，就会将<code>整个类的对象都改为不可偏向的</code></p><h2 id="wait-notify-原理"><a href="#wait-notify-原理" class="headerlink" title="wait notify 原理"></a>wait notify 原理</h2><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc19.png"></p><ul><li><strong>锁对象调用wait方法（obj.wait），就会使当前线程进入WaitSet中，变为WAITING状态。</strong></li><li><strong>处于BLOCKED和WAITING状态的线程都为阻塞状态，CPU都不会分给他们时间片。但是有所区别：</strong><ul><li><strong>BLOCKED状态的线程是在竞争对象时，发现Monitor的Owner已经是别的线程了，此时就会进入EntryList中，并处于BLOCKED状态</strong></li><li><strong>WAITING状态的线程是获得了对象的锁，但是自身因为某些原因需要进入阻塞状态时，锁对象调用了wait方法而进入了WaitSet中，处于WAITING状态</strong></li></ul></li><li><strong>BLOCKED状态的线程会在锁被释放的时候被唤醒，但是处于WAITING状态的线程只有被锁对象调用了notify方法(obj.notify/obj.notifyAll)，才会被唤醒，但唤醒后并不意味者立刻获得锁，仍需进入 EntryList 重新竞争</strong></li></ul><blockquote><p><strong>注：只有当对象被锁以后，才能调用wait和notify方法</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span><span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> LOCK <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token comment">//只有在对象被锁住后才能调用wait方法</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>LOCK<span class="token punctuation">)</span> <span class="token punctuation">{</span>LOCK<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Wait与Sleep的区别"><a href="#Wait与Sleep的区别" class="headerlink" title="Wait与Sleep的区别"></a>Wait与Sleep的区别</h3><p><strong>不同点</strong></p><ul><li><strong>Sleep是Thread类的静态方法，Wait是Object的方法，Object又是所有类的父类，所以所有类都有Wait方法。</strong></li><li><strong>Sleep在阻塞的时候不会释放锁，而Wait在阻塞的时候会释放锁</strong></li><li><strong>Sleep不需要与synchronized一起使用，而Wait需要与synchronized一起使用（对象被锁以后才能使用）</strong></li></ul><p><strong>相同点</strong></p><ul><li>阻塞状态都为<code>TIMED_WAITING</code></li></ul><h3 id="优雅地使用wait-notify"><a href="#优雅地使用wait-notify" class="headerlink" title="优雅地使用wait/notify"></a>优雅地使用wait/notify</h3><p><strong>什么时候适合使用wait</strong></p><ul><li>当线程<code>不满足某些条件</code>，需要暂停运行时，可以<code>使用wait</code>。这样会将<code>对象的锁释放</code>，让其他线程能够继续运行。如果此时<code>使用sleep</code>，会<code>导致所有线程都进入阻塞</code>，导致所有线程都没法运行，直到当前线程sleep结束后，运行完毕，才能得到执行。</li></ul><p><strong>使用wait/notify需要注意什么</strong></p><ul><li>当有<code>多个</code>线程在运行时，对象都调用了wait方法，此时这些线程都会进入WaitSet中等待。如果这时使用了<code>notify</code>方法，可能会造成<code>虚假唤醒</code><strong>（唤醒的不是满足条件的等待线程）</strong>，这时就需要使用<code>notifyAll</code>方法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>LOCK<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token comment">//不满足条件，一直等待，避免虚假唤醒) {</span>LOCK<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//满足条件后再运行</span><span class="token punctuation">}</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>LOCK<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//唤醒所有等待线程</span>LOCK<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="同步模式之保护性暂停"><a href="#同步模式之保护性暂停" class="headerlink" title="同步模式之保护性暂停"></a>同步模式之保护性暂停</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>即 Guarded Suspension，用在一个线程等待另一个线程的执行结果 </p><p>要点 </p><ul><li>有一个<code>结果</code>需要从一个线程<code>传递</code>到另一个线程，让他们关联同一个 GuardedObject </li><li>如果有结果不断从一个线程到另一个线程那么可以使用<code>消息队列</code>（见生产者/消费者） </li><li>JDK 中，<code>join 的实现</code>、<code>Future 的实现</code>，采用的就是此模式 </li><li>因为要等待另一方的结果，因此归类到<code>同步模式</code></li></ul><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc20.png"></p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test2</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">String</span> hello <span class="token operator">=</span> <span class="token string">"hello thread!"</span><span class="token punctuation">;</span><span class="token class-name">Guarded</span> guarded <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Guarded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"想要得到结果"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>guarded<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结果是："</span><span class="token operator">+</span>guarded<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"得到结果"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"设置结果"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>guarded<span class="token punctuation">)</span> <span class="token punctuation">{</span>guarded<span class="token punctuation">.</span><span class="token function">setResponse</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Guarded</span> <span class="token punctuation">{</span><span class="token comment">/** * 要返回的结果 */</span><span class="token keyword">private</span> <span class="token class-name">Object</span> response<span class="token punctuation">;</span>    <span class="token comment">//优雅地使用wait/notify</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果返回结果为空就一直等待，避免虚假唤醒</span><span class="token keyword">while</span><span class="token punctuation">(</span>response <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> response<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setResponse</span><span class="token punctuation">(</span><span class="token class-name">Object</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>response <span class="token operator">=</span> response<span class="token punctuation">;</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//唤醒休眠的线程</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">"Guarded{"</span> <span class="token operator">+</span><span class="token string">"response="</span> <span class="token operator">+</span> response <span class="token operator">+</span><span class="token string">'}'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>带超时判断的暂停</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//获取开始时间</span><span class="token keyword">long</span> currentTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用于保存已经等待了的时间</span><span class="token keyword">long</span> passedTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>response <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//看经过的时间-开始时间是否超过了指定时间</span><span class="token keyword">long</span> waitTime <span class="token operator">=</span> time <span class="token operator">-</span>passedTime<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>waitTime <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">try</span> <span class="token punctuation">{</span>                   <span class="token comment">//等待剩余时间</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>waitTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//获取当前时间</span>passedTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>currentTime            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> response<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="原理之-join—使用保护性暂停模式"><a href="#原理之-join—使用保护性暂停模式" class="headerlink" title="原理之 join—使用保护性暂停模式"></a>原理之 join—使用保护性暂停模式</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token keyword">long</span> millis<span class="token punctuation">)</span>    <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> base <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> now <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>millis <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"timeout value is negative"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>millis <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">long</span> delay <span class="token operator">=</span> millis <span class="token operator">-</span> now<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>delay <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token function">wait</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>                now <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> base<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="park-unpark"><a href="#park-unpark" class="headerlink" title="park/unpark"></a>park/unpark</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p><strong>park/unpark都是<code>LockSupport类</code>中的的方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 暂停当前线程</span><span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 恢复某个线程的运行</span><span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>暂停线程对象<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//暂停线程运行</span><span class="token class-name">LockSupport</span><span class="token punctuation">.</span>park<span class="token punctuation">;</span><span class="token comment">//恢复线程运行</span><span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span><span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"park"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//暂停线程运行</span><span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"resume"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"unpark"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//恢复线程运行</span><span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p><strong>与wait/notify的区别</strong></p><ul><li>wait，notify 和 notifyAll 必须配合<code>Object Monitor</code>一起使用，而park，unpark<code>不必</code></li><li>park ，unpark 是以<code>线程为单位</code>来<code>阻塞</code>和<code>唤醒</code>线程，而 notify 只能随机唤醒一个等待线程，notifyAll 是唤醒所有等待线程，就不那么精确</li><li>park &amp; unpark 可以<code>先 unpark</code>，而 wait &amp; notify 不能先 notify</li><li><code>park不会释放锁</code>，而wait会释放锁</li></ul><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>每个线程都有一个自己的<code>Park对象</code>，并且该对象<code>_counter</code>, <code>_cond</code>,<code>__mutex</code>组成</p><ul><li><p><strong>先调用park再调用unpark时</strong></p><ul><li><p>先调用park</p><ul><li>线程运行时，会将Park对象中的<code>_counter的值设为0</code>；</li><li>调用park时，会先查看counter的值是否为0，如果为0，则将线程放入阻塞队列cond中</li><li>放入阻塞队列中后，会<code>再次</code>将counter设置为0</li></ul></li><li><p>然后调用unpark</p><ul><li><p>调用unpark方法后，会将<code>counter的值设置为1</code></p></li><li><p>去唤醒阻塞队列cond中的线程</p></li><li><p>线程继续运行并将counter的值设为0</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc21.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc22.png"></p></li></ul></li></ul></li><li><p><strong>先调用unpark，再调用park</strong></p><ul><li><p>调用unpark</p><ul><li>会将counter设置为1（运行时0）</li></ul></li><li><p>调用park方法</p><ul><li><p>查看counter是否为0</p></li><li><p>因为unpark已经把counter设置为1，所以此时将counter设置为0，但<code>不放入</code>阻塞队列cond中</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc23.png"></p></li></ul></li></ul></li></ul><h2 id="线程中的状态转换"><a href="#线程中的状态转换" class="headerlink" title="线程中的状态转换"></a>线程中的状态转换</h2><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc24.png"></p><h3 id="情况一：NEW-–-gt-RUNNABLE"><a href="#情况一：NEW-–-gt-RUNNABLE" class="headerlink" title="情况一：NEW –> RUNNABLE"></a>情况一：NEW –&gt; RUNNABLE</h3><ul><li>当调用了<code>t.start()</code>方法时，由 <strong>NEW –&gt; RUNNABLE</strong></li></ul><h3 id="情况二：-RUNNABLE-lt-–-gt-WAITING"><a href="#情况二：-RUNNABLE-lt-–-gt-WAITING" class="headerlink" title="情况二： RUNNABLE <–> WAITING"></a>情况二： RUNNABLE &lt;–&gt; WAITING</h3><ul><li>当调用了t 线程用 synchronized(obj) 获取了对象锁后<ul><li>调用 obj.wait() 方法时，t 线程从 <strong>RUNNABLE –&gt; WAITING</strong></li><li>调用 obj.notify() ， obj.notifyAll() ， t.interrupt() 时<ul><li><code>竞争锁成功</code>，t 线程从 <strong>WAITING –&gt; RUNNABLE</strong></li><li><code>竞争锁失败</code>，t 线程从 <strong>WAITING –&gt; BLOCKED</strong></li></ul></li></ul></li></ul><h3 id="情况三：RUNNABLE-lt-–-gt-WAITING"><a href="#情况三：RUNNABLE-lt-–-gt-WAITING" class="headerlink" title="情况三：RUNNABLE <–> WAITING"></a>情况三：RUNNABLE &lt;–&gt; WAITING</h3><ul><li><p>当前线程</p><p>调用 t.join() 方法时，当前线程从 <strong>RUNNABLE –&gt; WAITING</strong></p><ul><li>注意是<code>当前线程</code>在t 线程对象的监视器上等待</li></ul></li><li><p>t 线程<code>运行结束</code>，或调用了<code>当前线程</code>的 interrupt() 时，当前线程从 <strong>WAITING –&gt; RUNNABLE</strong></p></li></ul><h3 id="情况四：-RUNNABLE-lt-–-gt-WAITING"><a href="#情况四：-RUNNABLE-lt-–-gt-WAITING" class="headerlink" title="情况四： RUNNABLE <–> WAITING"></a>情况四： RUNNABLE &lt;–&gt; WAITING</h3><ul><li>当前线程调用 <code>LockSupport.park()</code> 方法会让当前线程从 <strong>RUNNABLE –&gt; WAITING</strong></li><li>调用 <code>LockSupport.unpark</code>(目标线程) 或调用了线程 的 <code>interrupt()</code> ，会让目标线程从 <strong>WAITING –&gt; RUNNABLE</strong></li></ul><h3 id="情况五：-RUNNABLE-lt-–-gt-TIMED-WAITING"><a href="#情况五：-RUNNABLE-lt-–-gt-TIMED-WAITING" class="headerlink" title="情况五： RUNNABLE <–> TIMED_WAITING"></a>情况五： RUNNABLE &lt;–&gt; TIMED_WAITING</h3><p>t 线程用 synchronized(obj) 获取了对象锁后</p><ul><li>调用 <code>obj.wait(long n)</code> 方法时，t 线程从 <strong>RUNNABLE –&gt; TIMED_WAITING</strong></li><li>t 线程等待时间超过了 n 毫秒，或调用 obj.notify() ， obj.notifyAll() ， t.interrupt() 时<ul><li><code>竞争锁成功</code>，t 线程从 <strong>TIMED_WAITING –&gt; RUNNABLE</strong></li><li><code>竞争锁失败</code>，t 线程从 TIMED_WAITING –&gt; BLOCKED</li></ul></li></ul><h3 id="情况六：RUNNABLE-lt-–-gt-TIMED-WAITING"><a href="#情况六：RUNNABLE-lt-–-gt-TIMED-WAITING" class="headerlink" title="情况六：RUNNABLE <–> TIMED_WAITING"></a>情况六：RUNNABLE &lt;–&gt; TIMED_WAITING</h3><ul><li>当前线程调用 <code>t.join(long n)</code> 方法时，当前线程从 <strong>RUNNABLE –&gt; TIMED_WAITING</strong><ul><li>注意是当前线程在t 线程对象的<code>监视器</code>上等待</li></ul></li><li>当前线程等待时间超过了 n 毫秒，或t 线程运行结束，或调用了当前线程的 interrupt() 时，当前线程从 <strong>TIMED_WAITING –&gt; RUNNABLE</strong></li></ul><h3 id="情况七：RUNNABLE-lt-–-gt-TIMED-WAITING"><a href="#情况七：RUNNABLE-lt-–-gt-TIMED-WAITING" class="headerlink" title="情况七：RUNNABLE <–> TIMED_WAITING"></a>情况七：RUNNABLE &lt;–&gt; TIMED_WAITING</h3><ul><li>当前线程调用 <code>Thread.sleep(long n)</code> ，当前线程从 RUNNABLE –&gt; TIMED_WAITING</li><li>当前线程等待时间超过了 n 毫秒，当前线程从 TIMED_WAITING –&gt; RUNNABLE</li></ul><h3 id="情况八：RUNNABLE-lt-–-gt-TIMED-WAITING"><a href="#情况八：RUNNABLE-lt-–-gt-TIMED-WAITING" class="headerlink" title="情况八：RUNNABLE <–> TIMED_WAITING"></a>情况八：RUNNABLE &lt;–&gt; TIMED_WAITING</h3><ul><li>当前线程调用 LockSupport.parkNanos(long nanos) 或 LockSupport.parkUntil(long millis) 时，当前线 程从 RUNNABLE –&gt; TIMED_WAITING</li><li>调用 LockSupport.unpark(目标线程) 或调用了线程 的 interrupt() ，或是<code>等待超时</code>，会让目标线程从 TIMED_WAITING–&gt; RUNNABLE</li></ul><h3 id="情况九：RUNNABLE-lt-–-gt-BLOCKED"><a href="#情况九：RUNNABLE-lt-–-gt-BLOCKED" class="headerlink" title="情况九：RUNNABLE <–> BLOCKED"></a>情况九：RUNNABLE &lt;–&gt; BLOCKED</h3><ul><li>t 线程用 <code>synchronized(obj)</code> 获取了对象锁时如果<code>竞争失败</code>，从 RUNNABLE –&gt; BLOCKED</li><li>持 obj 锁线程的同步代码块执行完毕，会唤醒该对象上所有 BLOCKED 的线程重新竞争，如果其中 t 线程竞争 成功，从 BLOCKED –&gt; RUNNABLE ，其它<code>失败</code>的线程仍然 BLOCKED</li></ul><h3 id="情况十：-RUNNABLE-lt-–-gt-TERMINATED"><a href="#情况十：-RUNNABLE-lt-–-gt-TERMINATED" class="headerlink" title="情况十： RUNNABLE <–> TERMINATED"></a>情况十： RUNNABLE &lt;–&gt; TERMINATED</h3><p>当前<code>线程所有代码运行完毕</code>，进入 TERMINATED</p><h2 id="多把锁"><a href="#多把锁" class="headerlink" title="多把锁"></a>多把锁</h2><p><strong>将锁的粒度细分</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">BigRoom</span> <span class="token punctuation">{</span>    <span class="token comment">//额外创建对象来作为锁</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> studyRoom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> bedRoom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="活跃性"><a href="#活跃性" class="headerlink" title="活跃性"></a>活跃性</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>因为某种原因，使得代码一直无法执行完毕，这样的现象叫做活跃性</p><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>有这样的情况：一个线程需要<code>同时获取多把锁</code>，这时就容易发生死锁</p><p>如：<code>t1 线程</code> 获得 <code>A对象</code>锁，接下来想<code>获取 B对象</code> 的锁， <code>t2 线程</code> 获得 <code>B对象</code> 锁，接下来<code>想获取 A对象</code> 的锁</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">final</span> <span class="token class-name">Object</span> <span class="token class-name">A</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> <span class="token class-name">Object</span> <span class="token class-name">B</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">B</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">B</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="发生死锁的必要条件"><a href="#发生死锁的必要条件" class="headerlink" title="发生死锁的必要条件"></a>发生死锁的必要条件</h4><ul><li><strong>互斥条件</strong><ul><li>在一段时间内，一种资源只能被一个进程所使用</li></ul></li><li><strong>请求和保持条件</strong><ul><li>进程已经拥有了至少一种资源，同时又去申请其他资源。因为其他资源被别的进程所使用，该进程进入阻塞状态，并且不释放自己已有的资源</li></ul></li><li><strong>不可抢占条件</strong><ul><li>进程对已获得的资源在未使用完成前不能被强占，只能在进程使用完后自己释放</li></ul></li><li><strong>循环等待条件</strong><ul><li>发生死锁时，必然存在一个进程——资源的循环链。</li></ul></li></ul><h4 id="定位死锁的方法"><a href="#定位死锁的方法" class="headerlink" title="定位死锁的方法"></a>定位死锁的方法</h4><ul><li><p>jps+jstack ThreadID</p><p>在JAVA控制台中的Terminal中输入<code>jps</code>指令可以查看运行中的线程ID，使用<code>jstack ThreadID</code>可以查看线程状态。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">E</span><span class="token operator">:</span>\study<span class="token operator">&gt;</span>jps<span class="token number">20672</span> <span class="token class-name">RemoteMavenServer36</span><span class="token number">22880</span> <span class="token class-name">Jps</span><span class="token number">4432</span> <span class="token class-name">Launcher</span><span class="token number">5321</span> <span class="token class-name">Test5</span><span class="token number">20184</span> <span class="token class-name">KotlinCompileDaemon</span><span class="token number">11132</span><span class="token class-name">F</span><span class="token operator">:</span>\study<span class="token operator">&gt;</span>jstack <span class="token number">5321</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>打印的结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//找到一个java级别的死锁</span><span class="token class-name">Found</span> one <span class="token class-name">Java</span><span class="token operator">-</span>level deadlock<span class="token operator">:</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token string">"Thread-1"</span><span class="token operator">:</span>  waiting <span class="token keyword">to</span> <span class="token namespace">lock</span> monitor <span class="token number">0x0000000017f40de8</span> <span class="token punctuation">(</span>object <span class="token number">0x00000000d6188880</span><span class="token punctuation">,</span> a java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  which is held by <span class="token string">"Thread-0"</span><span class="token string">"Thread-0"</span><span class="token operator">:</span>  waiting <span class="token keyword">to</span> <span class="token namespace">lock</span> monitor <span class="token number">0x0000000017f43678</span> <span class="token punctuation">(</span>object <span class="token number">0x00000000d6188890</span><span class="token punctuation">,</span> a java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  which is held by <span class="token string">"Thread-1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>jconsole检测死锁，即可看到有没有死锁存在</p></li></ul><h4 id="哲学家就餐问题"><a href="#哲学家就餐问题" class="headerlink" title="哲学家就餐问题"></a>哲学家就餐问题</h4><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc25.png"></p><p>有五位哲学家，围坐在圆桌旁</p><ul><li>他们只做两件事，思考和吃饭，思考一会吃口饭，吃完饭后接着思考</li><li>吃饭时要用两根筷子吃，桌上共有 5 根筷子，每位哲学家左右手边各有一根筷子</li><li>如果筷子被身边的人拿着，自己就得等待</li></ul><h4 id="避免死锁的方法"><a href="#避免死锁的方法" class="headerlink" title="避免死锁的方法"></a>避免死锁的方法</h4><p>在线程使用锁对象时，<code>顺序加锁</code>即可避免死锁</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608145450.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608145450.png" alt="img"></a></p><h3 id="活锁"><a href="#活锁" class="headerlink" title="活锁"></a>活锁</h3><p>活锁出现在两个线程<code>互相改变对方的结束条件</code>，后<code>谁也无法结束。</code></p><h4 id="避免活锁的方法"><a href="#避免活锁的方法" class="headerlink" title="避免活锁的方法"></a>避免活锁的方法</h4><p>在线程执行时，中途给予<code>不同的间隔时间</code>即可。</p><h4 id="死锁与活锁的区别"><a href="#死锁与活锁的区别" class="headerlink" title="死锁与活锁的区别"></a>死锁与活锁的区别</h4><ul><li>死锁是因为线程互相持有对象想要的锁，并且都不释放，最后到时<code>线程阻塞</code>，<code>停止运行</code>的现象。</li><li>活锁是因为线程间修改了对方的结束条件，而导致代码<code>一直在运行</code>，却一直<code>运行不完</code>的现象。</li></ul><h3 id="饥饿"><a href="#饥饿" class="headerlink" title="饥饿"></a>饥饿</h3><p>某些线程因为优先级太低，导致<code>一直无法</code>获得资源的现象。</p><p>在使用<code>顺序加锁</code>时，可能会出现饥饿现象</p><h2 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h2><blockquote><p>和synchronized相比具有的的特点</p></blockquote><ul><li>可中断</li><li>可以设置超时时间</li><li>可以设置为公平锁 (先到先得)</li><li>支持多个条件变量( 具<code>有多个waitset</code>)</li></ul><p><strong>与 synchronized 一样，都支持可重入</strong></p><p><strong>基本语法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//获取ReentrantLock对象</span><span class="token keyword">private</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加锁</span>lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token comment">//需要执行的代码</span><span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span><span class="token comment">//释放锁</span>lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="可重入"><a href="#可重入" class="headerlink" title="可重入"></a>可重入</h3><ul><li>可重入是指同一个线程如果首次获得了这把锁，那么因为它是这把锁的拥有者，因此有权利再次获取这把锁</li><li>如果是不可重入锁，那么第二次获得锁时，自己也会被锁挡住</li></ul><h3 id="可打断"><a href="#可打断" class="headerlink" title="可打断"></a>可打断</h3><p>如果某个线程处于阻塞状态，可以调用其<code>interrupt</code>方法让其停止阻塞，获得锁失败</p><p>简而言之就是：处于阻塞状态的线程，被打断了就不用阻塞了，<code>直接停止运行</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token comment">//加锁，可打断锁</span>lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//被打断，返回，不再向下执行</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span><span class="token comment">//释放锁</span>lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打断</span>t1<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="锁超时"><a href="#锁超时" class="headerlink" title="锁超时"></a>锁超时</h3><p>使用<code>lock.tryLock</code>方法会返回获取锁是否成功。如果成功则返回true，反之则返回false。</p><p>并且tryLock方法可以<code>指定等待时间</code>，参数为：tryLock(long timeout, TimeUnit unit), 其中timeout为最长等待时间，TimeUnit为时间单位</p><p>简而言之就是：获取失败了、获取超时了或者被打断了，不再阻塞，<code>直接停止运行</code></p><p>不设置等待时间</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token comment">//未设置等待时间，一旦获取失败，直接返回false</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//获取失败，不再向下执行，返回</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"得到了锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{</span>t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置等待时间</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token comment">//判断获取锁是否成功，最多等待1秒</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取失败，不再向下执行，直接返回</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//被打断，不再向下执行，直接返回</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"得到了锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放锁</span>lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{</span>t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打断等待</span>t1<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="公平锁"><a href="#公平锁" class="headerlink" title="公平锁"></a>公平锁</h3><p>在线程获取锁失败，进入阻塞队列时，<code>先进入</code>的会在锁被释放后<code>先获得</code>锁。这样的获取方式就是<code>公平的。</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//默认是不公平锁，需要在创建时指定为公平锁</span><span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="条件变量"><a href="#条件变量" class="headerlink" title="条件变量"></a>条件变量</h3><p>synchronized 中也有条件变量，就是我们讲原理时那个 waitSet 休息室，当条件不满足时进入waitSet 等待</p><p>ReentrantLock 的条件变量比 synchronized 强大之处在于，它是<code>支持多个条件变量</code>的，这就好比</p><ul><li>synchronized 是那些不满足条件的线程都在一间休息室等消息</li><li>而 ReentrantLock 支持多间休息室，比如有专门等烟的休息室、专门等早餐的休息室、唤醒时也是按休息室来唤醒</li></ul><p>使用要点：</p><ul><li>await 前需要<code>获得锁</code></li><li>await 执行后，会释放锁，进入 <code>conditionObject</code> 等待</li><li>await 的线程被唤醒（或打断、或超时）取重新竞争 lock 锁</li><li>竞争 <code>lock 锁成功</code>后，从 await 后继续执行</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token class-name">Boolean</span> judge <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span><span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得条件变量</span><span class="token class-name">Condition</span> condition <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>judge<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不满足条件，等待..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等待</span>condition<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行完毕！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>judge <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//释放</span>condition<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通过Lock与AQS实现可重入锁"><a href="#通过Lock与AQS实现可重入锁" class="headerlink" title="通过Lock与AQS实现可重入锁"></a>通过Lock与AQS实现可重入锁</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLock</span> <span class="token keyword">implements</span> <span class="token class-name">Lock</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Sync</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueuedSynchronizer</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> state <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">compareAndSetState</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> state <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">int</span> state <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">compareAndSetState</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">compareAndSetState</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> state <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token class-name">Condition</span> <span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConditionObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token class-name">Sync</span> sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      sync<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>      sync<span class="token punctuation">.</span><span class="token function">acquireInterruptibly</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> sync<span class="token punctuation">.</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> time<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> sync<span class="token punctuation">.</span><span class="token function">tryAcquireNanos</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      sync<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token class-name">Condition</span> <span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> sync<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>   <span class="token keyword">static</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>      <span class="token class-name">MyLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Object</span> syncLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>               lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">try</span> <span class="token punctuation">{</span>                  lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">try</span> <span class="token punctuation">{</span>                     num<span class="token operator">++</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                     lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>               <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                  lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>               lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>               lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">try</span> <span class="token punctuation">{</span>                  lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">try</span> <span class="token punctuation">{</span>                     num<span class="token operator">--</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                     lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>               <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                  lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>               lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="同步模式之-Balking"><a href="#同步模式之-Balking" class="headerlink" title="同步模式之 Balking"></a>同步模式之 Balking</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><blockquote><p>Balking （犹豫）模式用在一个线程发现另一个线程或本线程已经做了某一件相同的事，那么本线程就无需再做 了，直接结束返回 </p></blockquote><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MonitorService</span> <span class="token punctuation">{</span> <span class="token comment">// 用来表示是否已经有线程已经在执行启动了</span> <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> starting<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"尝试启动监控线程..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>starting<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     starting <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>  <span class="token comment">// 真正启动监控线程...</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当前端页面多次点击按钮调用 start 时 </p><p>输出</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>http<span class="token operator">-</span>nio<span class="token operator">-</span><span class="token number">8080</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>monitor<span class="token punctuation">.</span>service<span class="token punctuation">.</span><span class="token class-name">MonitorService</span> <span class="token operator">-</span> 该监控线程已启动<span class="token operator">?</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">[</span>http<span class="token operator">-</span>nio<span class="token operator">-</span><span class="token number">8080</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>monitor<span class="token punctuation">.</span>service<span class="token punctuation">.</span><span class="token class-name">MonitorService</span> <span class="token operator">-</span> 监控线程已启动<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">[</span>http<span class="token operator">-</span>nio<span class="token operator">-</span><span class="token number">8080</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>monitor<span class="token punctuation">.</span>service<span class="token punctuation">.</span><span class="token class-name">MonitorService</span> <span class="token operator">-</span> 该监控线程已启动<span class="token operator">?</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">[</span>http<span class="token operator">-</span>nio<span class="token operator">-</span><span class="token number">8080</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span> cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>monitor<span class="token punctuation">.</span>service<span class="token punctuation">.</span><span class="token class-name">MonitorService</span> <span class="token operator">-</span> 该监控线程已启动<span class="token operator">?</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">[</span>http<span class="token operator">-</span>nio<span class="token operator">-</span><span class="token number">8080</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span> cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>monitor<span class="token punctuation">.</span>service<span class="token punctuation">.</span><span class="token class-name">MonitorService</span> <span class="token operator">-</span> 该监控线程已启动<span class="token operator">?</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它还经常用来实现线程安全的单例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span> <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> INSTANCE <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>INSTANCE <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对比一下保护性暂停模式：保护性暂停模式用在一个线程等待另一个线程的执行结果，当条件不满足时线程等待。</p><h2 id="同步模式之顺序控制"><a href="#同步模式之顺序控制" class="headerlink" title="同步模式之顺序控制"></a>同步模式之顺序控制</h2><h3 id="固定运行顺序"><a href="#固定运行顺序" class="headerlink" title="固定运行顺序"></a>固定运行顺序</h3><blockquote><p>比如，必须先 2 后 1 打印</p></blockquote><h4 id="wait-notify版本"><a href="#wait-notify版本" class="headerlink" title="wait notify版本"></a>wait notify版本</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 用来同步的对象</span><span class="token keyword">static</span> <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// t2 运行标记， 代表 t2 是否执行过</span><span class="token keyword">static</span> <span class="token keyword">boolean</span> t2runed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>         <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment">// 如果 t2 没有执行过</span>             <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>t2runed<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">try</span> <span class="token punctuation">{</span>                 <span class="token comment">// t1 先等一会</span>                 obj<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span> <span class="token punctuation">}</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment">// 修改运行标记</span>         t2runed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>         <span class="token comment">// 通知 obj 上等待的线程（可能有多个，因此需要用 notifyAll）</span>         obj<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Park-Unpark-版"><a href="#Park-Unpark-版" class="headerlink" title="Park Unpark 版"></a>Park Unpark 版</h4><p>可以看到，实现上很麻烦： </p><ul><li>首先，需要保证先 wait 再 notify，否则 wait 线程永远得不到唤醒。因此使用了『运行标记』来判断该不该 wait </li><li>第二，如果有些干扰线程错误地 notify 了 wait 线程，条件不满足时还要重新等待，使用了 while 循环来解决 此问题 </li><li>最后，唤醒对象上的 wait 线程需要使用 notifyAll，因为『同步对象』上的等待线程可能不止一个 </li></ul><p>可以使用 LockSupport 类的 park 和 unpark 来简化上面的题目：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>     <span class="token keyword">try</span> <span class="token punctuation">{</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>     <span class="token comment">// 当没有『许可』时，当前线程暂停运行；有『许可』时，用掉这个『许可』，当前线程恢复运行</span>     <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 给线程 t1 发放『许可』（多次连续调用 unpark 只会发放一个『许可』）</span>     <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>park 和 unpark 方法比较灵活，他俩谁先调用，谁后调用无所谓。并且是以线程为单位进行『暂停』和『恢复』， <strong>不需要『同步对象』和『运行标记』</strong></p><h3 id="交替输出"><a href="#交替输出" class="headerlink" title="交替输出"></a>交替输出</h3><blockquote><p>比如：线程 1 输出 a 5 次，线程 2 输出 b 5 次，线程 3 输出 c 5 次。现在要求输出 abcabcabcabcabc 怎么实现</p></blockquote><h4 id="wait-notify版本-1"><a href="#wait-notify版本-1" class="headerlink" title="wait/notify版本"></a><strong>wait/notify版本</strong></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test4</span> <span class="token punctuation">{</span><span class="token keyword">static</span> <span class="token class-name">Symbol</span> symbol <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>symbol<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>symbol<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>symbol<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Symbol</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token keyword">int</span> flag<span class="token punctuation">,</span> <span class="token keyword">int</span> nextFlag<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>loopNumber<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">while</span><span class="token punctuation">(</span>flag <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置下一个运行的线程标记</span><span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> nextFlag<span class="token punctuation">;</span><span class="token comment">//唤醒所有线程</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * 线程的执行标记， 1-&gt;a 2-&gt;b 3-&gt;c */</span><span class="token keyword">private</span> <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> loopNumber <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> flag<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFlag</span><span class="token punctuation">(</span><span class="token keyword">int</span> flag<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> flag<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getLoopNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> loopNumber<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLoopNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> loopNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>loopNumber <span class="token operator">=</span> loopNumber<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="await-signal版本"><a href="#await-signal版本" class="headerlink" title="await/signal版本"></a><strong>await/signal版本</strong></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test5</span> <span class="token punctuation">{</span><span class="token keyword">static</span> <span class="token class-name">AwaitSignal</span> awaitSignal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AwaitSignal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token class-name">Condition</span> conditionA <span class="token operator">=</span> awaitSignal<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token class-name">Condition</span> conditionB <span class="token operator">=</span> awaitSignal<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token class-name">Condition</span> conditionC <span class="token operator">=</span> awaitSignal<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>awaitSignal<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> conditionA<span class="token punctuation">,</span> conditionB<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>awaitSignal<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> conditionB<span class="token punctuation">,</span> conditionC<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>awaitSignal<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span> conditionC<span class="token punctuation">,</span> conditionA<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>awaitSignal<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">//唤醒一个等待的线程</span>conditionA<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>awaitSignal<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">AwaitSignal</span> <span class="token keyword">extends</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">Condition</span> thisCondition<span class="token punctuation">,</span> <span class="token class-name">Condition</span> nextCondition<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>loopNumber<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment">//全部进入等待状态</span>thisCondition<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>nextCondition<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">int</span> loopNumber<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getLoopNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> loopNumber<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLoopNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> loopNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>loopNumber <span class="token operator">=</span> loopNumber<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>ThreadLocal是JDK包提供的，它提供了线程本地变量，也就是如果你创建了一个ThreadLocal变量，那么<code>访问这个变量的每个线程都会有这个变量的一个本地副本</code>。当多个线程操作这个变量时，实际操作的是自己本地内存里面的变量，从而避免了线程安全问题</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLocalStudy</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 创建ThreadLocal变量</span>      <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stringThreadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userThreadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 创建两个线程，分别使用上面的两个ThreadLocal变量</span>      <span class="token class-name">Thread</span> thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>         <span class="token comment">// stringThreadLocal第一次赋值</span>         stringThreadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"thread1 stringThreadLocal first"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// stringThreadLocal第二次赋值</span>         stringThreadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"thread1 stringThreadLocal second"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// userThreadLocal赋值</span>         userThreadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Nyima"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 取值</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringThreadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userThreadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 移除</span> userThreadLocal<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userThreadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Thread</span> thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>         <span class="token comment">// stringThreadLocal第一次赋值</span>         stringThreadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"thread2 stringThreadLocal first"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// stringThreadLocal第二次赋值</span>         stringThreadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"thread2 stringThreadLocal second"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// userThreadLocal赋值</span>         userThreadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Hulu"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 取值</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringThreadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userThreadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 启动线程</span>      thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>   <span class="token class-name">String</span> name<span class="token punctuation">;</span>   <span class="token keyword">int</span> age<span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">"User{"</span> <span class="token operator">+</span>            <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>            <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>            <span class="token string">'}'</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行结果</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">thread1 stringThreadLocal secondthread2 stringThreadLocal second<span class="token class-name">User</span><span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'Nyima'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token class-name">User</span><span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'Hulu'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token keyword">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从运行结果可以看出</p><ul><li>每个线程中的ThreadLocal变量是每个<code>线程私有</code>的，而不是共享的<ul><li>从线程1和线程2的打印结果可以看出</li></ul></li><li>ThreadLocal其实就相当于其泛型类型的一个变量，只不过是每个线程私有的<ul><li>stringThreadLocal被赋值了两次，保存的是最后一次赋值的结果</li></ul></li><li>ThreadLocal可以进行以下几个操作<ul><li><strong>set 设置值</strong></li><li><strong>get 取出值</strong></li><li><strong>remove 移除值</strong></li></ul></li></ul><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><h4 id="Thread中的threadLocals"><a href="#Thread中的threadLocals" class="headerlink" title="Thread中的threadLocals"></a>Thread中的threadLocals</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Thread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token class-name">ThreadLocal</span><span class="token punctuation">.</span><span class="token class-name">ThreadLocalMap</span> threadLocals <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 放在后面说</span> <span class="token class-name">ThreadLocal</span><span class="token punctuation">.</span><span class="token class-name">ThreadLocalMap</span> inheritableThreadLocals <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLocalMap</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span> <span class="token keyword">extends</span> <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ThreadLocal</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>        <span class="token comment">/** The value associated with this ThreadLocal. */</span>        <span class="token class-name">Object</span> value<span class="token punctuation">;</span>        <span class="token class-name">Entry</span><span class="token punctuation">(</span><span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> k<span class="token punctuation">,</span> <span class="token class-name">Object</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>            value <span class="token operator">=</span> v<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出Thread类中有一个threadLocals和一个inheritableThreadLocals，它们都是ThreadLocalMap类型的变量，而ThreadLocalMap是一个定制化的Hashmap。在默认情况下，每个线程中的这两个变量都为null。此处先讨论threadLocals，inheritableThreadLocals放在后面讨论</p><h4 id="ThreadLocal中的方法"><a href="#ThreadLocal中的方法" class="headerlink" title="ThreadLocal中的方法"></a><strong>ThreadLocal中的方法</strong></h4><p><strong>set方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 获取当前线程</span>    <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获得ThreadLocalMap对象 </span>    <span class="token comment">// 这里的get会返回Thread类中的threadLocals</span>    <span class="token class-name">ThreadLocalMap</span> map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 判断map是否已经创建，没创建就创建并放入值，创建了就直接放入</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token comment">// ThreadLocal自生的引用作为key，传入的值作为value</span>        map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">createMap</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>如果未创建</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">createMap</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> t<span class="token punctuation">,</span> <span class="token class-name">T</span> firstValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 创建的同时设置想放入的值</span>    <span class="token comment">// hreadLocal自生的引用作为key，传入的值作为value</span>    t<span class="token punctuation">.</span>threadLocals <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocalMap</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> firstValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>get方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 获取当前线程</span>    <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取当前线程的threadLocals变量</span>    <span class="token class-name">ThreadLocalMap</span> map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 判断threadLocals是否被初始化了</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 已经初始化则直接返回</span>        <span class="token class-name">ThreadLocalMap</span><span class="token punctuation">.</span><span class="token class-name">Entry</span> e <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">getEntry</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>            <span class="token class-name">T</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span>e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 否则就创建threadLocals</span>    <span class="token keyword">return</span> <span class="token function">setInitialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token class-name">T</span> <span class="token function">setInitialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 这个方法返回是null</span>    <span class="token class-name">T</span> value <span class="token operator">=</span> <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ThreadLocalMap</span> map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 无论map创建与否，最终value的值都为null</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">createMap</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">protected</span> <span class="token class-name">T</span> <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>remove方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">ThreadLocalMap</span> m <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token comment">// 如果threadLocals已经被初始化，则移除</span>        m<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a><strong>总结</strong></h4><p>在每个线程内部都有一个名为threadLocals的成员变量，该变量的<code>类型为HashMap</code>，其中<strong>key为我们定义的ThreadLocal变量的this引用，value则为我们使用set方法设置的值</strong>。每个线程的本地变量存放在线程自己的内存变量threadLocals中</p><p>只有当前线程<strong>第一次调用ThreadLocal的set或者get方法时才会创建threadLocals</strong>（inheritableThreadLocals也是一样）。其实每个线程的本地变量不是存放在ThreadLocal实例里面，而是存放在调用线程的threadLocals变量里面</p><h2 id="15、InheritableThreadLocal"><a href="#15、InheritableThreadLocal" class="headerlink" title="15、InheritableThreadLocal"></a>15、InheritableThreadLocal</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>从ThreadLocal的源码可以看出，无论是set、get、还是remove，都是相对于当前线程操作的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以ThreadLocal无法从父线程传向子线程，所以InheritableThreadLocal出现了，<strong>它能够让父线程中ThreadLocal的值传给子线程。</strong></p><p>也就是从main所在的线程，传给thread1或thread2</p><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stringThreadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">InheritableThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stringInheritable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InheritableThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 主线程赋对上面两个变量进行赋值</span>      stringThreadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"this is threadLocal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      stringInheritable<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"this is inheritableThreadLocal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 创建线程</span>      <span class="token class-name">Thread</span> thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>         <span class="token comment">// 获得ThreadLocal中存放的值</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringThreadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 获得InheritableThreadLocal存放的值</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringInheritable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行结果</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">null</span><span class="token keyword">this</span> is inheritableThreadLocal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以看出InheritableThreadLocal的值成功从主线程传入了子线程，而ThreadLocal则没有</p><h3 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h3><h4 id="InheritableThreadLocal"><a href="#InheritableThreadLocal" class="headerlink" title="InheritableThreadLocal"></a>InheritableThreadLocal</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InheritableThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token comment">// 传入父线程中的一个值，然后直接返回</span>    <span class="token keyword">protected</span> <span class="token class-name">T</span> <span class="token function">childValue</span><span class="token punctuation">(</span><span class="token class-name">T</span> parentValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> parentValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token comment">// 返回传入线程的inheritableThreadLocals</span>    <span class="token comment">// Thread中有一个inheritableThreadLocals变量</span>    <span class="token comment">// ThreadLocal.ThreadLocalMap inheritableThreadLocals = null;</span>    <span class="token class-name">ThreadLocalMap</span> <span class="token function">getMap</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> t<span class="token punctuation">.</span>inheritableThreadLocals<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token comment">// 创建一个inheritableThreadLocals</span>    <span class="token keyword">void</span> <span class="token function">createMap</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> t<span class="token punctuation">,</span> <span class="token class-name">T</span> firstValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        t<span class="token punctuation">.</span>inheritableThreadLocals <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocalMap</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> firstValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由如上代码可知，InheritableThreadLocal继承了ThreadLocal，并重写了三个方法。InheritableThreadLocal重写了<code>createMap</code>方法，那么现在当第一次调用set方法时，创建的是当前线程的inheritableThreadLocals变量的实例而不再是threadLocals。当调用<code>getMap方法</code>获取当前线程内部的map变量时，获取的是inheritableThreadLocals而不再是threadLocals</p><h4 id="childValue-T-parentValue-方法的调用"><a href="#childValue-T-parentValue-方法的调用" class="headerlink" title="childValue(T parentValue)方法的调用"></a>childValue(T parentValue)方法的调用</h4><p>在主函数运行时，会调用Thread的默认构造函数（<code>创建主线程</code>，也就是父线程），所以我们先看看Thread的默认构造函数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"Thread-"</span> <span class="token operator">+</span> <span class="token function">nextThreadNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ThreadGroup</span> g<span class="token punctuation">,</span> <span class="token class-name">Runnable</span> target<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span>                  <span class="token keyword">long</span> stackSize<span class="token punctuation">,</span> <span class="token class-name">AccessControlContext</span> acc<span class="token punctuation">,</span>                  <span class="token keyword">boolean</span> inheritThreadLocals<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment">// 获得当前线程的，在这里是主线程</span>    <span class="token class-name">Thread</span> parent <span class="token operator">=</span> <span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment">// 如果父线程的inheritableThreadLocals存在</span>    <span class="token comment">// 我们在主线程中调用set和get时，会创建inheritableThreadLocals</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>inheritThreadLocals <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>inheritableThreadLocals <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token comment">// 设置子线程的inheritableThreadLocals</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>inheritableThreadLocals <span class="token operator">=</span>            <span class="token class-name">ThreadLocal</span><span class="token punctuation">.</span><span class="token function">createInheritedMap</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>inheritableThreadLocals<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* Stash the specified stack size in case the VM cares */</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>stackSize <span class="token operator">=</span> stackSize<span class="token punctuation">;</span>    <span class="token comment">/* Set thread ID */</span>    tid <span class="token operator">=</span> <span class="token function">nextThreadID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token class-name">ThreadLocalMap</span> <span class="token function">createInheritedMap</span><span class="token punctuation">(</span><span class="token class-name">ThreadLocalMap</span> parentMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocalMap</span><span class="token punctuation">(</span>parentMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在createInheritedMap内部使用父线程的inheritableThreadLocals变量作为构造函数创建了一个新的ThreadLocalMap变量，然后赋值给了子线程的inheritableThreadLocals变量</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">ThreadLocalMap</span><span class="token punctuation">(</span><span class="token class-name">ThreadLocalMap</span> parentMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Entry</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parentTable <span class="token operator">=</span> parentMap<span class="token punctuation">.</span>table<span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> parentTable<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token function">setThreshold</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Entry</span> e <span class="token operator">=</span> parentTable<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>            <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> key <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> e<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 这里调用了 childValue 方法</span>                <span class="token comment">// 该方法会返回parent的值</span>                <span class="token class-name">Object</span> value <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">childValue</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token class-name">Entry</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> h <span class="token operator">=</span> key<span class="token punctuation">.</span>threadLocalHashCode <span class="token operator">&amp;</span> <span class="token punctuation">(</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>table<span class="token punctuation">[</span>h<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                    h <span class="token operator">=</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>                table<span class="token punctuation">[</span>h<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>                size<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在该构造函数内部把父线程的inheritableThreadLocals成员变量的值复制到新的ThreadLocalMap对象中</p><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><p>InheritableThreadLocal类通过重写getMap和createMap，让本地变量保存到了具体线程的inheritableThreadLocals变量里面，那么线程在通过InheritableThreadLocal类实例的set或者get方法设置变量时，就会创建当前线程的inheritableThreadLocals变量。</p><p><strong>当父线程创建子线程时，构造函数会把父线程中inheritableThreadLocals变量里面的本地变量复制一份保存到子线程的inheritableThreadLocals变量里面。</strong></p><hr><h1 id="共享模型之内存"><a href="#共享模型之内存" class="headerlink" title="共享模型之内存"></a>共享模型之内存</h1><h2 id="JAVA内存模型（JMM）"><a href="#JAVA内存模型（JMM）" class="headerlink" title="JAVA内存模型（JMM）"></a>JAVA内存模型（JMM）</h2><p>JMM 即 Java Memory Model，它定义了<code>主存（共享内存）、工作内存（线程私有）</code>抽象概念，底层对应着 CPU 寄存器、缓存、硬件内存、 CPU 指令优化等。</p><p><strong>JMM体现在以下几个方面</strong></p><ul><li>原子性 - 保证指令不会受到线程上下文切换的影响</li><li>可见性 - 保证指令不会受 cpu 缓存的影响</li><li>有序性 - 保证指令不会受 cpu 指令并行优化的影响</li></ul><h2 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h2><h3 id="引例"><a href="#引例" class="headerlink" title="引例"></a>引例</h3><p><strong>退不出的循环</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token class-name">Boolean</span> run <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span><span class="token keyword">while</span> <span class="token punctuation">(</span>run<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果run为真，则一直执行</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"改变run的值为false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>run <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>为什么无法退出该循环</strong></p><ul><li>初始状态， t 线程刚开始从<code>主内存</code>读取了 run 的值到<code>工作内存</code>。</li></ul><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc26.png"></p><ul><li>因为 t 线程要频繁从主内存中读取 run 的值，JIT 编译器会将 run 的值<code>缓存至自己工作内存</code>中的高速缓存中， 减少对主存中 run 的访问，提高效率</li></ul><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc27.png"></p><ul><li>1 秒之后，main 线程修改了 run 的值，并同步至主存，而 t 是从自己工作内存中的高速缓存中读取这个变量 的值，结果永远是<code>旧值</code></li></ul><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc28.png"></p><p><strong>解决方法</strong></p><ul><li>使用<code>volatile</code>易变关键字</li><li>它可以用来修饰<code>成员变量</code>和<code>静态成员变量</code>（放在主存中的变量），他可以避免线程从自己的工作缓存中查找变量的值，必须到主存中获取它的值，线程操作 volatile 变量都是<code>直接操作主存</code></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//使用易变关键字</span><span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token class-name">Boolean</span> run <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span><span class="token keyword">while</span> <span class="token punctuation">(</span>run<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果run为真，则一直执行</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"改变run的值为false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>run <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="可见性与原子性"><a href="#可见性与原子性" class="headerlink" title="可见性与原子性"></a>可见性与原子性</h3><p>前面例子体现的实际就是<code>可见性</code>，它保证的是在多个线程之间，一个线程对<code>volatile变量</code>的修改对另一个线程可见， <code>不能</code>保证原子性，仅用在<code>一个写</code>线程，<code>多个读</code>线程的情况</p><ul><li><p>注意 synchronized 语句块既可以保证代码块的<code>原子性</code>，也同时保证代码块内变量的<code>可见性</code>。</p></li><li><p>但缺点是 synchronized 是属于<code>重量级</code>操作，性能相对更低。</p></li><li><p>如果在前面示例的死循环中加入 System.out.println() 会发现即使不加 volatile 修饰符，线程 t 也能正确看到 对 run 变量的修改了，想一想为什么？</p><ul><li><p>因为使用了<code>synchronized</code>关键字</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//使用了synchronized关键字</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="两阶终止模式优化"><a href="#两阶终止模式优化" class="headerlink" title="两阶终止模式优化"></a>两阶终止模式优化</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test7</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span><span class="token class-name">Monitor</span> monitor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Monitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>monitor<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>monitor<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Monitor</span> <span class="token punctuation">{</span><span class="token class-name">Thread</span> monitor<span class="token punctuation">;</span><span class="token comment">//设置标记，用于判断是否被终止了</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> stop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">/** * 启动监控器线程 */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//设置线控器线程，用于监控线程状态</span>monitor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//开始不停的监控</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>stop<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"处理后续任务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"监控器运行中..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token comment">//线程休眠</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"被打断了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>monitor<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * 用于停止监控器线程 */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//打断线程</span>monitor<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//修改标记</span>stop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="同步模式之犹豫模式"><a href="#同步模式之犹豫模式" class="headerlink" title="同步模式之犹豫模式"></a>同步模式之犹豫模式</h3><p><strong>定义</strong></p><p>Balking （犹豫）模式用在一个线程发现另一个线程或本线程<code>已经做了某一件相同</code>的事，那么本线程就无需再做 了，**直接<code>结束返回**</code></p><ul><li>用一个标记来判断该任务是否已经被执行过了</li><li>需要避免线程安全问题<ul><li>加锁的代码块要尽量的小，以保证性能</li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>nyima<span class="token punctuation">.</span>day1</span><span class="token punctuation">;</span><span class="token comment">/** * @author Chen Panwen * @data 2020/3/26 16:11 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test7</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span><span class="token class-name">Monitor</span> monitor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Monitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>monitor<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>monitor<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>monitor<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Monitor</span> <span class="token punctuation">{</span><span class="token class-name">Thread</span> monitor<span class="token punctuation">;</span><span class="token comment">//设置标记，用于判断是否被终止了</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> stop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//设置标记，用于判断是否已经启动过了</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> starting <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">/** * 启动监控器线程 */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//上锁，避免多线程运行时出现线程安全问题</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>starting<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//已被启动，直接返回</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//启动监视器，改变标记</span>starting <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//设置线控器线程，用于监控线程状态</span>monitor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//开始不停的监控</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>stop<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"处理后续任务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"监控器运行中..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token comment">//线程休眠</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"被打断了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>monitor<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * 用于停止监控器线程 */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//打断线程</span>monitor<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h2><h3 id="指令重排"><a href="#指令重排" class="headerlink" title="指令重排"></a>指令重排</h3><ul><li>JVM 会在<strong>不影响正确性</strong>的前提下，可以<strong>调整</strong>语句的执行<strong>顺序</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> j<span class="token punctuation">;</span><span class="token comment">// 在某个线程内执行如下赋值操作</span>i <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span> j <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可以看到，至于是先执行 i 还是 先执行 j ，对最终的结果不会产生影响。所以，上面代码真正执行时，既可以是</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">i <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span> j <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>也可以是</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">j <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>i <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这种特性称之为『<code>指令重排</code>』，<strong>多线程下『指令重排』会影响正确性</strong>。</p><h3 id="指令重排序优化"><a href="#指令重排序优化" class="headerlink" title="指令重排序优化"></a>指令重排序优化</h3><ul><li>事实上，现代处理器会设计为一个时钟周期完成一条执行时间长的 CPU 指令。为什么这么做呢？可以想到指令还可以再划分成一个个更小的阶段，例如，每条指令都可以分为： <strong>取指令 - 指令译码 - 执行指令 - 内存访问 - 数据写回</strong> 这5 个阶段</li></ul><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc29.png"></p><ul><li><p>在不改变程序结果的前提下，这些指令的各个阶段可以通过<strong>重排序</strong>和<strong>组合</strong>来实现<strong>指令级并行</strong></p></li><li><p>指令重排的前提是，重排指令<code>不能影响结果</code>，例如</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 可以重排的例子 </span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> a <span class="token operator">+</span> b <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 不能重排的例子 </span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> a <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="支持流水线的处理器"><a href="#支持流水线的处理器" class="headerlink" title="支持流水线的处理器"></a>支持流水线的处理器</h3><p>现代 CPU 支持多级<strong>指令流水线</strong>，例如支持<strong>同时</strong>执行 <strong>取指令 - 指令译码 - 执行指令 - 内存访问 - 数据写回</strong> 的处理器，就可以称之为五级指令流水线。这时 CPU 可以在一个时钟周期内，同时运行五条指令的不同阶段（相当于一 条执行时间长的复杂指令），IPC = 1，本质上，流水线技术并不能缩短单条指令的执行时间，但它变相地提高了指令地<strong>吞吐率</strong>。</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc30.png"></p><p><strong>在多线程环境下，指令重排序可能导致出现意料之外的结果</strong></p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p><code>volatile</code> 修饰的变量，可以<code>禁用</code>指令重排</p><ul><li><strong>禁止的是加volatile关键字变量之前的代码被重排序</strong></li></ul><h2 id="内存屏障"><a href="#内存屏障" class="headerlink" title="内存屏障"></a>内存屏障</h2><ul><li><strong>可见性</strong><ul><li><strong>写屏障</strong>（sfence）保证在该屏障<code>之前</code>的，对共享变量的改动，都同步到主存当中</li><li><strong>读屏障</strong>（lfence）保证在该屏障<code>之后</code>，对共享变量的读取，加载的是主存中新数据</li></ul></li><li><strong>有序性</strong><ul><li>写屏障会确保指令重排序时，不会将<code>写屏障之前</code>的代码排在写屏障之后</li><li>读屏障会确保指令重排序时，不会将<code>读屏障之后</code>的代码排在读屏障之前</li></ul></li></ul><h2 id="volatile-原理"><a href="#volatile-原理" class="headerlink" title="volatile 原理"></a>volatile 原理</h2><p>volatile的底层实现原理是<code>内存屏障</code>，Memory Barrier（Memory Fence）</p><ul><li>对 volatile 变量的写指令后会加入写屏障</li><li>对 volatile 变量的读指令前会加入读屏障</li></ul><h3 id="如何保证可见性"><a href="#如何保证可见性" class="headerlink" title="如何保证可见性"></a>如何保证可见性</h3><ul><li><p>写屏障（sfence）保证在该屏障之前的，对共享变量的改动，都同步到主存当中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actor2</span><span class="token punctuation">(</span><span class="token class-name">I_Result</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>     num <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>     ready <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// ready 是 volatile 赋值带写屏障</span>     <span class="token comment">// 写屏障</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>而读屏障（lfence）保证在该屏障之后，对共享变量的读取，加载的是主存中新数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actor1</span><span class="token punctuation">(</span><span class="token class-name">I_Result</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">// 读屏障</span>     <span class="token comment">// ready 是 volatile 读取值带读屏障</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>ready<span class="token punctuation">)</span> <span class="token punctuation">{</span>         r<span class="token punctuation">.</span>r1 <span class="token operator">=</span> num <span class="token operator">+</span> num<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>     r<span class="token punctuation">.</span>r1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc31.png"></p><h3 id="如何保证有序性"><a href="#如何保证有序性" class="headerlink" title="如何保证有序性"></a>如何保证有序性</h3><ul><li><p>写屏障会确保指令重排序时，不会将写屏障之前的代码排在写屏障之后</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actor2</span><span class="token punctuation">(</span><span class="token class-name">I_Result</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>     num <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>     ready <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// ready 是 volatile 赋值带写屏障</span>     <span class="token comment">// 写屏障</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>读屏障会确保指令重排序时，不会将读屏障之后的代码排在读屏障之前</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actor1</span><span class="token punctuation">(</span><span class="token class-name">I_Result</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">// 读屏障</span>     <span class="token comment">// ready 是 volatile 读取值带读屏障</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>ready<span class="token punctuation">)</span> <span class="token punctuation">{</span>     r<span class="token punctuation">.</span>r1 <span class="token operator">=</span> num <span class="token operator">+</span> num<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>     r<span class="token punctuation">.</span>r1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc32.png"></p></li></ul><p><strong>但是不能解决指令交错问题</strong></p><ul><li>写屏障仅仅是保证之后的读能够读到新的结果，但不能保证读跑到它前面去</li><li>而有序性的保证也只是保证了<code>本线程内</code>相关代码不被重排序</li></ul><h3 id="实现原理之Lock前缀"><a href="#实现原理之Lock前缀" class="headerlink" title="实现原理之Lock前缀"></a>实现原理之Lock前缀</h3><p>在X86处理器下通过工具获取JIT编译器生成的汇编指令来查看对volatile进行写操作时</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对应的汇编代码是</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> lock addl <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>有volatile变量修饰的共享变量进行写操作的时候会多出第二行汇编代码，通过查IA-32架构软件开发者手册可知，<strong>Lock前缀</strong>的指令在多核处理器下会引发了两件事</p><ul><li><p>Lock前缀指令会引起处理器</p><p>缓存回写到内存</p><ul><li>Lock前缀指令导致在执行指令期间，声言处理器的LOCK#信号。在多处理器环境中，LOCK#信号确保在声言该信号期间，处理器可以独占任何共享内存。但是，在最近的处理器里，LOCK #信号一般不锁总线，而是<strong>锁缓存</strong>，毕竟锁总线开销的比较大。使用缓存一致性机制来确保修改的原子性，此操作被称为“缓存锁定”，<strong>缓存一致性机制会阻止同时修改由两个以上处理器缓存的内存区域数据</strong></li></ul></li><li><p>一个处理器的缓存回写到内存会</p><p>导致其他处理器的缓存无效</p><ul><li>在多核处理器系统中进行操作的时候，IA-32和Intel 64处理器能<strong>嗅探其他处理器访问系统内存和它们的内部缓存</strong>。处理器使用嗅探技术保证它的内部缓存、系统内存和其他处理器的缓存的数据在总线上保持一致</li></ul></li></ul><hr><h1 id="共享模型之无锁"><a href="#共享模型之无锁" class="headerlink" title="共享模型之无锁"></a>共享模型之无锁</h1><h2 id="无锁解决线程安全问题"><a href="#无锁解决线程安全问题" class="headerlink" title="无锁解决线程安全问题"></a>无锁解决线程安全问题</h2><ul><li>使用<code>原子整数</code></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">AtomicInteger</span> balance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>例子：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span><span class="token class-name">Integer</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 方法内会启动 1000 个线程，每个线程做 -10 元 的操作     * 如果初始余额为 10000 那么正确的结果应当是 0 */</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token class-name">Account</span> account<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Thread</span><span class="token punctuation">&gt;</span></span> ts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>ts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>account<span class="token punctuation">.</span><span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>ts<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token operator">::</span><span class="token function">start</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ts<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>t <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token keyword">try</span> <span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account<span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" cost: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000_000</span> <span class="token operator">+</span> <span class="token string">" ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//线程不安全的做法</span><span class="token keyword">class</span> <span class="token class-name">AccountUnsafe</span> <span class="token keyword">implements</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token class-name">Integer</span> balance<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">AccountUnsafe</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> balance<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> balance<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>balance<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>balance <span class="token operator">-=</span> amount<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Account</span><span class="token punctuation">.</span><span class="token function">demo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AccountUnsafe</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Account</span><span class="token punctuation">.</span><span class="token function">demo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AccountCas</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//线程安全的做法</span><span class="token keyword">class</span> <span class="token class-name">AccountCas</span> <span class="token keyword">implements</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span><span class="token comment">//使用原子整数</span><span class="token keyword">private</span> <span class="token class-name">AtomicInteger</span> balance<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">AccountCas</span><span class="token punctuation">(</span><span class="token keyword">int</span> balance<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span>balance<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//得到原子整数的值</span><span class="token keyword">return</span> balance<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//获得修改前的值</span><span class="token keyword">int</span> prev <span class="token operator">=</span> balance<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得修改后的值</span><span class="token keyword">int</span> next <span class="token operator">=</span> prev<span class="token operator">-</span>amount<span class="token punctuation">;</span><span class="token comment">//比较并设值</span><span class="token keyword">if</span><span class="token punctuation">(</span>balance<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CAS与volatile"><a href="#CAS与volatile" class="headerlink" title="CAS与volatile"></a>CAS与volatile</h2><p>前面看到的 <code>AtomicInteger</code> 的解决方法，内部并没有用锁来保护共享变量的线程安全。那么它是如何实现的呢？</p><p>其中的<code>关键是 compareAndSwap</code>（比较并设置值），它的<code>简称就是 CAS</code> （也有 Compare And Swap 的说法），它必须是**<code>原子操作。</code>**</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc33.png"></p><h3 id="过程分析"><a href="#过程分析" class="headerlink" title="过程分析"></a>过程分析</h3><ul><li>当一个线程要去修改Account对象中的值时，先获取值prev（调用get方法），然后再将其设置为新的值next（<code>调用cas方法</code>）。在调用cas方法时，会将prev与Account中的余额进行比较。<ul><li>如果<code>两者相等</code>，就说明该值还未被其他线程修改，此时便<code>可以进行修改操作</code>。</li><li>如果<code>两者不相等</code>，就不设置值，重新获取值prev（调用get方法），然后再将其设置为新的值next（调用cas方法），<code>直到修改成功为止。</code></li></ul></li></ul><p><strong>注意</strong></p><ul><li>其实 CAS 的底层是 <strong>lock cmpxchg</strong> 指令（X86 架构），在单核 CPU 和多核 CPU 下都能够保证【比较-交换】的<code>原子性</code>。</li><li>在多核状态下，某个核执行到带 lock 的指令时，CPU 会让总线锁住，当这个核把此指令执行完毕，再开启总线。这个过程中不会被线程的调度机制所打断，保证了多个线程对内存操作的准确性，是原子的。</li></ul><h3 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h3><p>获取共享变量时，为了保证该变量的<code>可见性</code>，需要使用 <code>volatile</code> 修饰。<br>它可以用来修饰成员变量和静态成员变量，他可以避免线程从自己的工作缓存中查找变量的值，必须到<code>主存中获取</code> 它的值，线程操作 volatile 变量都是直接操作主存。即一个线程对 volatile 变量的修改，对另一个线程可见。</p><p><strong>注意</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">volatile</span> 仅仅保证了共享变量的可见性，让其它线程能够看到新值，但不能解决指令交错问题（不能保证原子性）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>CAS 必须借助 volatile</code> 才能读取到共享变量的新值来实现【比较并交换】的效果</p><h3 id="效率问题"><a href="#效率问题" class="headerlink" title="效率问题"></a>效率问题</h3><p>一般情况下，使用<code>无锁</code>比使用加锁的<code>效率更高</code>。</p><p><strong>原因</strong></p><ul><li>无锁情况下，即使重试失败，线程始终在高速运行，没有停歇，而 <code>synchronized 会</code>让线程在没有获得锁的时 候，<code>发生上下文切换</code>，进入阻塞。</li><li>打个比喻 线程就好像高速跑道上的赛车，高速运行时，速度超快，一旦发生上下文切换，就好比赛车要减速、熄火， 等被唤醒又得重新打火、启动、加速… 恢复到高速运行，代价比较大 </li><li>但无锁情况下，因为线程要保持运行，<code>需要额外 CPU 的支持</code>，CPU 在这里就好比高速跑道，没有额外的跑 道，线程想高速运行也无从谈起，虽然不会进入阻塞，但由于<code>没有分到时间片</code>，仍然会进入可运行状态，<code>还是会导致上下文切换</code>。</li></ul><h3 id="CAS特点"><a href="#CAS特点" class="headerlink" title="CAS特点"></a>CAS特点</h3><p>结合 CAS 和 volatile 可以实现<code>无锁并发</code>，适用于<code>线程数少、多核 CPU</code> 的场景下。</p><ul><li>CAS 是基于<code>乐观锁</code>的思想：乐观的估计，不怕别的线程来修改共享变量，就算改了也没关系，我吃亏点再重试呗。</li><li>synchronized 是基于悲观锁的思想：悲观的估计，得防着其它线程来修改共享变量，我上了锁你们都别想改，我改完了解开锁，你们才有机会。</li><li><strong>CAS 体现的是无锁并发、无阻塞并发，请仔细体会这两句话的意思</strong><ul><li><strong>因为没有使用 synchronized，所以线程不会陷入阻塞，这是效率提升的因素之一</strong></li><li><strong>但如果竞争激烈，可以想到重试必然频繁发生，反而效率会受影响</strong></li></ul></li></ul><h2 id="原子整数"><a href="#原子整数" class="headerlink" title="原子整数"></a>原子整数</h2><p>J.U.C 并发包提供了</p><ul><li><strong>AtomicBoolean</strong></li><li><strong>AtomicInteger</strong></li><li><strong>AtomicLong</strong></li></ul><p><strong>以 AtomicInteger 为例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token class-name">AtomicInteger</span> i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取并自增（i = 0, 结果 i = 1, 返回 0），类似于 i++ System.out.println(i.getAndIncrement());</span> <span class="token comment">// 自增并获取（i = 1, 结果 i = 2, 返回 2），类似于 ++i System.out.println(i.incrementAndGet());</span> <span class="token comment">// 自减并获取（i = 2, 结果 i = 1, 返回 1），类似于 --i System.out.println(i.decrementAndGet());</span> <span class="token comment">// 获取并自减（i = 1, 结果 i = 0, 返回 1），类似于 i--</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">getAndDecrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取并加值（i = 0, 结果 i = 5, 返回 0） </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">getAndAdd</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 加值并获取（i = 5, 结果 i = 0, 返回 0） </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取并更新（i = 0, p 为 i 的当前值, 结果 i = -2, 返回 0） </span><span class="token comment">// 其中函数中的操作能保证原子，但函数需要无副作用 </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">getAndUpdate</span><span class="token punctuation">(</span>p <span class="token operator">-&gt;</span> p <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 更新并获取（i = -2, p 为 i 的当前值, 结果 i = 0, 返回 0）</span><span class="token comment">// 其中函数中的操作能保证原子，但函数需要无副作用 </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">updateAndGet</span><span class="token punctuation">(</span>p <span class="token operator">-&gt;</span> p <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取并计算（i = 0, p 为 i 的当前值, x 为参数1, 结果 i = 10, 返回 0） </span><span class="token comment">// 其中函数中的操作能保证原子，但函数需要无副作用 // getAndUpdate 如果在 lambda 中引用了外部的局部变量，要保证该局部变量是 final 的 </span><span class="token comment">// getAndAccumulate 可以通过 参数1 来引用外部的局部变量，但因为其不在 lambda 中因此不必是 </span><span class="token keyword">final</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">getAndAccumulate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>p<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> p <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 计算并获取（i = 10, p 为 i 的当前值, x 为参数1, 结果 i = 0, 返回 0） </span><span class="token comment">// 其中函数中的操作能保证原子，但函数需要无副作用</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">accumulateAndGet</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>p<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> p <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="原子引用"><a href="#原子引用" class="headerlink" title="原子引用"></a>原子引用</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DecimalAccount</span> <span class="token punctuation">{</span><span class="token class-name">BigDecimal</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 方法内会启动 1000 个线程，每个线程做 -10 元 的操作         * 如果初始余额为 10000 那么正确的结果应当是 0 */</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token class-name">DecimalAccountImpl</span> account<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Thread</span><span class="token punctuation">&gt;</span></span> ts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>ts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>account<span class="token punctuation">.</span><span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span>TEN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>ts<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token operator">::</span><span class="token function">start</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ts<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>t <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token keyword">try</span> <span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account<span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" cost: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000_000</span> <span class="token operator">+</span> <span class="token string">" ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">DecimalAccountImpl</span> <span class="token keyword">implements</span> <span class="token class-name">DecimalAccount</span> <span class="token punctuation">{</span><span class="token comment">//原子引用，泛型类型为小数类型</span><span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BigDecimal</span><span class="token punctuation">&gt;</span></span> balance<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">DecimalAccountImpl</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span> balance<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BigDecimal</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>balance<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">BigDecimal</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> balance<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">BigDecimal</span> pre <span class="token operator">=</span> balance<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BigDecimal</span> next <span class="token operator">=</span> pre<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>balance<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">DecimalAccount</span><span class="token punctuation">.</span><span class="token function">demo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DecimalAccountImpl</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"10000"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ABA问题"><a href="#ABA问题" class="headerlink" title="ABA问题"></a>ABA问题</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo3</span> <span class="token punctuation">{</span><span class="token keyword">static</span> <span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token class-name">String</span> pre <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"change"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token function">other</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//把str中的A改为C</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"change A-&gt;C "</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">other</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"change A-&gt;B "</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"change B-&gt;A "</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">changechange <span class="token class-name">A</span> <span class="token operator">-&gt;</span> <span class="token class-name">B</span> <span class="token boolean">true</span>change <span class="token class-name">B</span> <span class="token operator">-&gt;</span> <span class="token class-name">A</span> <span class="token boolean">true</span>change <span class="token class-name">A</span> <span class="token operator">-&gt;</span> <span class="token class-name">C</span> <span class="token boolean">true</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>主线程仅能判断出共享变量的值与初值 A <code>是否相同</code>，不能感知到这种从 A 改为 B 又 改回 A 的情况，如果主线程希望：<br>只要有其它线程<code>【动过了】</code>共享变量，那么自己的 <code>cas 就算失败</code>，这时，仅比较值是不够的，需要再加一个<code>版本号</code></p><h3 id="AtomicStampedReference"><a href="#AtomicStampedReference" class="headerlink" title="AtomicStampedReference"></a><strong>AtomicStampedReference</strong></h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo3</span> <span class="token punctuation">{</span><span class="token comment">//指定版本号</span><span class="token keyword">static</span> <span class="token class-name">AtomicStampedReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicStampedReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token class-name">String</span> pre <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得版本号</span><span class="token keyword">int</span> stamp <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"change"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token function">other</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//把str中的A改为C,并比对版本号，如果版本号相同，就执行替换，并让版本号+1</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"change A-&gt;C stamp "</span> <span class="token operator">+</span> stamp <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> stamp<span class="token punctuation">,</span> stamp<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">other</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token keyword">int</span> stamp <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"change A-&gt;B stamp "</span> <span class="token operator">+</span> stamp <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> stamp<span class="token punctuation">,</span> stamp<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token keyword">int</span> stamp <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"change B-&gt;A stamp "</span> <span class="token operator">+</span> stamp <span class="token operator">+</span>  str<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">,</span> stamp<span class="token punctuation">,</span> stamp<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">changechange <span class="token class-name">A</span> <span class="token operator">-&gt;</span> <span class="token class-name">B</span> stamp <span class="token number">0</span> <span class="token boolean">true</span>change <span class="token class-name">B</span> <span class="token operator">-&gt;</span> <span class="token class-name">A</span> stamp <span class="token number">1</span> <span class="token boolean">true</span>change <span class="token class-name">A</span> <span class="token operator">-&gt;</span> <span class="token class-name">C</span> stamp <span class="token number">0</span> <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="AtomicMarkableReference"><a href="#AtomicMarkableReference" class="headerlink" title="AtomicMarkableReference"></a>AtomicMarkableReference</h3><p>AtomicStampedReference 可以给原子引用加上版本号，追踪原子引用整个的变化过程，如： A -&gt; B -&gt; A -&gt; C ，通过AtomicStampedReference，我们可以知道，引用变量中途被更改了几次。<br>但是有时候，并不关心引用变量更改了几次，只是单纯的关心<code>是否更改过</code>，所以就有了 <code>AtomicMarkableReference</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo4</span> <span class="token punctuation">{</span><span class="token comment">//指定版本号</span><span class="token keyword">static</span> <span class="token class-name">AtomicMarkableReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicMarkableReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token class-name">String</span> pre <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"change"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token function">other</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//把str中的A改为C,并比对版本号，如果版本号相同，就执行替换，并让版本号+1</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"change A-&gt;C mark "</span> <span class="token operator">+</span>  str<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">other</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"change A-&gt;A mark "</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">changechange <span class="token class-name">A</span> <span class="token operator">-&gt;</span> <span class="token class-name">A</span> mark <span class="token boolean">true</span>change <span class="token class-name">A</span> <span class="token operator">-&gt;</span> <span class="token class-name">C</span> mark <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="两者的区别"><a href="#两者的区别" class="headerlink" title="两者的区别"></a>两者的区别</h3><ul><li><strong>AtomicStampedReference</strong> 需要我们传入<code>整型变量</code>作为版本号，来判定是否被更改过</li><li><strong>AtomicMarkableReference</strong>需要我们传入<code>布尔变量</code>作为标记，来判断是否被更改过</li></ul><h2 id="原子数组"><a href="#原子数组" class="headerlink" title="原子数组"></a>原子数组</h2><ul><li><strong>AtomicIntegerArray</strong></li><li><strong>AtomicLongArray</strong></li><li><strong>AtomicReferenceArray</strong></li></ul><p>有如下方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** 参数1，提供数组、可以是线程不安全数组或线程安全数组 参数2，获取数组长度的方法 参数3，自增方法，回传 array, index 参数4，打印数组的方法*/</span><span class="token comment">// supplier 提供者 无中生有 ()-&gt;结果</span><span class="token comment">// function 函数 一个参数一个结果 (参数)-&gt;结果 , BiFunction (参数1,参数2)-&gt;结果</span><span class="token comment">// consumer 消费者 一个参数没结果 (参数)-&gt;void, BiConsumer (参数1,参数2)-&gt;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> arraySupplier<span class="token punctuation">,</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> lengthFun<span class="token punctuation">,</span> <span class="token class-name">BiConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> putConsumer<span class="token punctuation">,</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> printConsumer <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Thread</span><span class="token punctuation">&gt;</span></span> ts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">T</span> array <span class="token operator">=</span> arraySupplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">int</span> length <span class="token operator">=</span> lengthFun<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment">// 每个线程对数组作 10000 次操作</span>             ts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                 <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 putConsumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> j<span class="token operator">%</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>             <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>     ts<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>t <span class="token operator">-&gt;</span> t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 启动所有线程</span>     ts<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>t <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>         t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等所有线程结束</span> printConsumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="lamba表达式的使用"><a href="#lamba表达式的使用" class="headerlink" title="lamba表达式的使用"></a>lamba表达式的使用</h3><ul><li>提供者<ul><li>无参又返回</li><li>()-&gt;返回结果</li></ul></li><li>方法<ul><li>有参有返回</li><li>(参数一…)-&gt;返回结果</li></ul></li><li>消费者<ul><li>有参无返回</li><li>(参数一…)-&gt;void</li></ul></li></ul><h2 id="原子更新器"><a href="#原子更新器" class="headerlink" title="原子更新器"></a>原子更新器</h2><ul><li><strong>AtomicReferenceFieldUpdater // 域 字段</strong></li><li><strong>AtomicIntegerFieldUpdater</strong></li><li><strong>AtomicLongFieldUpdate</strong></li></ul><p>原子更新器用于帮助我们改变某个对象中的某个属性</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// 获得原子更新器</span>      <span class="token comment">// 泛型</span>      <span class="token comment">// 参数1 持有属性的类 参数2 被更新的属性的类</span>      <span class="token comment">// newUpdater中的参数：第三个为属性的名称</span>      <span class="token class-name">AtomicReferenceFieldUpdater</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> updater <span class="token operator">=</span> <span class="token class-name">AtomicReferenceFieldUpdater</span><span class="token punctuation">.</span><span class="token function">newUpdater</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// 修改</span>      updater<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"Nyima"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>   <span class="token keyword">volatile</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">"Student{"</span> <span class="token operator">+</span>            <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>            <span class="token string">'}'</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="原子更新器初始化过程"><a href="#原子更新器初始化过程" class="headerlink" title="原子更新器初始化过程"></a>原子更新器初始化过程</h3><p>从上面的例子可以看出，原子更新器是通过newUpdater来获取实例的。其中传入了三个参数</p><ul><li><strong>拥有属性的类的Class</strong></li><li><strong>属性的Class</strong></li><li><strong>属性的名称</strong></li></ul><p>大概可以猜出来，<strong>初始化过程用到了反射</strong>，让我们看看源码来验证一下这个猜测。</p><h4 id="newUpdater方法"><a href="#newUpdater方法" class="headerlink" title="newUpdater方法"></a>newUpdater方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">,</span><span class="token class-name">W</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">AtomicReferenceFieldUpdater</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">,</span><span class="token class-name">W</span><span class="token punctuation">&gt;</span></span> <span class="token function">newUpdater</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> tclass<span class="token punctuation">,</span>                                                                <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">W</span><span class="token punctuation">&gt;</span></span> vclass<span class="token punctuation">,</span>                                                                <span class="token class-name">String</span> fieldName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 返回了一个AtomicReferenceFieldUpdaterImpl实例</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReferenceFieldUpdaterImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">,</span><span class="token class-name">W</span><span class="token punctuation">&gt;</span></span>        <span class="token punctuation">(</span>tclass<span class="token punctuation">,</span> vclass<span class="token punctuation">,</span> fieldName<span class="token punctuation">,</span> <span class="token class-name">Reflection</span><span class="token punctuation">.</span><span class="token function">getCallerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从newUpdater方法还并不能看出来具体的初始化过程</p><h4 id="内部实现类"><a href="#内部实现类" class="headerlink" title="内部实现类"></a>内部实现类</h4><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc34.png"></p><p>AtomicReferenceFieldUpdater为<code>抽象类</code>，该类<strong>内部有一个自己的实现类AtomicReferenceFieldUpdaterImpl</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">AtomicReferenceFieldUpdaterImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span>        <span class="token keyword">extends</span> <span class="token class-name">AtomicReferenceFieldUpdater</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>构造方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">AtomicReferenceFieldUpdaterImpl</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> tclass<span class="token punctuation">,</span>                                <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> vclass<span class="token punctuation">,</span>                                <span class="token keyword">final</span> <span class="token class-name">String</span> fieldName<span class="token punctuation">,</span>                                <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> caller<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 用于保存要被修改的属性</span>    <span class="token keyword">final</span> <span class="token class-name">Field</span> field<span class="token punctuation">;</span>        <span class="token comment">// 属性的Class</span>    <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> fieldClass<span class="token punctuation">;</span>        <span class="token comment">// field的修饰符</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> modifiers<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment">// 反射获得属性</span>        field <span class="token operator">=</span> <span class="token class-name">AccessController</span><span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">PrivilegedExceptionAction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Field</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">public</span> <span class="token class-name">Field</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchFieldException</span> <span class="token punctuation">{</span>                    <span class="token comment">// tclass为传入的属性的Class，可以通过它来获得属性</span>                    <span class="token keyword">return</span> tclass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>fieldName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 获得属性的修饰符，主要用于判断</span>        <span class="token comment">// 1、vclass 与 属性确切的类型是否匹配</span>        <span class="token comment">// 2、是否为引用类型</span>        <span class="token comment">// 3、被修改的属性是否加了volatile关键字</span>        modifiers <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>misc<span class="token punctuation">.</span><span class="token class-name">ReflectUtil</span><span class="token punctuation">.</span><span class="token function">ensureMemberAccess</span><span class="token punctuation">(</span>            caller<span class="token punctuation">,</span> tclass<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> modifiers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ClassLoader</span> cl <span class="token operator">=</span> tclass<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ClassLoader</span> ccl <span class="token operator">=</span> caller<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ccl <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ccl <span class="token operator">!=</span> cl<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>cl <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">isAncestor</span><span class="token punctuation">(</span>cl<span class="token punctuation">,</span> ccl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>misc<span class="token punctuation">.</span><span class="token class-name">ReflectUtil</span><span class="token punctuation">.</span><span class="token function">checkPackageAccess</span><span class="token punctuation">(</span>tclass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token comment">// 获得属性类的Class</span>        fieldClass <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PrivilegedActionException</span> pae<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>pae<span class="token punctuation">.</span><span class="token function">getException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vclass <span class="token operator">!=</span> fieldClass<span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClassCastException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vclass<span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Must be reference type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">isVolatile</span><span class="token punctuation">(</span>modifiers<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Must be volatile type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Access to protected field members is restricted to receivers only</span>    <span class="token comment">// of the accessing class, or one of its subclasses, and the</span>    <span class="token comment">// accessing class must in turn be a subclass (or package sibling)</span>    <span class="token comment">// of the protected member's defining class.</span>    <span class="token comment">// If the updater refers to a protected field of a declaring class</span>    <span class="token comment">// outside the current package, the receiver argument will be</span>    <span class="token comment">// narrowed to the type of the accessing class.</span> <span class="token comment">// 对类中的属性进行初始化</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>cclass <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">isProtected</span><span class="token punctuation">(</span>modifiers<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                   tclass<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>caller<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                   <span class="token operator">!</span><span class="token function">isSamePackage</span><span class="token punctuation">(</span>tclass<span class="token punctuation">,</span> caller<span class="token punctuation">)</span><span class="token punctuation">)</span>                  <span class="token operator">?</span> caller <span class="token operator">:</span> tclass<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>tclass <span class="token operator">=</span> tclass<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>vclass <span class="token operator">=</span> vclass<span class="token punctuation">;</span>    <span class="token comment">// 获得偏移量</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>offset <span class="token operator">=</span> <span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">objectFieldOffset</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>可以看出，原子引用更新器确实使用了反射</strong></p><h2 id="原理之LongAdder"><a href="#原理之LongAdder" class="headerlink" title="原理之LongAdder"></a>原理之LongAdder</h2><p>LongAdder 是并发大师 @author Doug Lea （大哥李）的作品，设计的非常精巧</p><p>LongAdder 类有几个<code>关键域</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 累加单元数组, 懒惰初始化</span><span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token class-name">Cell</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cells<span class="token punctuation">;</span><span class="token comment">// 基础值, 如果没有竞争, 则用 cas 累加这个域</span><span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> base<span class="token punctuation">;</span><span class="token comment">// 在 cells 创建或扩容时, 置为 1, 表示加锁</span><span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> cellsBusy<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="原理之伪共享"><a href="#原理之伪共享" class="headerlink" title="原理之伪共享"></a>原理之伪共享</h3><p><strong>其中 Cell 即为累加单元</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 防止缓存行伪共享</span><span class="token annotation punctuation">@sun</span><span class="token punctuation">.</span>misc<span class="token punctuation">.</span><span class="token class-name">Contended</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Cell</span> <span class="token punctuation">{</span>     <span class="token keyword">volatile</span> <span class="token keyword">long</span> value<span class="token punctuation">;</span>     <span class="token class-name">Cell</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> value <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span>      <span class="token comment">// 最重要的方法, 用来 cas 方式进行累加, prev 表示旧值, next 表示新值</span>     <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">cas</span><span class="token punctuation">(</span><span class="token keyword">long</span> prev<span class="token punctuation">,</span> <span class="token keyword">long</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> UNSAFE<span class="token punctuation">.</span><span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> valueOffset<span class="token punctuation">,</span> prev<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token comment">// 省略不重要代码</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得从缓存说起<br>缓存与内存的速度比较</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc35.png"></p><table><thead><tr><th>从 cpu 到</th><th>大约需要的时钟周期</th></tr></thead><tbody><tr><td>寄存器</td><td>1 cycle (4GHz 的 CPU 约为0.25ns)</td></tr><tr><td>L1</td><td>3~4 cycle</td></tr><tr><td>L2</td><td>10~20 cycle</td></tr><tr><td>L3</td><td>40~45 cycle</td></tr><tr><td>内存</td><td>120~240 cycle</td></tr></tbody></table><p>因为 CPU 与 内存的速度差异很大，需要靠预读数据至<code>缓存</code>来提升效率。<br>而缓存以<code>缓存行</code>为单位，每个缓存行对应着一块内存，一般是 <code>64 byte</code>（8 个 long）<br>缓存的加入会造成<code>数据副本</code>的产生，即同一份数据会缓存在不同核心的缓存行中<br>CPU 要保证数据的<code>一致性</code>，如果某个 CPU 核心<code>更改</code>了数据，其它 CPU 核心对应的整个缓存行必须<code>失效</code></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc36.png"></p><p>因为 Cell 是数组形式，在内存中是连续存储的，一个 Cell 为 24 字节（16 字节的对象头和 8 字节的 value），因 此缓存行可以存下 2 个的 Cell 对象。这样问题来了：</p><ul><li>Core-0 要修改 Cell[0]</li><li>Core-1 要修改 Cell[1]</li></ul><p>无论谁修改成功，都会导致对方 Core 的缓存行失效，</p><p>比如 Core-0 中 Cell[0]=6000, Cell[1]=8000 要累加 Cell[0]=6001, Cell[1]=8000 ，这时会让 Core-1 的缓存行失效</p><p>@sun.misc.Contended 用来解决这个问题，它的原理是在使用此注解的对象或字段的<strong>前后各增加 128 字节大小的 padding</strong>（空白），从而让 CPU 将对象预读至缓存时<code>占用不同的缓存行</code>，这样，不会造成对方缓存行的失效</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc37.png"></p><p><strong>累加主要调用以下方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">// as 为累加单元数组</span>     <span class="token comment">// b 为基础值</span>     <span class="token comment">// x 为累加值</span>     <span class="token class-name">Cell</span><span class="token punctuation">[</span><span class="token punctuation">]</span> as<span class="token punctuation">;</span> <span class="token keyword">long</span> b<span class="token punctuation">,</span> v<span class="token punctuation">;</span> <span class="token keyword">int</span> m<span class="token punctuation">;</span> <span class="token class-name">Cell</span> a<span class="token punctuation">;</span>     <span class="token comment">// 进入 if 的两个条件</span>     <span class="token comment">// 1. as 有值, 表示已经发生过竞争, 进入 if</span>     <span class="token comment">// 2. cas 给 base 累加时失败了, 表示 base 发生了竞争, 进入 if</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>as <span class="token operator">=</span> cells<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">casBase</span><span class="token punctuation">(</span>b <span class="token operator">=</span> base<span class="token punctuation">,</span> b <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment">// uncontended 表示 cell 没有竞争</span>         <span class="token keyword">boolean</span> uncontended <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>             <span class="token comment">// as 还没有创建</span>             as <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>m <span class="token operator">=</span> as<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>             <span class="token comment">// 当前线程对应的 cell 还没有</span>             <span class="token punctuation">(</span>a <span class="token operator">=</span> as<span class="token punctuation">[</span><span class="token function">getProbe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> m<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span>             <span class="token comment">// cas 给当前线程的 cell 累加失败 uncontended=false ( a 为当前线程的 cell )</span>             <span class="token operator">!</span><span class="token punctuation">(</span>uncontended <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">cas</span><span class="token punctuation">(</span>v <span class="token operator">=</span> a<span class="token punctuation">.</span>value<span class="token punctuation">,</span> v <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment">// 进入 cell 数组创建、cell 创建的流程</span>             <span class="token function">longAccumulate</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> uncontended<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>add/累加流程图</strong></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc38.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">longAccumulate</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">,</span> <span class="token class-name">LongBinaryOperator</span> fn<span class="token punctuation">,</span>     <span class="token keyword">boolean</span> wasUncontended<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">int</span> h<span class="token punctuation">;</span>     <span class="token comment">// 当前线程还没有对应的 cell, 需要随机生成一个 h 值用来将当前线程绑定到 cell</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>h <span class="token operator">=</span> <span class="token function">getProbe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment">// 初始化 probe</span>         <span class="token class-name">ThreadLocalRandom</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// h 对应新的 probe 值, 用来对应 cell</span>         h <span class="token operator">=</span> <span class="token function">getProbe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         wasUncontended <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment">// collide 为 true 表示需要扩容</span>     <span class="token keyword">boolean</span> collide <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token class-name">Cell</span><span class="token punctuation">[</span><span class="token punctuation">]</span> as<span class="token punctuation">;</span> <span class="token class-name">Cell</span> a<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span> <span class="token keyword">long</span> v<span class="token punctuation">;</span>         <span class="token comment">// 已经有了 cells</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>as <span class="token operator">=</span> cells<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> as<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment">// 还没有 cell</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">=</span> as<span class="token punctuation">[</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> h<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token comment">// 为 cellsBusy 加锁, 创建 cell, cell 的初始累加值为 x</span>                 <span class="token comment">// 成功则 break, 否则继续 continue 循环</span>             <span class="token punctuation">}</span>             <span class="token comment">// 有竞争, 改变线程对应的 cell 来重试 cas</span>             <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>wasUncontended<span class="token punctuation">)</span>             wasUncontended <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>             <span class="token comment">// cas 尝试累加, fn 配合 LongAccumulator 不为 null, 配合 LongAdder 为 null</span>             <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">cas</span><span class="token punctuation">(</span>v <span class="token operator">=</span> a<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fn <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> v <span class="token operator">+</span> x <span class="token operator">:</span> fn<span class="token punctuation">.</span><span class="token function">applyAsLong</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>             <span class="token comment">// 如果 cells 长度已经超过了最大长度, 或者已经扩容, 改变线程对应的 cell 来重试 cas</span>             <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;=</span> NCPU <span class="token operator">||</span> cells <span class="token operator">!=</span> as<span class="token punctuation">)</span>             collide <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>             <span class="token comment">// 确保 collide 为 false 进入此分支, 就不会进入下面的 else if 进行扩容了</span>             <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>collide<span class="token punctuation">)</span>             collide <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>             <span class="token comment">// 加锁</span>             <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cellsBusy <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">casCellsBusy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment">// 加锁成功, 扩容</span>             <span class="token keyword">continue</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>             <span class="token comment">// 改变线程对应的 cell</span>             h <span class="token operator">=</span> <span class="token function">advanceProbe</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token comment">// 还没有 cells, 尝试给 cellsBusy 加锁</span>         <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cellsBusy <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> cells <span class="token operator">==</span> as <span class="token operator">&amp;&amp;</span> <span class="token function">casCellsBusy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment">// 加锁成功, 初始化 cells, 最开始长度为 2, 并填充一个 cell</span>             <span class="token comment">// 成功则 break;</span>         <span class="token punctuation">}</span>         <span class="token comment">// 上两种情况失败, 尝试给 base 累加</span>         <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">casBase</span><span class="token punctuation">(</span>v <span class="token operator">=</span> base<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fn <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> v <span class="token operator">+</span> x <span class="token operator">:</span> fn<span class="token punctuation">.</span><span class="token function">applyAsLong</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token keyword">break</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>longAccumulate 流程图</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc39.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc40.png"></p><p>每个线程刚进入 longAccumulate 时，会尝试对应一个 cell 对象（找到一个坑位）</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc41.png"></p><p>获取最终结果通过 sum 方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token class-name">Cell</span><span class="token punctuation">[</span><span class="token punctuation">]</span> as <span class="token operator">=</span> cells<span class="token punctuation">;</span> <span class="token class-name">Cell</span> a<span class="token punctuation">;</span>     <span class="token keyword">long</span> sum <span class="token operator">=</span> base<span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>as <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> as<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">=</span> as<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>             sum <span class="token operator">+=</span> a<span class="token punctuation">.</span>value<span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Unsafe"><a href="#Unsafe" class="headerlink" title="Unsafe"></a>Unsafe</h2><p>Unsafe 对象提供了非常底层的，操作内存、线程的方法，Unsafe 对象<code>不能直接调用</code>，只能通过<code>反射</code>获得</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetUnsafe</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchFieldException</span> <span class="token punctuation">{</span><span class="token comment">// 通过反射获得Unsafe对象</span><span class="token class-name">Class</span> unsafeClass <span class="token operator">=</span> <span class="token class-name">Unsafe</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token comment">// 获得构造函数，Unsafe的构造函数为私有的</span><span class="token class-name">Constructor</span> constructor <span class="token operator">=</span> unsafeClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置为允许访问私有内容</span>constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建Unsafe对象</span><span class="token class-name">Unsafe</span> unsafe <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Unsafe</span><span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建Person对象</span><span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获得其属性 name 的偏移量</span><span class="token class-name">Field</span> field <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> offset <span class="token operator">=</span> unsafe<span class="token punctuation">.</span><span class="token function">objectFieldOffset</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 通过unsafe的CAS操作改变值</span>unsafe<span class="token punctuation">.</span><span class="token function">compareAndSwapObject</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"Nyima"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token comment">// 配合CAS操作，必须用volatile修饰</span> <span class="token keyword">volatile</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">"Person{"</span> <span class="token operator">+</span><span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span><span class="token string">'}'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="共享模型之不可变"><a href="#共享模型之不可变" class="headerlink" title="共享模型之不可变"></a>共享模型之不可变</h1><h2 id="不可变"><a href="#不可变" class="headerlink" title="不可变"></a>不可变</h2><p>如果一个对象在<code>不能够修改</code>其内部状态（属性），那么它就是线程安全的，因为不存在并发修改。</p><h2 id="不可变设计"><a href="#不可变设计" class="headerlink" title="不可变设计"></a>不可变设计</h2><h3 id="String类中不可变的体现"><a href="#String类中不可变的体现" class="headerlink" title="String类中不可变的体现"></a>String类中不可变的体现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">String</span>    <span class="token keyword">implements</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span><span class="token class-name">Serializable</span><span class="token punctuation">,</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> <span class="token punctuation">{</span>    <span class="token comment">/** The value is used for character storage. */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">char</span> value<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">/** Cache the hash code for the string */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span> <span class="token comment">// Default to 0</span>       <span class="token comment">//....</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ﬁnal-的使用"><a href="#ﬁnal-的使用" class="headerlink" title="ﬁnal 的使用"></a><strong>ﬁnal 的使用</strong></h3><p>发现该类、类中所有属性<code>都是 ﬁnal</code> 的</p><ul><li>属性用 ﬁnal 修饰保证了该属性是<code>只读的，不能修改</code></li><li>类用 ﬁnal 修饰保证了该类中的方法不能被覆盖，<code>防止子类无意间破坏不可变性</code></li></ul><h3 id="保护性拷贝"><a href="#保护性拷贝" class="headerlink" title="**保护性拷贝 **"></a>**保护性拷贝 **</h3><p>但有同学会说，使用字符串时，也有一些跟修改相关的方法啊，比如 substring 等，那么下面就看一看这些方法是 如何实现的，就以 substring 为例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">int</span> beginIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>beginIndex <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>beginIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> subLen <span class="token operator">=</span> value<span class="token punctuation">.</span>length <span class="token operator">-</span> beginIndex<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>subLen <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>subLen<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token comment">//返回的是一个新的对象</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>beginIndex <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">this</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> beginIndex<span class="token punctuation">,</span> subLen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现其内部是调用 String 的构造方法<code>创建了一个新字符串</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">char</span> value<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">&lt;=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">// Note: offset or count might be near -1&gt;&gt;&gt;1.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">&gt;</span> value<span class="token punctuation">.</span>length <span class="token operator">-</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>offset <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> offset<span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构造新字符串对象时，会生成新的 char[] value，对内容进行复制 。这种通过创建副本对象来避免共享的手段称之为【<strong>保护性拷贝</strong>（defensive copy）】</p><h2 id="模式之享元"><a href="#模式之享元" class="headerlink" title="模式之享元"></a>模式之享元</h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><p><strong>定义</strong> 英文名称：Flyweight pattern. 当需要重用数量有限的同一类对象</p><h3 id="体现"><a href="#体现" class="headerlink" title="体现"></a>体现</h3><h4 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h4><p>在JDK中 Boolean，Byte，Short，Integer，Long，Character 等包装类提供了 valueOf 方法，例如 Long 的 valueOf 会缓存 -128~127 之间的 Long 对象，在这个范围之间会重用对象，大于这个范围，才会新建 Long 对 象：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Long</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">long</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">final</span> <span class="token keyword">int</span> offset <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;=</span> <span class="token operator">-</span><span class="token number">128</span> <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;=</span> <span class="token number">127</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// will cache</span>         <span class="token keyword">return</span> <span class="token class-name">LongCache</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>l <span class="token operator">+</span> offset<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Long</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意： </p><ul><li><p>Byte, Short, Long 缓存的范围都是 -128~127 </p></li><li><p>Character 缓存的范围是 0~127 </p></li><li><p>Integer的默认范围是 -128~127 </p><ul><li>最小值不能变 </li><li>但最大值可以通过调整虚拟机参数</li><li><code>  -Djava.lang.Integer.IntegerCache.high</code> 来改变 </li></ul></li><li><p>Boolean 缓存了 TRUE 和 FALSE</p></li></ul></blockquote><h4 id="String-串池"><a href="#String-串池" class="headerlink" title="String 串池"></a>String 串池</h4><p>可以参考jvm中的内容</p><hr><h1 id="共享模型之工具"><a href="#共享模型之工具" class="headerlink" title="共享模型之工具"></a>共享模型之工具</h1><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><h3 id="自定义线程池"><a href="#自定义线程池" class="headerlink" title="自定义线程池"></a>自定义线程池</h3><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc42.png"></p><ul><li>阻塞队列中维护了由主线程（或者其他线程）所产生的的任务</li><li>主线程类似于<code>生产者</code>，产生任务并放入阻塞队列中</li><li>线程池类似于<code>消费者</code>，得到阻塞队列中已有的任务并执行</li></ul><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a><strong>代码实现</strong></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo3</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">ThreadPool</span> threadPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>  <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>               <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务正在执行!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * 自定义线程池 */</span><span class="token keyword">class</span> <span class="token class-name">ThreadPool</span> <span class="token punctuation">{</span>   <span class="token comment">/**    * 自定义阻塞队列    */</span>   <span class="token keyword">private</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> blockingQueue<span class="token punctuation">;</span>   <span class="token comment">/**    * 核心线程数    */</span>   <span class="token keyword">private</span> <span class="token keyword">int</span> coreSize<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Worker</span><span class="token punctuation">&gt;</span></span> workers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">/**    * 用于指定线程最大存活时间    */</span>   <span class="token keyword">private</span> <span class="token class-name">TimeUnit</span> timeUnit<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">long</span> timeout<span class="token punctuation">;</span>   <span class="token comment">/**    * 工作线程类    * 内部封装了Thread类，并且添加了一些属性    */</span>   <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Worker</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>      <span class="token class-name">Runnable</span> task<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始化任务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>task <span class="token operator">=</span> task<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment">// 如果有任务就执行</span>         <span class="token comment">// 如果阻塞队列中有任务，就继续执行</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span>task <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>task <span class="token operator">=</span> blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行任务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               task<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>               <span class="token comment">// 任务执行完毕，设为空</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务执行完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               task <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>         <span class="token comment">// 移除任务</span>         <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>workers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"移除任务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            workers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token class-name">ThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> coreSize<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> timeUnit<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>coreSize <span class="token operator">=</span> coreSize<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>timeUnit <span class="token operator">=</span> timeUnit<span class="token punctuation">;</span>      blockingQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>timeout <span class="token operator">=</span> timeout<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>workers<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment">// 创建任务</span>         <span class="token comment">// 池中还有空余线程时，可以运行任务</span>         <span class="token comment">// 否则阻塞</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>workers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> coreSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Worker</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>            workers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span><span class="token punctuation">;</span>            worker<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程池中线程已用完，请稍等"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            blockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * 阻塞队列 * 用于存放主线程或其他线程产生的任务 */</span><span class="token keyword">class</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>   <span class="token comment">/**    * 阻塞队列    */</span>   <span class="token keyword">private</span>  <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> blockingQueue<span class="token punctuation">;</span>   <span class="token comment">/**    * 阻塞队列容量    */</span>   <span class="token keyword">private</span> <span class="token keyword">int</span> capacity<span class="token punctuation">;</span>   <span class="token comment">/**    * 锁    */</span>   <span class="token keyword">private</span> <span class="token class-name">ReentrantLock</span> lock<span class="token punctuation">;</span>   <span class="token comment">/**    * 条件队列    */</span>   <span class="token keyword">private</span> <span class="token class-name">Condition</span> fullQueue<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token class-name">Condition</span> emptyQueue<span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token class-name">BlockingQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>      blockingQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>      lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      fullQueue <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      emptyQueue <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment">/**    * 获取任务的方法    */</span>   <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 加锁</span>      lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         <span class="token comment">// 如果阻塞队列为空（没有任务），就一直等待</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>               emptyQueue<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>         <span class="token comment">// 获取任务并唤醒生产者线程</span>         <span class="token class-name">T</span> task <span class="token operator">=</span> blockingQueue<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         fullQueue<span class="token punctuation">.</span><span class="token function">signalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> task<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>         lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">takeNanos</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 转换等待时间</span>      lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         <span class="token keyword">long</span> nanos <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>               <span class="token comment">// awaitNanos会返回剩下的等待时间</span>               nanos <span class="token operator">=</span> emptyQueue<span class="token punctuation">.</span><span class="token function">awaitNanos</span><span class="token punctuation">(</span>nanos<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>nanos <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>         <span class="token class-name">T</span> task <span class="token operator">=</span> blockingQueue<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         fullQueue<span class="token punctuation">.</span><span class="token function">signalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> task<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>         lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment">/**    * 放入任务的方法    * @param task 放入阻塞队列的任务    */</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">T</span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>      lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"阻塞队列已满"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               fullQueue<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>         blockingQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 唤醒等待的消费者</span>         emptyQueue<span class="token punctuation">.</span><span class="token function">signalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>         lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> blockingQueue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>         lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现了一个简单的线程池</p><ul><li>阻塞队列BlockingQueue用于暂存<code>来不及</code>被线程执行的任务<ul><li>也可以说是平衡生产者和消费者执行速度上的差异</li><li>里面的获取任务和放入任务用到了<code>生产者消费者模式</code></li></ul></li><li>线程池中对线程Thread进行了再次的封装，封装为了Worker<ul><li>在调用任务的run方法时，线程会去执行该任务，执行完毕后还会<code>到阻塞队列中获取新任务来执行</code></li></ul></li><li>线程池中执行任务的主要方法为execute方法<ul><li>执行时要判断正在执行的线程数<code>是否大于</code>了线程池容量</li></ul></li></ul><h3 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h3><h4 id="继承关系图"><a href="#继承关系图" class="headerlink" title="继承关系图"></a>继承关系图</h4><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc43.png"></p><h4 id="线程池状态"><a href="#线程池状态" class="headerlink" title="线程池状态"></a>线程池状态</h4><p>ThreadPoolExecutor 使用 int 的<code>高 3 位</code>来表示<code>线程池状态</code>，低 29 位表示线程数量</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 线程池状态</span><span class="token comment">// runState is stored in the high-order bits</span><span class="token comment">// RUNNING 高3位为111</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> RUNNING    <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span><span class="token comment">// SHUTDOWN 高3位为000</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SHUTDOWN   <span class="token operator">=</span>  <span class="token number">0</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span><span class="token comment">// 高3位 001</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> STOP       <span class="token operator">=</span>  <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span><span class="token comment">// 高3位 010</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TIDYING    <span class="token operator">=</span>  <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span><span class="token comment">// 高3位 011</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TERMINATED <span class="token operator">=</span>  <span class="token number">3</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>状态名称</th><th>高3位的值</th><th>描述</th></tr></thead><tbody><tr><td>RUNNING</td><td>111</td><td>接收新任务，同时处理任务队列中的任务</td></tr><tr><td>SHUTDOWN</td><td>000</td><td>不接受新任务，但是处理任务队列中的任务</td></tr><tr><td>STOP</td><td>001</td><td>中断正在执行的任务，同时抛弃阻塞队列中的任务</td></tr><tr><td>TIDYING</td><td>010</td><td>任务执行完毕，活动线程为0时，即将进入终结阶段</td></tr><tr><td>TERMINATED</td><td>011</td><td>终结状态</td></tr></tbody></table><p>线程池状态和线程池中线程的数量<code>由一个原子整型ctl来共同表示</code></p><ul><li>使用一个数来表示两个值的主要原因是：<code>可以通过一次CAS同时更改两个属性的值</code></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 原子整数，前3位保存了线程池的状态，剩余位保存的是线程数量</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> ctl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token function">ctlOf</span><span class="token punctuation">(</span>RUNNING<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 并不是所有平台的int都是32位。</span><span class="token comment">// 去掉前三位保存线程状态的位数，剩下的用于保存线程数量</span><span class="token comment">// 高3位为0，剩余位数全为1</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> COUNT_BITS <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>SIZE <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">// 2^COUNT_BITS次方，表示可以保存的最大线程数</span><span class="token comment">// CAPACITY 的高3位为 0</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CAPACITY   <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取线程池状态、线程数量以及合并两个值的操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Packing and unpacking ctl</span><span class="token comment">// 获取运行状态</span><span class="token comment">// 该操作会让除高3位以外的数全部变为0</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span>     <span class="token punctuation">{</span> <span class="token keyword">return</span> c <span class="token operator">&amp;</span> <span class="token operator">~</span>CAPACITY<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment">// 获取运行线程数</span><span class="token comment">// 该操作会让高3位为0</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">workerCountOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span>  <span class="token punctuation">{</span> <span class="token keyword">return</span> c <span class="token operator">&amp;</span> CAPACITY<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment">// 计算ctl新值</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ctlOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> rs<span class="token punctuation">,</span> <span class="token keyword">int</span> wc<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> rs <span class="token operator">|</span> wc<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="线程池属性"><a href="#线程池属性" class="headerlink" title="线程池属性"></a>线程池属性</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 工作线程，内部封装了Thread</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Worker</span>        <span class="token keyword">extends</span> <span class="token class-name">AbstractQueuedSynchronizer</span>        <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token comment">// 阻塞队列，用于存放来不及被核心线程执行的任务</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> workQueue<span class="token punctuation">;</span><span class="token comment">// 锁</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> mainLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//  用于存放核心线程的容器，只有当持有锁时才能够获取其中的元素（核心线程）</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Worker</span><span class="token punctuation">&gt;</span></span> workers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Worker</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="构造方法极其参数"><a href="#构造方法极其参数" class="headerlink" title="构造方法极其参数"></a>构造方法极其参数</h4><p><strong>ThreadPoolExecutor最全面的构造方法</strong></p><p>也是<code>构造自定义线程池</code>的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>                          <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>                          <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>                          <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span>                          <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> workQueue<span class="token punctuation">,</span>                          <span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">,</span>                          <span class="token class-name">RejectedExecutionHandler</span> handler<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="参数解释"><a href="#参数解释" class="headerlink" title="参数解释"></a><strong>参数解释</strong></h5><ul><li>corePoolSize：<code>核心线程数</code></li><li>maximumPoolSize：最大线程数<ul><li><code>maximumPoolSize - corePoolSize = 救急线程数</code></li></ul></li><li>keepAliveTime：救急线程空闲时的最大生存时间</li><li>unit：时间单位</li><li>workQueue：阻塞队列（存放任务）<ul><li>有界阻塞队列 ArrayBlockingQueue</li><li>无界阻塞队列 LinkedBlockingQueue</li><li>最多只有一个同步元素的 SynchronousQueue</li><li>优先队列 PriorityBlockingQueue</li></ul></li><li>threadFactory：线程工厂（给线程取名字）</li><li>handler：<code>拒绝策略</code></li></ul><h5 id="工作方式"><a href="#工作方式" class="headerlink" title="工作方式"></a>工作方式</h5><ul><li>当一个任务传给线程池以后，可能有以下几种可能<ul><li>将任务分配给一个核心线程来执行</li><li>核心线程都在执行任务，将任务放到阻塞队列workQueue中等待被执行</li><li><code>阻塞队列满了</code>，使用<code>救急线程</code>来执行任务<ul><li><strong>救急线程用完以后，超过生存时间（keepAliveTime）后会被释放</strong></li></ul></li><li><strong>任务总数大于了 最大线程数（maximumPoolSize）与阻塞队列容量的最大值（workQueue.capacity）</strong>，<code>使用拒接策略</code></li></ul></li></ul><h5 id="拒绝策略"><a href="#拒绝策略" class="headerlink" title="拒绝策略"></a>拒绝策略</h5><p>如果线程到达 maximumPoolSize 仍然有新任务这时会执行<code>拒绝策略</code>。拒绝策略 jdk 提供了 4 种实现</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc44.png"></p><ul><li>AbortPolicy：让调用者抛出 RejectedExecutionException 异常，<code>这是默认策略</code></li><li><strong>CallerRunsPolicy：让调用者运行任务</strong></li><li><strong>DiscardPolicy：放弃本次任务</strong></li><li><strong>DiscardOldestPolicy：放弃队列中最早的任务，本任务取而代之</strong></li></ul><h5 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span>   <span class="token keyword">static</span> <span class="token class-name">AtomicInteger</span> threadId <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 手动创建线程池</span>      <span class="token comment">// 创建有界阻塞队列</span>      <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> runnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 创建线程工厂</span>      <span class="token class-name">ThreadFactory</span> threadFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token annotation punctuation">@Override</span>         <span class="token keyword">public</span> <span class="token class-name">Thread</span> <span class="token function">newThread</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">"working_thread_"</span><span class="token operator">+</span>threadId<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> thread<span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token comment">// 手动创建线程池</span>      <span class="token comment">// 拒绝策略采用默认策略</span>      <span class="token class-name">ThreadPoolExecutor</span> executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span> runnable<span class="token punctuation">,</span> threadFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">try</span> <span class="token punctuation">{</span>                  <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="newFixedThreadPool"><a href="#newFixedThreadPool" class="headerlink" title="newFixedThreadPool"></a>newFixedThreadPool</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span> nThreads<span class="token punctuation">,</span>                                   <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                   <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>固定大小的线程池可以传入两个参数</p><ul><li>核心线程数：nThreads</li><li>线程工厂：threadFactory</li></ul><p>内部调用的构造方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span> nThreads<span class="token punctuation">,</span>                              <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                              <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                              threadFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>特点</strong> </p><ul><li><code>核心线程数 == 最大线程数</code>（没有救急线程被创建），因此也无需超时时间 </li><li>阻塞队列是无界的，可以放任意数量的任务</li></ul><blockquote><p>评价 适用于任务量已知，相对耗时的任务</p></blockquote><h4 id="newCachedThreadPool"><a href="#newCachedThreadPool" class="headerlink" title="newCachedThreadPool"></a>newCachedThreadPool</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span>                                  <span class="token number">60L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>                                  <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>内部构造方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span>                              <span class="token number">60L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>                              <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p><code>没有核心线程</code>，最大线程数为<code>Integer.MAX_VALUE</code>，<code>所有创建的线程都是救急线程</code>，空闲时生存时间为60秒</p></li><li><p>阻塞队列使用的是SynchronousQueue</p><ul><li><p>SynchronousQueue</p><p>是一种特殊的队列</p><ul><li><code>没有容量</code>，<strong>没有线程来取是放不进去的</strong></li><li><strong>只有当线程取任务时，才会将任务放入该阻塞队列中</strong></li></ul></li></ul></li></ul><blockquote><p>评价 整个线程池表现为线程数会根据任务量不断增长，没有上限，当任务执行完毕，空闲 1分钟后释放线 程。 适合任务数比较密集，但每个任务执行时间较短的情况</p></blockquote><h4 id="newSingleThreadExecutor"><a href="#newSingleThreadExecutor" class="headerlink" title="newSingleThreadExecutor"></a>newSingleThreadExecutor</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FinalizableDelegatedExecutorService</span>         <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>                                 <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                 <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>内部构造方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">FinalizableDelegatedExecutorService</span>    <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>                            <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                            <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>内部调用了<strong>new ThreadPoolExecutor</strong>的构造方法，传入的corePoolSize和maximumPoolSize都为1。然后将该对象传给了FinalizableDelegatedExecutorService。该类修饰了ThreadPoolExecutor，让<code>外部无法调用</code>ThreadPoolExecutor内部的某些方法<code>来修改</code>所创建的线程池的<code>大小</code></p><h4 id="newScheduledThreadPool"><a href="#newScheduledThreadPool" class="headerlink" title="newScheduledThreadPool"></a>newScheduledThreadPool</h4><p>newScheduledThreadPool是一个可以周期性执行任务的线程池</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ScheduledThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> NANOSECONDS<span class="token punctuation">,</span>          <span class="token keyword">new</span> <span class="token class-name">DelayedWorkQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>schedule</strong>：在指定的延迟后启用，任务立即提交给线程池，线程池安排线程在指定时间后正式开始运作，运作以后保持正常节奏</p><p><strong>scheduleAtFixedRate</strong>：创建并执行一个周期性动作，该动作在给定的初始延迟后首先启用，随后在一个<code>执行的终止与下一个开始的之间具有给定的延迟</code>。如果任务的任何执行遇到异常，则将取消后续执行。 否则，该任务将仅通过取消或终止执行程序而终止</p><ul><li><p>情况一：任务所需执行时间<code>超过</code>时间间隔的时候，<code>实际下一次执行时间=任务实际执行时间</code>。<br>当执行任务的时间大于我们指定的间隔时间时，它并不会在指定间隔时开辟一个新的线程并发执行这个任务。而是<code>等待该线程执行完毕</code>。</p></li><li><p>情况二：任务所需执行时间为<code>小于</code>设置时间间隔的时候，实际下一次执行时间为<code>设置的时间间隔</code></p></li></ul><p><strong>scheduleWithFixedDelay</strong>：创建并执行一个周期性动作，该动作在给定的初始延迟后首先启用，随后在一个执行的终止与下一个的开始之间具有的延迟。如果任务的任何执行遇到异常，则将取消后续执行。 否则，该任务将仅通过取消或终止执行程序而终止</p><ul><li>实际下一次执行时间是<code>任务所需执行时间+时间间隔</code></li></ul><h4 id="几个注意"><a href="#几个注意" class="headerlink" title="几个注意"></a>几个注意</h4><ul><li><p>newSingleThreadExecutor和自己创建一个线程来运行多个任务的区别</p><ul><li><strong>当线程正在执行的任务发生错误时，如果是自己创建的线程，该任务和剩余的任务就无法再继续运行下去。</strong>而newSingleThreadExecutor会<code>创建一个新线程</code>，<strong>继续执行任务队列中剩余的任务。</strong></li></ul></li><li><p>newSingleThreadExecutor和newFixedThreadPool(1)的区别</p><ul><li>newFixedThreadPool(1)传值为1，可以将FixedThreadPool<code>强转为</code>ThreadPoolExecutor，然后通过<code>setCorePoolSize改变核心线程数</code></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 强转为ThreadPoolExecutor</span><span class="token class-name">ThreadPoolExecutor</span> threadPool <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">)</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 改变核心线程数</span>threadPool<span class="token punctuation">.</span><span class="token function">setCorePoolSize</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>而newSingleThreadExecutor<code>无法修改</code>核心线程数</li></ul></li></ul><h4 id="执行任务"><a href="#执行任务" class="headerlink" title="执行任务"></a>执行任务</h4><h5 id="execute-方法"><a href="#execute-方法" class="headerlink" title="execute()方法"></a>execute()方法</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> command<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>传入一个<code>Runnable对象</code>，执行其中的run方法</p><p><strong>源码解析</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> command<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取ctl</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 判断当前启用的线程数是否小于核心线程数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&lt;</span> corePoolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 为该任务分配线程</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment">// 分配成功就返回</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token comment">// 分配失败再次获取ctl</span>        c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 分配和信息线程失败以后</span>    <span class="token comment">// 如果池状态为RUNNING并且插入到任务队列成功</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRunning</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> workQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 双重检测，可能在添加后线程池状态变为了非RUNNING</span>        <span class="token keyword">int</span> recheck <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 如果池状态为非RUNNING，则不会执行新来的任务</span>        <span class="token comment">// 将该任务从阻塞队列中移除</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">isRunning</span><span class="token punctuation">(</span>recheck<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">remove</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment">// 调用拒绝策略，拒绝该任务的执行</span>            <span class="token function">reject</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 如果没有正在运行的线程</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>recheck<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token comment">// 就创建新线程来执行该任务</span>            <span class="token function">addWorker</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 如果添加失败了（任务队列已满），就调用拒绝策略</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">reject</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中调用了**addWoker()**方法，再看看看这个方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">addWorker</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> firstTask<span class="token punctuation">,</span> <span class="token keyword">boolean</span> core<span class="token punctuation">)</span> <span class="token punctuation">{</span>    retry<span class="token operator">:</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Check if queue empty only if necessary.</span>        <span class="token comment">// 如果池状态为非RUNNING状态、线程池为SHUTDOWN且该任务为空 或者阻塞队列中已经有任务</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">&gt;=</span> SHUTDOWN <span class="token operator">&amp;&amp;</span>            <span class="token operator">!</span> <span class="token punctuation">(</span>rs <span class="token operator">==</span> SHUTDOWN <span class="token operator">&amp;&amp;</span>               firstTask <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>               <span class="token operator">!</span> workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment">// 创建新线程失败</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 获得当前工作线程数</span>            <span class="token keyword">int</span> wc <span class="token operator">=</span> <span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 参数中 core 为true</span>            <span class="token comment">// CAPACITY 为 1 &lt;&lt; COUNT_BITS-1，一般不会超过</span>            <span class="token comment">// 如果工作线程数大于了核心线程数，则创建失败</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>wc <span class="token operator">&gt;=</span> CAPACITY <span class="token operator">||</span>                wc <span class="token operator">&gt;=</span> <span class="token punctuation">(</span>core <span class="token operator">?</span> corePoolSize <span class="token operator">:</span> maximumPoolSize<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token comment">// 通过CAS操作改变c的值</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndIncrementWorkerCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment">// 更改成功就跳出多重循环，且不再运行循环</span>                <span class="token keyword">break</span> retry<span class="token punctuation">;</span>            <span class="token comment">// 更改失败，重新获取ctl的值</span>            c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Re-read ctl</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">runStateOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">!=</span> rs<span class="token punctuation">)</span>                <span class="token comment">// 跳出多重循环，且重新进入循环</span>                <span class="token keyword">continue</span> retry<span class="token punctuation">;</span>            <span class="token comment">// else CAS failed due to workerCount change; retry inner loop</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 用于标记work中的任务是否成功执行</span>    <span class="token keyword">boolean</span> workerStarted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">// 用于标记worker是否成功加入了线程池中</span>    <span class="token keyword">boolean</span> workerAdded <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token class-name">Worker</span> w <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建新线程来执行任务</span>        w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>firstTask<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">Thread</span> t <span class="token operator">=</span> w<span class="token punctuation">.</span>thread<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>            <span class="token comment">// 加锁</span>            mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment">// Recheck while holding lock.</span>                <span class="token comment">// Back out on ThreadFactory failure or if</span>                <span class="token comment">// shut down before lock acquired.</span>                <span class="token comment">// 加锁的同时再次检测</span>                <span class="token comment">// 避免在释放锁之前调用了shut down</span>                <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">&lt;</span> SHUTDOWN <span class="token operator">||</span>                    <span class="token punctuation">(</span>rs <span class="token operator">==</span> SHUTDOWN <span class="token operator">&amp;&amp;</span> firstTask <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// precheck that t is startable</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalThreadStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 将线程添加到线程池中</span>                    workers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> s <span class="token operator">=</span> workers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">&gt;</span> largestPoolSize<span class="token punctuation">)</span>                        largestPoolSize <span class="token operator">=</span> s<span class="token punctuation">;</span>                    <span class="token comment">// 添加成功标志位变为true</span>                    workerAdded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 如果worker成功加入了线程池，就执行其中的任务</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>workerAdded<span class="token punctuation">)</span> <span class="token punctuation">{</span>                t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 启动成功</span>                workerStarted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment">// 如果执行失败</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> workerStarted<span class="token punctuation">)</span>            <span class="token comment">// 调用添加失败的函数</span>            <span class="token function">addWorkerFailed</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> workerStarted<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="submit-方法"><a href="#submit-方法" class="headerlink" title="submit()方法"></a>submit()方法</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> task<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>传入一个Callable对象，<code>用Future来捕获返回值</code></p><p><strong>使用</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 通过submit执行Callable中的call方法</span><span class="token comment">// 通过Future来捕获返回值</span><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> threadPool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">"hello submit"</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 查看捕获的返回值</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="提交任务"><a href="#提交任务" class="headerlink" title="提交任务"></a>提交任务</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 提交 tasks 中所有任务</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">invokeAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> tasks<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span> <span class="token comment">// 提交 tasks 中所有任务，带超时时间</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">invokeAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> tasks<span class="token punctuation">,</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span> <span class="token comment">// 提交 tasks 中所有任务，哪个任务先成功执行完毕，返回此任务执行结果，其它任务取消</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">invokeAny</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> tasks<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">;</span><span class="token comment">// 提交 tasks 中所有任务，哪个任务先成功执行完毕，返回此任务执行结果，其它任务取消，带超时时间</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">invokeAny</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> tasks<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span>    <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">TimeoutException</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="关闭线程池"><a href="#关闭线程池" class="headerlink" title="关闭线程池"></a>关闭线程池</h4><h5 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown()"></a>shutdown()</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*线程池状态变为 SHUTDOWN- 不会接收新任务- 但已提交任务会执行完- 此方法不会阻塞调用线程的执行*/</span><span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 将线程池的状态改为 SHUTDOWN* 不再接受新任务，但是会将阻塞队列中的任务执行完*/</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>    mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">checkShutdownAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 修改线程池状态为 SHUTDOWN</span>        <span class="token function">advanceRunState</span><span class="token punctuation">(</span>SHUTDOWN<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 中断空闲线程（没有执行任务的线程）</span>        <span class="token comment">// Idle：空闲的</span>        <span class="token function">interruptIdleWorkers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">onShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hook for ScheduledThreadPoolExecutor</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 尝试终结，不一定成功</span>    <span class="token comment">// </span>    <span class="token function">tryTerminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">tryTerminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 终结失败的条件</span>        <span class="token comment">// 线程池状态为RUNNING</span>        <span class="token comment">// 线程池状态为 RUNNING SHUTDOWN STOP （状态值大于TIDYING）</span>        <span class="token comment">// 线程池状态为SHUTDOWN，但阻塞队列中还有任务等待执行</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRunning</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">||</span>            <span class="token function">runStateAtLeast</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> TIDYING<span class="token punctuation">)</span> <span class="token operator">||</span>            <span class="token punctuation">(</span><span class="token function">runStateOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">==</span> SHUTDOWN <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span> workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token comment">// 如果活跃线程数不为0</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// Eligible to terminate</span>            <span class="token comment">// 中断空闲线程</span>            <span class="token function">interruptIdleWorkers</span><span class="token punctuation">(</span>ONLY_ONE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>        mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 处于可以终结的状态</span>            <span class="token comment">// 通过CAS将线程池状态改为TIDYING</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token function">ctlOf</span><span class="token punctuation">(</span>TIDYING<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token function">terminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    <span class="token comment">// 通过CAS将线程池状态改为TERMINATED</span>                    ctl<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token function">ctlOf</span><span class="token punctuation">(</span>TERMINATED<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    termination<span class="token punctuation">.</span><span class="token function">signalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// else retry on failed CAS</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="shutdownNow"><a href="#shutdownNow" class="headerlink" title="shutdownNow()"></a>shutdownNow()</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*线程池状态变为 STOP- 不会接收新任务- 会将队列中的任务返回- 并用 interrupt 的方式中断正在执行的任务*/</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> <span class="token function">shutdownNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 将线程池的状态改为 STOP* 不再接受新任务，也不会在执行阻塞队列中的任务* 会将阻塞队列中未执行的任务返回给调用者*/</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> <span class="token function">shutdownNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> tasks<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>    mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">checkShutdownAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 修改状态为STOP，不执行任何任务</span>        <span class="token function">advanceRunState</span><span class="token punctuation">(</span>STOP<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 中断所有线程</span>        <span class="token function">interruptWorkers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 将未执行的任务从队列中移除，然后返回给调用者</span>        tasks <span class="token operator">=</span> <span class="token function">drainQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 尝试终结，一定会成功，因为阻塞队列为空了</span>    <span class="token function">tryTerminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> tasks<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="其它方法"><a href="#其它方法" class="headerlink" title="其它方法"></a>其它方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 不在 RUNNING 状态的线程池，此方法就返回 true</span><span class="token keyword">boolean</span> <span class="token function">isShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 线程池状态是否是 TERMINATED</span><span class="token keyword">boolean</span> <span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 调用 shutdown 后，由于调用线程并不会等待所有任务运行结束，因此如果它想在线程池 TERMINATED 后做些事情，可以利用此方法等待</span><span class="token keyword">boolean</span> <span class="token function">awaitTermination</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="任务调度线程池"><a href="#任务调度线程池" class="headerlink" title="任务调度线程池"></a>任务调度线程池</h4><p>在『任务调度线程池』功能加入之前，可以使用 java.util.Timer 来实现定时功能，Timer 的优点在于简单易用，但由于所有任务都是由同一个线程来调度，因此所有任务都是<code>串行执行的</code>，同一时间只能有一个任务在执行，前一个任务的<code>延迟或异常</code>都将会<code>影响到之后的任务</code>。</p><h4 id="正确处理执行任务异常"><a href="#正确处理执行任务异常" class="headerlink" title="正确处理执行任务异常"></a>正确处理执行任务异常</h4><p><strong>方法1：主动捉异常</strong></p><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ExecutorService</span> pool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>     <span class="token keyword">try</span> <span class="token punctuation">{</span>         log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"task1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>     log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"error:"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>方法2：使用 Future</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ExecutorService</span> pool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> f <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>     log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"task1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"result:{}"</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Tomcat-线程池"><a href="#Tomcat-线程池" class="headerlink" title="Tomcat 线程池"></a>Tomcat 线程池</h4><p>Tomcat 在哪里用到了线程池呢 </p><ul><li>LimitLatch 用来限流，可以控制最大连接个数，类似 J.U.C 中的 Semaphore 后面再讲 </li><li>Acceptor 只负责【接收新的 socket 连接】 </li><li>Poller 只负责监听 socket channel 是否有【可读的 I/O 事件】 </li><li>一旦可读，封装一个任务对象（socketProcessor），提交给 Executor 线程池处理 </li><li>Executor 线程池中的工作线程最终负责【处理请求】 </li></ul><p><strong>Tomcat 线程池扩展了 ThreadPoolExecutor</strong>，行为稍有不同 </p><ul><li>如果总线程数达到 maximumPoolSize <ul><li>这时不会立刻抛 RejectedExecutionException 异常 </li><li>而是再次尝试将任务放入队列，如果还失败，才抛出 RejectedExecutionException 异常</li></ul></li></ul><h5 id="Connector-配置"><a href="#Connector-配置" class="headerlink" title="Connector 配置"></a>Connector 配置</h5><table><thead><tr><th>配置项</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>acceptorThreadCount</td><td>1</td><td>acceptor 线程数量</td></tr><tr><td>pollerThreadCount</td><td>1</td><td>poller 线程数量</td></tr><tr><td>minSpareThreads</td><td>10</td><td>核心线程数，即 corePoolSize</td></tr><tr><td>maxThreads</td><td>200</td><td>最大线程数，即 maximumPoolSize</td></tr><tr><td>executor</td><td>-</td><td>Executor名称，用来引用下面的 Executor</td></tr></tbody></table><h5 id="Executor-线程配置"><a href="#Executor-线程配置" class="headerlink" title="Executor 线程配置"></a>Executor 线程配置</h5><table><thead><tr><th>配置项</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>threadPriority</td><td>5</td><td>线程优先级</td></tr><tr><td>daemon</td><td>true</td><td>是否守护线程</td></tr><tr><td>minSpareThreads</td><td>25</td><td>核心线程数，即 corePoolSize</td></tr><tr><td>maxThreads</td><td>200</td><td>最大线程数，即 maximumPoolSize</td></tr><tr><td>maxIdleTime</td><td>60000</td><td>线程生存时间，单位是毫秒，默认值即 1 分钟</td></tr><tr><td>maxQueueSize</td><td>Integer.MAX_VALUE</td><td>队列长度</td></tr><tr><td>prestartminSpareThreads</td><td>false</td><td>核心线程是否在服务器启动时启动</td></tr></tbody></table><h3 id="Fork-Join"><a href="#Fork-Join" class="headerlink" title="Fork/Join"></a>Fork/Join</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>Fork/Join 是 JDK 1.7 加入的新的线程池实现，它体现的是一种<code>分治思想</code>，适用于能够进行任务拆分的 cpu 密集型 运算 </p><p>所谓的<code>任务拆分</code>，是将一个大任务拆分为算法上相同的小任务，直至不能拆分可以直接求解。跟递归相关的一些计算，如归并排序、斐波那契数列、都可以用分治思想进行求解 </p><p>Fork/Join 在分治的基础上加入了多线程，可以把每个任务的分解和合并交给不同的线程来完成，进一步提升了运算效率</p><p>Fork/Join <code>默认会创建与 cpu 核心数大小相同的线程池</code></p><h4 id="使用-3"><a href="#使用-3" class="headerlink" title="使用"></a>使用</h4><p>提交给 Fork/Join 线程池的任务<code>需要继承</code> RecursiveTask（有返回值）或 RecursiveAction（没有返回值）</p><h3 id="异步模式之工作线程"><a href="#异步模式之工作线程" class="headerlink" title="异步模式之工作线程"></a>异步模式之工作线程</h3><h4 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h4><p>让<code>有限的工作线程</code>（Worker Thread）来<code>轮流异步处理无限多的任务</code>。也可以将其归类为分工模式，它的典型实现 就是线程池，也体现了经典设计模式中的享元模式。</p><blockquote><p>注意，不同任务类型应该使用不同的线程池，这样能够避免饥饿，并能提升效率</p></blockquote><h4 id="饥饿-1"><a href="#饥饿-1" class="headerlink" title="饥饿"></a>饥饿</h4><p> 固定大小线程池会有饥饿现象 </p><ul><li><p>两个工人是同一个线程池中的两个线程 </p></li><li><p>他们要做的事情是：为客人点餐和到后厨做菜，这是两个阶段的工作 </p><ul><li>客人点餐：必须先点完餐，等菜做好，上菜，在此期间处理点餐的工人必须等待 </li><li>后厨做菜：没啥说的，做就是了</li></ul></li><li><p>比如工人A 处理了点餐任务，接下来它要等着 工人B 把菜做好，然后上菜，他俩也配合的蛮好 </p></li><li><p>但现在同时来了两个客人，这个时候工人A 和工人B 都去处理点餐了，这时没人做饭了，饥饿</p></li></ul><p>解决方法可以增加线程池的大小，不过不是根本解决方案，还是前面提到的，<code>不同的任务类型，采用不同的线程池</code></p><h4 id="创建多少线程池合适"><a href="#创建多少线程池合适" class="headerlink" title="创建多少线程池合适"></a>创建多少线程池合适</h4><ul><li><code>过小</code>会导致程序不能充分地利用系统资源、容易导致饥饿 </li><li><code>过大</code>会导致更多的<code>线程上下文切换</code>，占用更多内存</li></ul><h5 id="CPU-密集型运算"><a href="#CPU-密集型运算" class="headerlink" title="CPU 密集型运算"></a>CPU 密集型运算</h5><p>通常采用 <code>cpu 核数 + 1</code> 能够实现最优的 CPU 利用率，+1 是保证当线程由于页缺失故障（操作系统）或其它原因 导致暂停时，额外的这个线程就能顶上去，保证 CPU 时钟周期不被浪费 </p><h5 id="I-O-密集型运算"><a href="#I-O-密集型运算" class="headerlink" title="I/O 密集型运算"></a>I/O 密集型运算</h5><p>CPU 不总是处于繁忙状态，例如，当你执行业务计算时，这时候会使用 CPU 资源，但当你执行 I/O 操作时、远程 RPC 调用时，包括进行数据库操作时，这时候 CPU 就闲下来了，你可以利用多线程提高它的利用率。</p><p><strong>经验公式如下</strong> </p><p><code>线程数 = 核数 * 期望 CPU 利用率 * 总时间(CPU计算时间+等待时间) / CPU 计算时间</code> </p><p>例如 4 核 CPU 计算时间是 50% ，其它等待时间是 50%，期望 cpu 被 100% 利用，套用公式 </p><p><code>4 * 100% * 100% / 50% = 8</code> </p><p>例如 4 核 CPU 计算时间是 10% ，其它等待时间是 90%，期望 cpu 被 100% 利用，套用公式 </p><p><code>4 * 100% * 100% / 10% = 40</code></p><h2 id="J-U-C"><a href="#J-U-C" class="headerlink" title="J.U.C"></a>J.U.C</h2><h3 id="AQS-原理"><a href="#AQS-原理" class="headerlink" title="AQS 原理"></a>AQS 原理</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>全称是 AbstractQueuedSynchronizer，是<code>阻塞式锁</code>和<strong>相关的同步器工具的框架</strong> </p><p>特点：</p><ul><li><p>用 state 属性来表示资源的状态（分<code>独占</code>模式和<code>共享</code>模式），子类需要定义如何维护这个状态，控制如何获取锁和释放锁 </p><ul><li>getState - 获取 state 状态 </li><li>setState - 设置 state 状态 </li><li>compareAndSetState - cas 机制设置 state 状态 </li><li>独占模式是<code>只有一个线程</code>能够访问资源，而<code>共享模式可以允许多个线程</code>访问资源</li></ul></li><li><p>提供了基于 FIFO 的等待队列，类似于 Monitor 的 EntryList </p></li><li><p>条件变量来实现等待、唤醒机制，支持多个条件变量，类似于 Monitor 的 WaitSet</p></li></ul><p>子类主要实现这样一些方法（默认抛出 UnsupportedOperationException） </p><ul><li>tryAcquire </li><li>tryRelease </li><li>tryAcquireShared </li><li>tryReleaseShared </li><li>isHeldExclusively</li></ul><p>获取锁的姿势</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 如果获取锁失败</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 入队, 可以选择阻塞当前线程 park unpark</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>释放锁的姿势</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 如果释放锁成功</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryRelease</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 让阻塞线程恢复运行</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h4><p><strong>起源</strong></p><p>早期程序员会自己通过一种同步器去实现另一种相近的同步器，例如用可重入锁去实现信号量，或反之。这显然不 够优雅，于是在 JSR166（java 规范提案）中创建了 AQS，提供了这种通用的<code>同步器</code>机制。</p><p><strong>目标</strong></p><p>AQS 要实现的功能目标 </p><ul><li>阻塞版本获取锁 acquire 和非阻塞的版本<code>尝试获取锁</code> tryAcquire </li><li>获取锁超时机制</li><li>通过打断取消机制 </li><li>独占机制及共享机制 </li><li>条件不满足时的等待机制</li></ul><p><strong>设计</strong></p><p>AQS 的基本思想其实很简单 </p><p>获取锁的逻辑</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span>state 状态不允许获取<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>队列中还没有此线程<span class="token punctuation">)</span> <span class="token punctuation">{</span>     入队并阻塞     <span class="token punctuation">}</span><span class="token punctuation">}</span>当前线程出队<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>释放锁的逻辑</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>state 状态允许了<span class="token punctuation">)</span> <span class="token punctuation">{</span> 恢复阻塞的线程<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>要点 </p><ul><li>原子维护 state 状态</li><li>阻塞及恢复线程 </li><li>维护队列</li></ul><p><strong>1) state 设计</strong> </p><ul><li>state 使用 <code>volatile 配合 cas</code> 保证其修改时的原子性 state </li><li>使用了 32bit int 来维护同步状态，因为当时使用 long 在很多平台下测试的结果并不理想 </li></ul><p><strong>2) 阻塞恢复设计</strong> </p><ul><li>早期的控制线程暂停和恢复的 api 有 suspend 和 resume，但它们是不可用的，因为如果先调用的 resume  那么 suspend 将感知不到 </li><li>解决方法是使用 <code>park &amp; unpark</code> 来实现线程的暂停和恢复，具体原理在之前讲过了，先 unpark 再 park 也没问题 </li><li>park &amp; unpark 是<code>针对线程</code>的，而<code>不是针对同步器</code>的，因此控制粒度更为精细 </li><li>park 线程还可以通过 interrupt 打断 </li></ul><p><strong>3) 队列设计</strong> </p><ul><li>使用了 FIFO 先入先出队列，并不支持优先级队列 </li><li>设计时借鉴了 CLH 队列，它是一种<code>单向无锁</code>队列</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本次学习是从【黑马java并发编程教程】视频中进行的。&lt;a href=&quot;https://www.bilibili.com/video/av8</summary>
      
    
    
    
    <category term="笔记" scheme="http://mjean.life/categories/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="JUC" scheme="http://mjean.life/categories/%E7%AC%94%E8%AE%B0/JUC/"/>
    
    
    <category term="JUC" scheme="http://mjean.life/tags/JUC/"/>
    
    <category term="Java并发编程" scheme="http://mjean.life/tags/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>JVM</title>
    <link href="http://mjean.life/posts/66c016fb.html"/>
    <id>http://mjean.life/posts/66c016fb.html</id>
    <published>2021-07-03T16:50:26.000Z</published>
    <updated>2022-04-18T12:48:45.845Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本次学习是从【黑马程序员出品】的解密JVM教程视频中进行的。<a href="%5B%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98JVM%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B%EF%BC%8C%E5%85%A8%E7%BD%91%E8%B6%85%E9%AB%98%E8%AF%84%E4%BB%B7%EF%BC%8C%E5%85%A8%E7%A8%8B%E5%B9%B2%E8%B4%A7%E4%B8%8D%E6%8B%96%E6%B2%93_%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9_bilibili%5D(https://www.bilibili.com/video/BV1yE411Z7AP)">视频地址</a></p><hr><h1 id="什么是JVM"><a href="#什么是JVM" class="headerlink" title="什么是JVM"></a>什么是JVM</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote><p>Java Virtual Machine(JVM)，<code>JAVA程序的运行环境</code>（JAVA二进制字节码的运行环境）。</p></blockquote><h2 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h2><ul><li>一次编写，到处运行</li><li><code>自动内存管理，垃圾回收机制</code></li><li>数组下标越界检查</li></ul><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><blockquote><p>JVM、JRE、JDK的区别！</p></blockquote><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm1.png"></p><hr><h1 id="内存结构"><a href="#内存结构" class="headerlink" title="内存结构"></a>内存结构</h1><blockquote><p>整体架构！</p></blockquote><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm2.png"></p><h2 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h2><blockquote><p>Program Counter Register 程序计数器（寄存器）。</p></blockquote><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>用于<code>保存JVM</code>中<code>下一条所要执行的指令的地址</code>。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li><code>线程私有</code><ul><li>CPU会为每个线程分配时间片，当当前线程的时间片使用完以后，CPU就会去执行另一个线程中的代码</li><li><code>程序计数器是每个线程所私有的</code>，当另一个线程的时间片用完，又返回来执行当前线程的代码时，通过<code>程序计数器可以知道应该执行哪一句指令</code></li></ul></li><li><code>不会存在内存溢出</code></li></ul><h2 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h2><blockquote><p>Java Virtual Machine Stacks （Java 虚拟机栈）</p></blockquote><ul><li>每个<code>线程</code>运行需要的<code>内存空间</code>，称为<code>虚拟机栈</code></li><li>每个栈由<code>多个栈帧</code>组成，对应着每次调用方法时所占用的内存</li><li>每个线程只能有<code>一个活动栈帧</code>，对应着<code>当前正在执行的方法</code></li></ul><h3 id="问题辨析"><a href="#问题辨析" class="headerlink" title="问题辨析"></a>问题辨析</h3><ol><li><p>垃圾回收是否涉及栈内存？</p><blockquote><p><code>不需要</code>。因为虚拟机栈中是由一个个栈帧组成的，在方法执行完毕后，<code>对应的栈帧就会被弹出栈</code>。所以<code>无需通过垃圾回收机制去回收内存</code>。</p></blockquote></li><li><p>栈内存分配越大越好吗？ </p><blockquote><ul><li><code>不是</code>。因为<code>物理内存是一定的</code>，<code>栈内存越大</code>，可以支持更多的递归调用，但是<code>可执行的线程数</code>就会越少。</li></ul></blockquote></li><li><p>方法内的局部变量是否线程安全？</p><blockquote><p>1、如果<code>方法内局部变量没有逃离方法的作用范围</code>，它是<code>线程安全的</code> </p><p>2、如果是<code>局部变量引用了对象，并逃离方法的作用范围</code>，需要考虑线程安全</p></blockquote></li></ol><h3 id="内存溢出"><a href="#内存溢出" class="headerlink" title="内存溢出"></a>内存溢出</h3><blockquote><p><strong>Java.lang.stackOverflowError</strong>（ 栈内存溢出）</p></blockquote><p><strong>发生原因</strong></p><ul><li>虚拟机栈中，<code>栈帧过多</code>（无限递归）</li><li>每个栈帧<code>所占用过大</code></li></ul><h3 id="线程运行诊断"><a href="#线程运行诊断" class="headerlink" title="线程运行诊断"></a>线程运行诊断</h3><p>CPU占用过高</p><blockquote><p>Linux环境下运行某些程序的时候，可能导致CPU的占用过高，这时需要定位占用CPU过高的线程</p></blockquote><ul><li><code>top</code>命令，查看是<code>哪个进程占用CPU过高</code></li><li><code>ps H -eo pid, tid（线程id）</code>, <code>%cpu | grep 进程id</code> (通过ps命令进一步查看是哪个线程占用CPU过高)</li><li><code>jstack 进程id</code> 可以根据线程id找到有问题的线程，进一步定位到问题代码的源码行号（注意<code>jstack查找出的线程id是16进制的，需要转换</code>）</li></ul><h2 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h2><blockquote><p>一些带有<code>native关键字</code>的方法就是需要JAVA去调用本地的C或者C++方法，因为JAVA有时候没法直接和操作系统底层交互，所以需要用到本地方法。</p></blockquote><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><blockquote><p>通过new关键字<code>创建的对象</code>都会被放在堆内存。</p></blockquote><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ul><li><code>所有线程共享</code>，堆内存中的对象都需要<code>考虑线程安全问题</code></li><li><code>有垃圾回收机制</code></li></ul><h3 id="堆内存溢出"><a href="#堆内存溢出" class="headerlink" title="堆内存溢出"></a>堆内存溢出</h3><blockquote><p><strong>java.lang.OutofMemoryError</strong> ：java heap space. （堆内存溢出）</p></blockquote><h3 id="堆内存诊断"><a href="#堆内存诊断" class="headerlink" title="堆内存诊断"></a>堆内存诊断</h3><ul><li><strong>jps</strong>：查看当前系统中有哪些<code>java进程</code></li><li><strong>jmap</strong>：查看堆内存占用情况 <code>jmap -heap 进程id</code></li><li><strong>jconsole</strong>：图形界面的，多功能的监测工具，可以连续监测</li><li><strong>JVisulVM</strong>：可视化的JVM监控工具</li></ul><h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm3.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm4.png"></p><h3 id="内存溢出-1"><a href="#内存溢出-1" class="headerlink" title="内存溢出"></a>内存溢出</h3><ul><li>1.8以前会导致<code>永久代</code>内存溢出</li><li>1.8以后会导致<code>元空间</code>内存溢出</li></ul><h3 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h3><blockquote><p>二进制字节码的组成：<code>类的基本信息</code>、<code>常量池</code>、<code>类的方法定义</code>（包含了虚拟机指令）</p></blockquote><p><strong>通过反编译来查看类的信息</strong></p><ul><li><p>获得对应类的<code>.class</code>文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">javac .java文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在控制台输入 <code>javap -v</code> 类的绝对路径</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">javap -v 类的绝对路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>然后能在控制台看到反编译以后类的信息了</p></li></ul><h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h3><ul><li><code>常量池</code>，就是一张表，<code>虚拟机指令根据这张常量表</code>找到要执行的<code>类名</code>、<code>方法名</code>、<code>参数类型</code>、<code>字面量等信息</code> </li><li><code>运行时常量池</code>，<code>常量池是 .class 文件中的</code>，<strong>当该类被加载</strong>，它的常量池信息就会<code>放入运行时常量池</code>，<code>并把里面的符号地址变为真实地址</code></li></ul><h3 id="常量池与串池的关系"><a href="#常量池与串池的关系" class="headerlink" title="常量池与串池的关系"></a>常量池与串池的关系</h3><h4 id="StringTable（串池）"><a href="#StringTable（串池）" class="headerlink" title="StringTable（串池）"></a>StringTable（串池）</h4><p><strong>特性：</strong></p><ul><li>常量池中的字符串仅是符号，<code>第一次用到时才变为对象</code> </li><li>利用串池的机制，来避免重复创建字符串对象 </li><li>字符串<code>变量</code>拼接的原理是 <code>StringBuilder （1.8）</code></li><li>字符串<code>常量</code>拼接的原理是<code>编译器优化</code> 可以<code>使用 intern 方法</code>，<code>主动将串池中还没有的字符串对象放入串池</code> <ul><li>1.8 将这个字符串对象尝试放入串池，如果有则并不会放入，如果没有则放入串池， 会把<code>串池中的对象返回</code> </li><li>1.6 将这个字符串对象尝试放入串池，如果有则并不会放入，如果没有会把此<code>对象复制一份</code>， <code>放入串池， 会把串池中的对象返回</code></li></ul></li></ul><p><strong>例1：</strong>用来放字符串对象且里面的<code>元素不重复</code></p><blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&gt;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringTableStudy</span><span class="token punctuation">{</span><span class="token operator">&gt;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span> <span class="token class-name">String</span> b <span class="token operator">=</span> <span class="token string">"b"</span><span class="token punctuation">;</span><span class="token class-name">String</span> ab <span class="token operator">=</span> <span class="token string">"ab"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token operator">&gt;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常量池中的信息，都会被加载到<code>运行时常量池</code>中，但这是a、 b、 ab 仅是常量池中的符号，<code>还没有成为java字符串</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">:</span> ldc           #<span class="token number">2</span>                  <span class="token comment">// String a</span><span class="token operator">&gt;</span><span class="token number">2</span><span class="token operator">:</span> astore_1<span class="token operator">&gt;</span><span class="token number">3</span><span class="token operator">:</span> ldc           #<span class="token number">3</span>                  <span class="token comment">// String b</span><span class="token operator">&gt;</span><span class="token number">5</span><span class="token operator">:</span> astore_2<span class="token operator">&gt;</span><span class="token number">6</span><span class="token operator">:</span> ldc           #<span class="token number">4</span>                  <span class="token comment">// String ab</span><span class="token operator">&gt;</span><span class="token number">8</span><span class="token operator">:</span> astore_3<span class="token operator">&gt;</span><span class="token number">9</span><span class="token operator">:</span> <span class="token keyword">return</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当执行到 ldc #2 时，会把符号 a 变为 “a” 字符串对象，<code>并放入串池中</code>（hashtable结构 不可扩容）</p><p>当执行到 ldc #3 时，会把符号 b 变为 “b” 字符串对象，并放入串池中</p><p>当执行到 ldc #4 时，会把符号 ab 变为 “ab” 字符串对象，并放入串池</p><p>最终<code>StringTable [“a”, “b”, “ab”]</code></p><p><strong>注意</strong>：字符串对象的创建都是<code>懒惰的</code>，只有当运行到那一行字符串且在串池中不存在的时候（如 ldc #2）时，该字符串才会被创建并放入串池中。</p></blockquote><p><strong>例2：</strong>使用拼接<code>字符串变量对象</code>创建字符串的过程</p><blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringTableStudy</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span><span class="token class-name">String</span> b <span class="token operator">=</span> <span class="token string">"b"</span><span class="token punctuation">;</span><span class="token class-name">String</span> ab <span class="token operator">=</span> <span class="token string">"ab"</span><span class="token punctuation">;</span><span class="token comment">//拼接字符串对象来创建新的字符串</span><span class="token class-name">String</span> c <span class="token operator">=</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>反编译后如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token class-name">Code</span><span class="token operator">:</span>stack<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span>   <span class="token number">0</span><span class="token operator">:</span> ldc           #<span class="token number">2</span>                  <span class="token comment">// String a</span>   <span class="token number">2</span><span class="token operator">:</span> astore_1   <span class="token number">3</span><span class="token operator">:</span> ldc           #<span class="token number">3</span>                  <span class="token comment">// String b</span>   <span class="token number">5</span><span class="token operator">:</span> astore_2   <span class="token number">6</span><span class="token operator">:</span> ldc           #<span class="token number">4</span>                  <span class="token comment">// String ab</span>   <span class="token number">8</span><span class="token operator">:</span> astore_3   <span class="token number">9</span><span class="token operator">:</span> <span class="token keyword">new</span>           #<span class="token number">5</span>                  <span class="token comment">// class java/lang/StringBuilder</span>  <span class="token number">12</span><span class="token operator">:</span> dup  <span class="token number">13</span><span class="token operator">:</span> invokespecial #<span class="token number">6</span>                  <span class="token comment">// Method java/lang/StringBuilder."&lt;init&gt;":()V</span>  <span class="token number">16</span><span class="token operator">:</span> aload_1  <span class="token number">17</span><span class="token operator">:</span> invokevirtual #<span class="token number">7</span>                  <span class="token comment">// Method java/lang/StringBuilder.append:(Ljava/lang/String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">StringBuilder</span><span class="token punctuation">;</span>  <span class="token number">20</span><span class="token operator">:</span> aload_2  <span class="token number">21</span><span class="token operator">:</span> invokevirtual #<span class="token number">7</span>                  <span class="token comment">// Method java/lang/StringBuilder.append:(Ljava/lang/String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">StringBuilder</span><span class="token punctuation">;</span>  <span class="token number">24</span><span class="token operator">:</span> invokevirtual #<span class="token number">8</span>                  <span class="token comment">// Method java/lang/StringBuilder.toString:()Ljava/lang/Str</span>ing<span class="token punctuation">;</span>  <span class="token number">27</span><span class="token operator">:</span> astore        <span class="token number">4</span>  <span class="token number">29</span><span class="token operator">:</span> <span class="token keyword">return</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过拼接的方式来<code>创建字符串的过程</code>是：StringBuilder().append(“a”).append(“b”).toString()</p><p>最后的toString方法的返回值是<code>一个新的字符串</code>，但字符串的值和拼接的字符串一致，但是两个不同的字符串，<code>一个存在于串池之中，一个存在于堆内存之中</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> ab <span class="token operator">=</span> <span class="token string">"ab"</span><span class="token punctuation">;</span><span class="token class-name">String</span> c <span class="token operator">=</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token comment">//结果为false,因为ab是存在于串池之中，c是由StringBuffer的toString方法所返回的一个对象，存在于堆内存之中</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ab <span class="token operator">==</span> ab2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p><strong>例3：</strong>使用<code>拼接字符串常量对象</code>的方法创建字符串</p><blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringTableStudy</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span><span class="token class-name">String</span> b <span class="token operator">=</span> <span class="token string">"b"</span><span class="token punctuation">;</span><span class="token class-name">String</span> ab <span class="token operator">=</span> <span class="token string">"ab"</span><span class="token punctuation">;</span><span class="token class-name">String</span> c <span class="token operator">=</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token comment">//使用拼接字符串的方法创建字符串</span><span class="token class-name">String</span> ab2 <span class="token operator">=</span> <span class="token string">"a"</span> <span class="token operator">+</span> <span class="token string">"b"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>反编译后如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">  <span class="token class-name">Code</span><span class="token operator">:</span>stack<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span>   <span class="token number">0</span><span class="token operator">:</span> ldc           #<span class="token number">2</span>                  <span class="token comment">// String a</span>   <span class="token number">2</span><span class="token operator">:</span> astore_1   <span class="token number">3</span><span class="token operator">:</span> ldc           #<span class="token number">3</span>                  <span class="token comment">// String b</span>   <span class="token number">5</span><span class="token operator">:</span> astore_2   <span class="token number">6</span><span class="token operator">:</span> ldc           #<span class="token number">4</span>                  <span class="token comment">// String ab</span>   <span class="token number">8</span><span class="token operator">:</span> astore_3   <span class="token number">9</span><span class="token operator">:</span> <span class="token keyword">new</span>           #<span class="token number">5</span>                  <span class="token comment">// class java/lang/StringBuilder</span>  <span class="token number">12</span><span class="token operator">:</span> dup  <span class="token number">13</span><span class="token operator">:</span> invokespecial #<span class="token number">6</span>                  <span class="token comment">// Method java/lang/StringBuilder."&lt;init&gt;":()V</span>  <span class="token number">16</span><span class="token operator">:</span> aload_1  <span class="token number">17</span><span class="token operator">:</span> invokevirtual #<span class="token number">7</span>                  <span class="token comment">// Method java/lang/StringBuilder.append:(Ljava/lang/String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">StringBuilder</span><span class="token punctuation">;</span>  <span class="token number">20</span><span class="token operator">:</span> aload_2  <span class="token number">21</span><span class="token operator">:</span> invokevirtual #<span class="token number">7</span>                  <span class="token comment">// Method java/lang/StringBuilder.append:(Ljava/lang/String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">StringBuilder</span><span class="token punctuation">;</span>  <span class="token number">24</span><span class="token operator">:</span> invokevirtual #<span class="token number">8</span>                  <span class="token comment">// Method java/lang/StringBuilder.toString:()Ljava/lang/Str</span>ing<span class="token punctuation">;</span>  <span class="token number">27</span><span class="token operator">:</span> astore        <span class="token number">4</span>  <span class="token comment">//ab2初始化时直接从串池中获取字符串</span>  <span class="token number">29</span><span class="token operator">:</span> ldc           #<span class="token number">4</span>                  <span class="token comment">// String ab</span>  <span class="token number">31</span><span class="token operator">:</span> astore        <span class="token number">5</span>  <span class="token number">33</span><span class="token operator">:</span> <span class="token keyword">return</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用<code>拼接字符串常量</code>的方法来创建新的字符串时，因为内容是常量，<code>javac在编译期会进行优化，结果已在编译期确定为ab</code>，而创建ab的时候已经在串池中放入了“ab”，所以<code>ab2直接从串池中获取值</code>，所以进行的操作和 ab = “ab” 一致。</li><li>使用<code>拼接字符串变量</code>的方法来创建新的字符串时，因为内容是变量，只能<code>在运行期确定它的值，所以需要使用StringBuilder来创建</code></li></ul></blockquote><h5 id="intern方法-1-8"><a href="#intern方法-1-8" class="headerlink" title="intern方法 1.8"></a>intern方法 1.8</h5><p>调用字符串对象的intern方法，会将该字符串对象尝试放入到串池中</p><ul><li>如果串池中没有该字符串对象，则放入成功</li><li>如果有该字符串对象，则放入失败</li></ul><p><code>无论放入是否成功，都会返回串池中的字符串对象</code></p><p><strong>注意</strong>：此时如果<code>调用intern方法成功</code>，堆内存与串池中的字符串对象<code>是同一个对象</code>；<code>如果失败，则不是同一个对象</code></p><p><strong>例1：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringTableStudy</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//"a" "b" 被放入串池中，str则存在于堆内存之中</span><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用str的intern方法，这时串池中没有"ab"，则会将该字符串对象放入到串池中，此时堆内存与串池中的"ab"是同一个对象</span><span class="token class-name">String</span> st2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//给str3赋值，因为此时串池中已有"ab"，则直接将串池中的内容返回</span><span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token string">"ab"</span><span class="token punctuation">;</span><span class="token comment">//因为堆内存与串池中的"ab"是同一个对象，所以以下两条语句打印的都为true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str <span class="token operator">==</span> st2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str <span class="token operator">==</span> str3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>例2：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringTableStudy</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//此处创建字符串对象"ab"，因为串池中还没有"ab"，所以将其放入串池中</span><span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token string">"ab"</span><span class="token punctuation">;</span>        <span class="token comment">//"a" "b" 被放入串池中，str则存在于堆内存之中</span><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//此时因为在创建str3时，"ab"已存在与串池中，所以放入失败，但是会返回串池中的"ab"</span><span class="token class-name">String</span> str2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str <span class="token operator">==</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str <span class="token operator">==</span> str3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2 <span class="token operator">==</span> str3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="intern方法-1-6"><a href="#intern方法-1-6" class="headerlink" title="intern方法 1.6"></a>intern方法 1.6</h5><p>调用字符串对象的intern方法，会将该字符串对象尝试放入到串池中</p><ul><li>如果串池中没有该字符串对象，会将该字符串<code>对象复制一份，再放入到串池中</code></li><li>如果有该字符串对象，则放入失败</li></ul><p>无论放入是否成功，都会返回串池中的字符串对象</p><p><strong>注意</strong>：此时无论调用intern方法成功与否，<code>串池中的字符串对象和堆内存中的字符串对象都不是同一个对象</code></p><h4 id="StringTable-垃圾回收"><a href="#StringTable-垃圾回收" class="headerlink" title="StringTable 垃圾回收"></a>StringTable 垃圾回收</h4><blockquote><p>StringTable在内存紧张时，会发生垃圾回收</p></blockquote><h4 id="StringTable调优"><a href="#StringTable调优" class="headerlink" title="StringTable调优"></a>StringTable调优</h4><ul><li><p>因为StringTable是由HashTable实现的，所以可以<code>适当增加HashTable桶的个数</code>，来减少字符串放入串池所需要的时间</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">-</span>XX<span class="token operator">:</span><span class="token class-name">StringTableSize</span><span class="token operator">=</span>xxxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>考虑是否需要将字符串对象入池</p><p>可以通过<code>intern方法减少重复入池</code></p></li></ul><h2 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h2><blockquote><p>Direct Memory</p></blockquote><ul><li>常见于 NIO 操作时，用于<code>数据缓冲区</code> </li><li>分配回收成本较高，但读写性能高 </li><li><code>不受 JVM 内存回收管理</code></li></ul><h3 id="文件读写流程"><a href="#文件读写流程" class="headerlink" title="文件读写流程"></a>文件读写流程</h3><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm5.png"></p><p><strong>使用了DirectBuffer</strong></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm6.png"></p><p>直接内存是操作系统和Java代码<code>都可以访问的一块区域</code>，<strong>无需将代码从系统内存复制到Java堆内存，从而提高了效率</strong></p><h3 id="释放原理"><a href="#释放原理" class="headerlink" title="释放原理"></a>释放原理</h3><p>直接内存的回收<code>不是通过JVM的垃圾回收来释放</code>的，而是通过<code>unsafe.freeMemory</code>来手动释放</p><p><strong>示例</strong></p><ul><li><strong>申请直接内存</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//通过ByteBuffer申请1M的直接内存</span><span class="token class-name">ByteBuffer</span> byteBuffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocateDirect</span><span class="token punctuation">(</span>_1M<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><strong>allocateDirect的实现</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ByteBuffer</span> <span class="token function">allocateDirect</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectByteBuffer</span><span class="token punctuation">(</span>capacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><strong>DirectByteBuffer类</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">DirectByteBuffer</span><span class="token punctuation">(</span><span class="token keyword">int</span> cap<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">// package-private</span>       <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> cap<span class="token punctuation">,</span> cap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> pa <span class="token operator">=</span> VM<span class="token punctuation">.</span><span class="token function">isDirectMemoryPageAligned</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ps <span class="token operator">=</span> <span class="token class-name">Bits</span><span class="token punctuation">.</span><span class="token function">pageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> size <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>cap <span class="token operator">+</span> <span class="token punctuation">(</span>pa <span class="token operator">?</span> ps <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Bits</span><span class="token punctuation">.</span><span class="token function">reserveMemory</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> cap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> base <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        base <span class="token operator">=</span> unsafe<span class="token punctuation">.</span><span class="token function">allocateMemory</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//申请内存</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">OutOfMemoryError</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Bits</span><span class="token punctuation">.</span><span class="token function">unreserveMemory</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> cap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    unsafe<span class="token punctuation">.</span><span class="token function">setMemory</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pa <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>base <span class="token operator">%</span> ps <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// Round up to page boundary</span>        address <span class="token operator">=</span> base <span class="token operator">+</span> ps <span class="token operator">-</span> <span class="token punctuation">(</span>base <span class="token operator">&amp;</span> <span class="token punctuation">(</span>ps <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        address <span class="token operator">=</span> base<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cleaner <span class="token operator">=</span> <span class="token class-name">Cleaner</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Deallocator</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> size<span class="token punctuation">,</span> cap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//通过虚引用，来实现直接内存的释放，this为虚引用的实际对象</span>    att <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这里<code>调用了一个Cleaner的create方法</code>，且后台线程还会对<code>虚引用</code>的对象监测，<strong>如果虚引用的实际对象（这里是DirectByteBuffer）被回收以后，就会调用Cleaner的clean方法，来清除直接内存中占用的内存</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">try</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>thunk<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用run方法</span>     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Throwable</span> var2<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token class-name">AccessController</span><span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrivilegedAction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">public</span> <span class="token class-name">Void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>err <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                     <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Cleaner terminated abnormally"</span><span class="token punctuation">,</span> var2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>                 <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应对象的run方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>address <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// Paranoia</span>  <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>unsafe<span class="token punctuation">.</span><span class="token function">freeMemory</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//释放直接内存中占用的内存</span>address <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">Bits</span><span class="token punctuation">.</span><span class="token function">unreserveMemory</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> capacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="直接内存的回收机制总结"><a href="#直接内存的回收机制总结" class="headerlink" title="直接内存的回收机制总结"></a>直接内存的回收机制总结</h3><ul><li>使用了 <code>Unsafe 对象完成直接内存的分配回收</code>，并且回收需要<code>主动调用 freeMemory 方法</code> </li><li><code>ByteBuffer 的实现类内部</code>，使用了 <code>Cleaner（虚引用)</code>来<code>监测 ByteBuffer 对象</code>，一旦 ByteBuffer 对象被垃圾回收，那么就会由 <code>ReferenceHandler 线程</code>通过 Cleaner 的 clean 方法调用 freeMemory 来释放直接内存</li></ul><hr><h1 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h1><h2 id="如何判断对象是否可以回收"><a href="#如何判断对象是否可以回收" class="headerlink" title="如何判断对象是否可以回收"></a>如何判断对象是否可以回收</h2><h3 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h3><p>弊端：循环引用时，两个对象的计数都为1，导致两个对象都无法被释放</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm7.png"></p><h3 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h3><ul><li>Java 虚拟机中的垃圾回收器采用<code>可达性分析</code>来探索所有<code>存活的对象</code> </li><li>扫描堆中的对象，看是否能够<code>沿着 GC Root对象 为起点的引用链找到该对象</code>，如果<code>找不到</code>，表示可<code>以回收</code> </li><li>哪些对象可以作为 GC Root ?<ul><li><strong>虚拟机栈（栈帧中的本地变量表）中引用的对象</strong></li><li><strong>方法区中类静态属性引用的对象</strong></li><li><strong>方法区中常量引用的对象</strong></li><li><strong>本地方法栈中JNI（即一般说的Native方法）引用的对象</strong></li></ul></li></ul><h3 id="五种引用"><a href="#五种引用" class="headerlink" title="五种引用"></a>五种引用</h3><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm8.png"></p><h4 id="强引用-StrongReference"><a href="#强引用-StrongReference" class="headerlink" title="强引用(StrongReference)"></a>强引用(StrongReference)</h4><ul><li><p>只有所有 <code>GC Roots 对象</code>都<code>不通过【强引用】引用该对象</code>，<code>该对象才能被垃圾回收</code></p></li><li><p>如上图，只有B、C对象都不引用A1对象时，A1对象才会被回收</p></li></ul><h4 id="软引用-SoftReference"><a href="#软引用-SoftReference" class="headerlink" title="软引用(SoftReference)"></a>软引用(SoftReference)</h4><ul><li><p><code>仅有</code>软引用引用该对象时，<code>在垃圾回收后</code>，<code>内存仍不足时会再次触发垃圾回收</code>，<code>回收软引用所引用的对象</code> </p></li><li><p>如上图，如果<code>B对象不再引用A2对象且内存不足时</code>，<strong>软引用所引用的A2对象就会被回收</strong></p></li><li><p>可以配合<code>引用队列来释放软引用自身</code> </p></li><li><p><strong>软引用的使用</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">final</span> <span class="token keyword">int</span> _4M <span class="token operator">=</span> <span class="token number">4</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">;</span><span class="token comment">//使用软引用对象 list对SoftReference是强引用，而SoftReference对byte数组则是软引用</span><span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">SoftReference</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SoftReference</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> ref<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>_4M<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>如果在垃圾回收时发现内存不足，在回收软引用所指向的对象时</strong>，<code>软引用本身不会被清理</code></p><p>如果想要<strong>清理软引用</strong>，<code>需要使用引用队列</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">final</span> <span class="token keyword">int</span> _4M <span class="token operator">=</span> <span class="token number">4</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">;</span><span class="token comment">//使用引用队列，用于移除引用为空的软引用对象</span><span class="token class-name">ReferenceQueue</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用软引用对象 list对SoftReference是强引用，而SoftReference对byte数组则是软引用</span><span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">SoftReference</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SoftReference</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> ref<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>_4M<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//遍历引用队列，如果有元素，则移除</span><span class="token class-name">Reference</span><span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> poll <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>poll <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//引用队列不为空，则从集合中移除该元素</span>list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>poll<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//移动到引用队列中的下一个元素</span>poll <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路：</strong>查看引用队列中有无软引用，如果有，则将该软引用从存放它的集合中移除（这里为一个list集合）</p></li></ul><h4 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h4><ul><li><p>仅有弱引用引用该对象时，在垃圾回收时，<code>无论内存是否充足</code>，都会回收弱引用对象 </p></li><li><p>如上图，如果B对象不再引用A3对象，则A3对象会被回收</p></li><li><p>可以配合<code>引用队列来释放弱引用自身</code> </p></li></ul><h4 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h4><ul><li><p><code>必须配合引用队列使用</code>，主要配合 <code>ByteBuffer</code> 使用</p></li><li><p>当虚引用所引用得对象被回收后，虚引用就会被<code>放入引用队列</code>中， 由 <code>Reference Handler 线程调用虚引用相关方法释放直接内存</code> </p><p>1）虚引用的一个体现是<code>释放直接内存所分配的内存</code>，<strong>当引用的对象ByteBuffer被垃圾回收以后</strong>，虚引用对象Cleaner就会被放入引用队列中，然后调用Cleaner的clean方法来释放直接内存</p><p>2）如上图，如果B对象不再引用ByteBuffer对象，ByteBuffer就会被回收。但是直接内存中的内存还未被回收。这时需要将虚引用对象Cleaner放入引用队列中，然后调用它的clean方法来释放直接内存</p></li></ul><h4 id="终结器引用"><a href="#终结器引用" class="headerlink" title="终结器引用"></a>终结器引用</h4><ul><li><p>所有的类都继承自Object类，Object类有一个finalize方法</p></li><li><p>无需手动编码，但其内部配合引用队列使用</p></li><li><p>当某个对象不再被其他的对象所引用时，在垃圾回收时，<strong>会先将终结器引用放入引用队列中</strong>，<strong>然后根据终结器引用对象找到它所引用的对象，然后调用该对象的finalize方法</strong>。<code>调用以后，第二次 GC时，该对象就可以被垃圾回收了</code></p></li><li><p>如上图，B对象不再引用A4对象，<strong>在垃圾回收时，终结器引用被放入引用队列（被终结器引用所引用的对象暂时没有被回收）</strong>，再由 <code>Finalizer 线程通过终结器引用找到被引用对象并调用它的 finalize 方法</code>，<code>第二次 GC</code> 时才能回收被引用对象</p></li></ul><h4 id="引用队列"><a href="#引用队列" class="headerlink" title="引用队列"></a>引用队列</h4><ul><li>软引用和弱引用<strong>可以配合</strong>引用队列<ul><li>在<strong>弱引用</strong>和<strong>虚引用</strong>所引用的对象被回收以后，会将这些引用放入引用队列中，方便一起回收这些软/弱引用对象</li></ul></li><li>虚引用和终结器引用<strong>必须配合</strong>引用队列<ul><li>虚引用和终结器引用在使用时会关联一个引用队列</li></ul></li></ul><h2 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h2><h3 id="标记-清除"><a href="#标记-清除" class="headerlink" title="标记 - 清除"></a>标记 - 清除</h3><blockquote><p>定义： Mark Sweep 速度较快</p></blockquote><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm9.png"></p><p><strong>定义</strong>：标记清除算法顾名思义，是指在虚拟机执行垃圾回收的过程中，<code>先采用标记算法确定可回收对象</code>，<code>然后垃圾收集器根据标识清除相应的内</code>容，给堆内存腾出相应的空间</p><ul><li>这里的腾出内存空间<strong>并不是将内存空间的字节清零</strong>，<strong>而是记录下这段内存的起始结束地址</strong>，下次分配内存的时候，<code>会直接覆盖这段内存</code></li></ul><p><strong>缺点</strong>：<code>容易产生大量的内存碎片</code>，<strong>可能无法满足大对象的内存分配</strong>，一旦导致无法分配对象，那就会导致jvm启动gc，一旦启动gc，我们的应用程序就会暂停，这就导致应用的响应速度变慢</p><h3 id="标记-整理"><a href="#标记-整理" class="headerlink" title="标记 - 整理"></a>标记 - 整理</h3><blockquote><p>定义：Mark Compact 速度慢</p></blockquote><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm10.png"></p><p><code>标记-整理</code> <strong>会将不被GC Root引用的对象回收</strong>，清楚其占用的内存空间。<strong>然后整理剩余的对象</strong>，<code>可以有效避免因内存碎片而导致的问题</code>，但是因为整体需要消耗一定的时间，所以<code>效率较低</code></p><h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm11.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm12.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm13.png"></p><p><strong>将内存分为等大小的两个区域</strong>，<code>FROM</code>和<code>TO（TO中为空）</code>。<strong>先将被GC Root引用的对象从FROM放入TO中</strong>，<strong>再回收不被GC Root引用的对象</strong>。<code>然后交换FROM和TO</code>。<strong>这样也可以避免内存碎片的问题</strong>，但是会<code>占用双倍的内存空间</code></p><h2 id="分代回收"><a href="#分代回收" class="headerlink" title="分代回收"></a>分代回收</h2><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm14.png"></p><ul><li>对象首先分配在伊甸园(Eden)区域 </li><li>新生代空间不足时，<code>触发 minor gc</code>，<code>伊甸园和 from 存活的对象使用 copy 复制到 to 中</code>，<strong>存活的对象年龄加 1并且交换 from to</strong> </li><li><code>minor gc 会引发 stop the world(STW)</code>，<code>暂停</code>其它用户的线程，等垃圾回收结束，用户线程才<code>恢复</code>运行 </li><li><strong>当对象寿命超过阈值时，会晋升至老年代</strong>，最大寿命是15（4bit） </li><li><strong>当老年代空间不足，会先尝试触发 minor gc，如果之后空间仍不足，那么触发 full gc，STW的时间更长</strong></li></ul><h3 id="回收流程"><a href="#回收流程" class="headerlink" title="回收流程"></a>回收流程</h3><ol><li><p>新创建的对象都被放在了<code>新生代的伊甸园</code>中</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm15.png"></p></li><li><p><strong>当伊甸园中的内存不足时，就会进行一次垃圾回收</strong>，这时的回收叫做 <code>Minor GC</code></p><p><strong>Minor GC</strong> 会将<code>伊甸园</code>和<code>幸存区FROM</code>存活的对象<code>先复制</code>到 <code>幸存区 TO</code>中， 并让其<strong>寿命加1</strong>，再<code>交换两个幸存区</code></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm16.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm17.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm18.png"></p></li><li><p>再次创建对象，若新生代的伊甸园又满了，则会<code>再次触发 Minor GC</code>（会触发 <code>stop the world</code>， <strong>暂停其他用户线程，只让垃圾回收线程工作</strong>），这时不仅会回收伊甸园中的垃圾，<code>还会回收幸存区中的垃圾</code>，再将活跃对象复制到幸存区TO中。回收以后会交换两个幸存区，并让幸存区中的对象<strong>寿命加1</strong></p></li><li><p>如果幸存区中的对象的<code>寿命超过某个阈值</code>（最大为15，4bit），就会被<code>放入老年代</code>中</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm19.png"></p></li><li><p>如果新生代老年代中的内存都满了，就会<code>先触发Minor GC</code>，<code>再触发Full GC</code>，扫描<strong>新生代和老年代中</strong><code>所有不再使用的对象并回收</code></p></li></ol><h3 id="GC-分析"><a href="#GC-分析" class="headerlink" title="GC 分析"></a>GC 分析</h3><h5 id="大对象处理策略"><a href="#大对象处理策略" class="headerlink" title="大对象处理策略"></a>大对象处理策略</h5><p>当遇到一个<code>较大的对象</code>时，就算新生代的<code>伊甸园</code>为空，也<code>无法容纳该对象</code>时，会将该对象<code>直接晋升为老年代</code></p><h5 id="线程内存溢出"><a href="#线程内存溢出" class="headerlink" title="线程内存溢出"></a>线程内存溢出</h5><p><strong>某个线程的内存溢出了而抛异常（out of memory），不会让其他的线程结束运行</strong></p><p>这是因为当一个线程<strong>抛出OOM异常后</strong>，<strong>它所占据的内存资源会全部被释放掉</strong>，从而不会影响其他线程的运行，<strong>进程依然正常</strong></p><h2 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h2><blockquote><p><code>并行收集</code>：指多条垃圾收集线程<code>并行工作</code>，但此时<code>用户线程仍处于等待状态</code>。</p><p><code>并发收集</code>：指用户线程与垃圾收集线程<code>同时工作</code>（不一定是并行的可能会交替执行）,<code>用户程序在继续运行</code></p><p><code>吞吐量</code>：即CPU用于<code>运行用户代码的时间</code>与<code>CPU总消耗时间</code>的<code>比值</code>（吞吐量 = 运行用户代码时间 / ( 运行用户代码时间 + 垃圾收集时间 )），也就是。例如：<strong>虚拟机共运行100分钟，垃圾收集器花掉1分钟，那么吞吐量就是99%</strong></p></blockquote><h3 id="串行"><a href="#串行" class="headerlink" title="串行"></a>串行</h3><ul><li>单线程</li><li>内存较小，适合个人电脑（CPU核数少）</li></ul><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm20.png"></p><blockquote><p><strong>安全点</strong>：让其他线程都在这个点停下来，<code>以免垃圾回收时改变的对象的地址被改变导致其他线程找不到被改变的对象</code>。因为是串行的，所以只有一个垃圾回收线程。且在该线程执行回收工作时，其他线程进入<code>阻塞状态</code></p></blockquote><h4 id="Serial-垃圾收集器"><a href="#Serial-垃圾收集器" class="headerlink" title="Serial 垃圾收集器"></a>Serial 垃圾收集器</h4><p>Serial收集器是最基本的、发展历史最悠久的收集器；主要用于<code>新生代</code>。</p><p><strong>特点：</strong><code>单线程</code>、简单高效（与其他收集器的单线程相比），采用<code>复制算法</code>。对于限定单个CPU的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程收集效率。收集器进行垃圾回收时，必须暂停其他所有的工作线程，直到它结束（Stop The World）</p><h4 id="ParNew-垃圾收集器"><a href="#ParNew-垃圾收集器" class="headerlink" title="ParNew 垃圾收集器"></a>ParNew 垃圾收集器</h4><p>ParNew收集器（Par就是Parallel的缩写 New 指的是新生代）就是<code>Serial收集器的多线程版本</code></p><p><strong>特点</strong>：多线程、ParNew收集器<code>默认</code>开启的收集线程数<code>与CPU的数量相同</code>，在CPU非常多的环境中，可以使用<code>-XX:ParallelGCThreads</code>参数来<code>限制</code>垃圾收集的线程数。和Serial收集器一样存在Stop The World问题</p><h4 id="Serial-Old-垃圾收集器"><a href="#Serial-Old-垃圾收集器" class="headerlink" title="Serial Old 垃圾收集器"></a>Serial Old 垃圾收集器</h4><p>Serial Old是Serial收集器的<code>老年代版本</code></p><p><strong>特点</strong>：同样是<code>单线程</code>收集器，采用<code>标记-整理算法</code></p><h3 id="吞吐量优先"><a href="#吞吐量优先" class="headerlink" title="吞吐量优先"></a>吞吐量优先</h3><ul><li><code>多线程</code></li><li>堆内存较大，多核CPU</li><li><code>单位时间内，STW（stop the world，停掉其他所有工作线程）时间最短</code></li><li><strong>JDK1.8默认使用</strong>的垃圾回收器</li></ul><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm21.png"></p><h4 id="Parallel-Scavenge-收集器"><a href="#Parallel-Scavenge-收集器" class="headerlink" title="Parallel Scavenge 收集器"></a>Parallel Scavenge 收集器</h4><p>与吞吐量关系密切，故也称为<code>吞吐量优先收集器</code></p><p><strong>特点</strong>：属于新生代收集器也是采用<code>复制算法</code>的收集器（用到了新生代的幸存区），又是<code>并行的多线程收集器</code>（与ParNew收集器类似）</p><p>该收集器的目标是达到一个可控制的吞吐量。还有一个值得关注的点是：<code>GC自适应调节策略，例如 -XX:+UseAdaptiveSizePolicy 可以动态调整新生代的大小（-XMn）、Eden与Survivor区的比例（—XX:SurvivorRation）等等</code>。<strong>（与ParNew收集器最重要的一个区别）</strong></p><h4 id="相关参数"><a href="#相关参数" class="headerlink" title="相关参数"></a>相关参数</h4><ul><li><p><strong>-XX:+UseParallelGC ~ -XX:+UseParallelOldGC</strong> </p><blockquote><p><code>-XX:+UseParallelGC</code>：告诉JVM使用多线程并行执行年轻代垃圾收集</p><p><code>-XX:+UseParallelOldGC</code>：Old 指的是老年代 ，激活了年老代并行垃圾收集</p></blockquote></li><li><p><strong>-XX:+UseAdaptiveSizePolicy</strong> </p><blockquote><p>根据GC的情况自动计算 Eden、From 和 To 区的大小；然后<code>动态的进行调整</code></p></blockquote></li><li><p><strong>-XX:GCTimeRatio=ratio</strong> </p><blockquote><p>告诉JVM<code>吞吐量要达到的目标值</code>。例如：-XX:GCTimeRatio=N指定目标应用程序线程的执行时间(与总的程序执行时间)达到N/(N+1)的目标比值，-XX:GCTimeRatio的默认值是99，也就是说，应用程序线程应该运行至少99%的总执行时间。</p></blockquote></li><li><p><strong>-XX:MaxGCPauseMillis=ms</strong> </p><blockquote><p>告诉JVM<code>最大暂停时间的目标值</code>(以毫秒为单位)</p></blockquote></li><li><p><strong>-XX:ParallelGCThreads=n</strong></p><blockquote><p>指定<code>并行垃圾收集的线程数量</code></p></blockquote></li></ul><h4 id="Parallel-Old-收集器"><a href="#Parallel-Old-收集器" class="headerlink" title="Parallel Old 收集器"></a><strong>Parallel Old 收集器</strong></h4><blockquote><p>是Parallel Scavenge收集器的老年代版本</p></blockquote><p><strong>特点</strong>：<code>多线程</code>，采用<code>标记-整理算法</code>（老年代没有幸存区）</p><h3 id="响应时间优先"><a href="#响应时间优先" class="headerlink" title="响应时间优先"></a>响应时间优先</h3><ul><li><code>多线程</code></li><li>堆内存较大，<code>多核CPU</code></li><li><code>尽可能让单次STW时间变短</code>（尽量不影响其他线程运行）</li></ul><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm22.png"></p><h4 id="CMS-收集器"><a href="#CMS-收集器" class="headerlink" title="CMS 收集器"></a>CMS 收集器</h4><blockquote><p><strong>Concurrent Mark Sweep</strong>，一种以获取最短回收停顿时间为目标的<code>针对老年代</code>的收集器</p></blockquote><p><strong>特点</strong></p><ul><li>基于<code>标记-清除算法</code>实现，<code>会产生内存碎片</code></li><li>以获取最短回收停顿时间为目标</li><li>并发收集、低停顿</li><li>需要更多的内存</li></ul><p><strong>应用场景</strong>：适用于注重服务的响应速度，希望系统停顿时间最短，给用户带来更好的体验等场景下。如web程序、b/s服务</p><p><strong>CMS收集器的运行过程分为下列4步：</strong></p><p><strong>初始标记</strong>：仅标记GC Roots能<code>直接关联</code>到的对象。速度很快，但需要<strong>Stop The World</strong></p><p><strong>并发标记</strong>：进行GC Roots Tracing 的过程，找出<code>存活对象</code>（并不能保证可以标记出所有的存活对象）且<code>用户线程可并发执行</code></p><p><strong>重新标记</strong>：为了<code>修正并发标记期间</code>因用户程序继续运行而导致标记<code>产生变动</code>的那一部分对象的标记记录。仍然需要<strong>Stop The World</strong>，且停顿时间比初始标记稍长，但远比并发标记短</p><p><strong>并发清除</strong>：回收所有的垃圾对象</p><p>CMS收集器的内存回收过程是与用户线程一起<code>并发执行</code>的</p><p><strong>缺点</strong></p><ol><li><p><strong>对CPU资源非常敏感</strong>：并发收集虽然不会暂停用户线程，但因为<code>占用一部分CPU资源</code>，还是会影响应用程序的性能。<code>CMS的默认收集线程数量是=（CPU数量 + 3)/4</code>：当CPU数量多于4个，收集线程占用的CPU资源多于25%，对用户程序影响可能较大；不足4个时，影响更大，可能无法接受</p></li><li><p><code>无法处理浮动垃圾</code>,可能出现”<code>Concurrent Mode Failure</code>“失败：<strong>在并发标记时，用户线程新产生的垃圾</strong> ，称为<code>浮动垃圾</code>；</p><blockquote><p> 如果CMS预留内存空间无法满足程序需要，就会出现一次”Concurrent Mode Failure”失败；这时， JVM启用后备预案：<code>临时启用Serail Old收集器，而导致另一次Full GC的产生</code>；这样的代价是很大的，所以<code>CMSInitiatingOccupancyFraction不能设置得太大</code></p></blockquote></li><li><p><code>产生大量内存碎片</code>：由于 <strong>CMS基于”标记-清除”算法，清除后不进行压缩操作</strong></p></li></ol><h3 id="G1-Garbage-First"><a href="#G1-Garbage-First" class="headerlink" title="G1 (Garbage First)"></a>G1 (Garbage First)</h3><blockquote><p>JDK 9以后默认使用，而且替代了CMS 收集器</p></blockquote><h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><ul><li>同时注重吞吐量和低延迟（响应时间）</li><li>超大堆内存（内存大的），会将堆内存划分为多个<strong>大小相等</strong>的区域</li><li>整体上是<strong>标记-整理</strong>算法，两个区域之间是<strong>复制</strong>算法</li></ul><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm23.png"></p><h4 id="相关参数-1"><a href="#相关参数-1" class="headerlink" title="相关参数"></a>相关参数</h4><ul><li>-XX:+UseG1GC ：<code>启用</code> Garbage First (G1) 收集器</li><li>-XX:G1HeapRegionSize=size ：使用G1时<code>Java堆会被分为大小统一的的区(region)</code>。<strong>此参数可以指定每个heap区的大小，默认值将根据 heap size 算出最优解. 最小值为1Mb, 最大值为 32Mb</strong></li><li>-XX:MaxGCPauseMillis=time：设置<code>期望达到的最大GC停顿时间指标</code>（JVM会尽力实现，但不保证达到）(默认200ms)</li></ul><h4 id="Region的介绍"><a href="#Region的介绍" class="headerlink" title="Region的介绍"></a>Region的介绍</h4><ol><li><p>G1收集器，默认将<code>Java堆</code>划分成约<code>2048</code>个大小相同的独立的<code>Region</code>块，每一个Region块大小根据堆空间的实际大小来决定，范围控制在<code>1MB</code>到<code>32MB</code>之内。<code>所有的Region大小相同</code>，且在<code>JVM</code>生命周期内<code>不会改变</code>(<strong>除非JVM停止之后</strong>，<code>重新设置</code>Region的大小，否则region的大小不会改变)</p></li><li><p><code>Region</code>使新生代和老年代的物理空间可以是不连续的。</p></li><li><p><code>Region的类型</code></p></li></ol><ul><li><code>Old region</code>：老年代的Old区 。</li><li><code>Eden region</code>：新生代的eden区。</li><li><code>Survivor region</code>：新生代的survivor区。</li><li><code>Humongous region</code>: 大区，主要用于<code>存储大对象</code>，如果对象大小超过<code>0.5</code>个<code>Region</code>，就放到这个区</li></ul><ol start="4"><li>设置H区（<code>Humongous region</code>）的原因：<strong>对于堆中的大对象，默认会被分配到老年代，但是如果它是一个短期存在的对象，由于老年代垃圾收集的频率较低，这个对象是不能及时被回收掉的，会对垃圾收集造成负面的影响</strong>。<br>设置H区，就能够及时回收。如果一个H区装不下一个大对象，则寻找连续的H区来存储，如果<code>找不到连续的H区，就会启动Full GC</code></li></ol><h4 id="G1回收阶段"><a href="#G1回收阶段" class="headerlink" title="G1回收阶段"></a>G1回收阶段</h4><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm24.png"></p><blockquote><p>新生代伊甸园垃圾回收—–&gt;内存不足，新生代回收+并发标记—–&gt;回收新生代伊甸园、幸存区、老年代内存——&gt;新生代伊甸园垃圾回收(重新开始)</p></blockquote><h4 id="Young-Collection"><a href="#Young-Collection" class="headerlink" title="Young Collection"></a>Young Collection</h4><p><strong>E：伊甸园 S：幸存区 O：老年代</strong></p><ul><li><p>会 STW</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm25.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm26.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm27.png"></p></li></ul><h4 id="Young-Collection-CM"><a href="#Young-Collection-CM" class="headerlink" title="Young Collection + CM"></a>Young Collection + CM</h4><p><code>CM：并发标记</code></p><ul><li><p>在 Young GC 时会<strong>对 GC Root 进行初始标记</strong>，需要STW</p></li><li><p>在老年代占用堆内存的比例达到阈值时（默认是45%），会进行并发标记（不会STW），阈值可以<code>-XX:InitiatingHeapOccupancyPercent</code>来设置</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm28.png"></p></li></ul><h4 id="Mixed-Collection"><a href="#Mixed-Collection" class="headerlink" title="Mixed Collection"></a>Mixed Collection</h4><p>会对<code>E S O</code> 进行<code>全面的回收</code></p><ul><li>最终标记（Remark）会STW</li><li><code>拷贝</code>存活会STW</li></ul><p><strong>问</strong>：为什么有的老年代被拷贝了，有的没拷贝？</p><p>因为指定了最大停顿时间，如果对所有老年代都进行回收，耗时可能过高。为了保证时间不超过设定的停顿时间，会<code>回收最有价值的老年代</code>（回收后，能够得到更多内存）</p><p>​    <img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm29.png"></p><h4 id="Full-GC"><a href="#Full-GC" class="headerlink" title="Full GC"></a>Full GC</h4><ul><li><p><strong>SerialGC</strong> </p><ul><li>新生代内存不足发生的垃圾收集 - minor gc </li><li>老年代内存不足发生的垃圾收集 - full gc </li></ul></li><li><p><strong>ParallelGC</strong> </p><ul><li>新生代内存不足发生的垃圾收集 - minor gc </li><li>老年代内存不足发生的垃圾收集 - full gc </li></ul></li><li><p><strong>CMS</strong> </p><ul><li>新生代内存不足发生的垃圾收集 - minor gc </li><li>老年代内存不足如果并发出现失败 -full gc</li></ul></li><li><p>G1 </p><ul><li>新生代内存不足发生的垃圾收集 - minor gc </li><li>老年代内存不足（老年代所占内存超过阈值）<ul><li>如果垃圾产生速度<code>慢于</code>垃圾回收速度，<code>不会触发</code>Full GC，还是并发地进行清理</li><li>如果垃圾产生速度<code>快于</code>垃圾回收速度，<code>便会触发</code>Full GC</li></ul></li></ul></li></ul><h4 id="Young-Collection-跨代引用"><a href="#Young-Collection-跨代引用" class="headerlink" title="Young Collection 跨代引用"></a>Young Collection 跨代引用</h4><ul><li><p>新生代回收的跨代引用（老年代引用新生代）问题</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm30.png"></p></li><li><p>卡表与Remembered Set</p><ul><li>Remembered Set 存在于E中，用于保存新生代对象对应的脏卡<ul><li>脏卡：O被划分为多个区域（一个区域512K），如果该区域<code>引用了新生代对象</code>，则该区域被称为<code>脏卡</code></li></ul></li></ul></li><li><p>在引用变更时通过post-write barried + dirty card queue</p></li><li><p>concurrent refinement threads 更新 Remembered Set</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm31.png"></p></li></ul><h4 id="Remark"><a href="#Remark" class="headerlink" title="Remark"></a>Remark</h4><ul><li><strong>pre-write barrier + satb_mark_queue</strong></li></ul><p><strong>最终标记阶段</strong></p><p><strong>黑色：已被处理，需要保留的 灰色：正在处理中的 白色：还未处理的</strong></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm32.png"></p><p>但是<code>在并发标记过程中</code>，<strong>有可能A被处理了以后未引用C，但该处理过程还未结束，在处理过程结束之前A引用了C</strong>，这时就会用到<code>remark</code></p><p>过程如下</p><ul><li><p>之前C未被引用，这时A引用了C，就会给C<code>加一个写屏障</code>，写屏障的指令会被执行，将C放入一个队列当中，并将C变为 <code>处理中</code> 状态</p></li><li><p>在<strong>并发标记</strong>阶段结束以后，重新标记阶段会STW，然后将放在该队列中的对象重新处理，发现有强引用引用它，就会处理它</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm33.png"></p></li></ul><h4 id="JDK-8u20-字符串去重"><a href="#JDK-8u20-字符串去重" class="headerlink" title="JDK 8u20 字符串去重"></a>JDK 8u20 字符串去重</h4><ul><li>优点：节省了大量内存</li><li>缺点：新生代回收时间略微增加，导致略微多占用CPU</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// char[]{'h','e','l','l','o'}</span><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// char[]{'h','e','l','l','o'}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>相关参数：<code>-XX:+UseStringDeduplication</code></li><li>将所有新分配的字符串（底层是char[]）放入一个队列</li><li>当新生代回收时，G1并发检查是否有重复的字符串</li><li>如果字符串的值一样，就让他们<code>引用同一个字符串对象</code></li><li>注意，其与<code>String.intern()</code>不一样<ul><li><code>String.intern()</code>关注的是字符串对象</li><li>字符串去重关注的是char[]</li><li>在JVM内部，使用了不同的字符串表</li></ul></li></ul><h4 id="JDK-8u40-并发标记类卸载"><a href="#JDK-8u40-并发标记类卸载" class="headerlink" title="JDK 8u40 并发标记类卸载"></a>JDK 8u40 并发标记类卸载</h4><p>所有对象在并发标记阶段结束以后，就能知道哪些类不再被使用。<strong>如果一个类加载器的所有类都不再使用，则卸载它所加载的所有类</strong> </p><p> <code>-XX:+ClassUnloadingWithConcurrentMark</code> <strong>默认启用</strong></p><h4 id="JDK-8u60-回收巨型对象"><a href="#JDK-8u60-回收巨型对象" class="headerlink" title="JDK 8u60 回收巨型对象"></a>JDK 8u60 回收巨型对象</h4><ul><li><p>一个对象大于region的一半时，就称为巨型对象</p></li><li><p>G1<code>不会对巨型对象进行拷贝</code></p></li><li><p><strong>回收时被优先考虑</strong></p></li><li><p>G1会跟踪老年代所有incoming引用，如果<strong>老年代incoming引用为0的巨型对象就可以在新生代垃圾回收时处理掉</strong></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm34.png"></p></li></ul><h3 id="GC调优"><a href="#GC调优" class="headerlink" title="GC调优"></a>GC调优</h3><p>查看虚拟机参数命令</p><pre class="line-numbers language-none"><code class="language-none">"F:\JAVA\JDK8.0\bin\java" -XX:+PrintFlagsFinal -version | findstr "GC"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以根据参数去查询具体的信息</p><h4 id="调优领域"><a href="#调优领域" class="headerlink" title="调优领域"></a>调优领域</h4><ul><li>内存</li><li>锁竞争</li><li>CPU占用</li><li>IO</li><li>GC</li></ul><h4 id="确定目标"><a href="#确定目标" class="headerlink" title="确定目标"></a>确定目标</h4><blockquote><p>低延迟/高吞吐量？ 选择合适的GC</p></blockquote><ul><li>CMS G1 ZGC</li><li>ParallelGC</li><li>Zing</li></ul><h4 id="最快的GC是不发生GC"><a href="#最快的GC是不发生GC" class="headerlink" title="最快的GC是不发生GC"></a>最快的GC是不发生GC</h4><p>首先排除减少因为自身编写的代码而引发的内存问题</p><ul><li>查看Full GC前后的内存占用，考虑以下几个问题<ul><li>数据是不是太多？</li><li>数据表示是否太臃肿<ul><li>对象图</li><li>对象大小</li></ul></li><li>是否存在内存泄漏</li></ul></li></ul><h4 id="新生代调优"><a href="#新生代调优" class="headerlink" title="新生代调优"></a>新生代调优</h4><ul><li><p>新生代的特点</p><ul><li>所有的new操作分配内存都是非常廉价的<ul><li>TLAB thread-local allocation buffer</li></ul></li><li>死亡对象的回收代价是零</li><li>大部分对象用过即死（朝生夕死）</li><li>Minor GC 所用时间远远小于 Full GC</li></ul></li><li><p>新生代内存越大越好么？</p><blockquote><p>不是</p></blockquote><ul><li><p><strong>新生代内存太小：频繁触发Minor GC，会STW，会使得吞吐量下降</strong></p></li><li><p><strong>新生代内存太大</strong>：<strong>老年代内存占比有所降低，会更频繁地触发Full GC</strong>。而且触发Minor GC时，清理新生代所花费的时间会更长</p></li><li><p>*<em>新生代内存设置为能容纳[并发量</em>(请求-响应)]的数据为宜**</p></li></ul></li></ul><h4 id="幸存区调优"><a href="#幸存区调优" class="headerlink" title="幸存区调优"></a>幸存区调优</h4><ul><li>幸存区需要能够保存 【<strong>当前活跃对象</strong>+<strong>需要晋升的对象】</strong></li><li>晋升阈值配置得当，让<code>长时间存活的对象尽快晋升</code></li></ul><h4 id="老年代调优"><a href="#老年代调优" class="headerlink" title="老年代调优"></a>老年代调优</h4><blockquote><p>可以先尝试调优新生代</p></blockquote><hr><h1 id="类加载与字节码技术"><a href="#类加载与字节码技术" class="headerlink" title="类加载与字节码技术"></a>类加载与字节码技术</h1><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm35.png"></p><h2 id="类文件结构"><a href="#类文件结构" class="headerlink" title="类文件结构"></a>类文件结构</h2><blockquote><p>一个简单的 HelloWorld.java</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// HelloWorld 示例</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>javac -parameters -d . HellowWorld.java</code> 编译为 HelloWorld.class 后是这个样子的：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">0000000 ca fe ba be 00 00 00 <span class="token number">34</span> 00 <span class="token number">23</span> 0a 00 06 00 <span class="token number">15</span> 09 0000020 00 <span class="token number">16</span> 00 <span class="token number">17</span> 08 00 <span class="token number">18</span> 0a 00 <span class="token number">19</span> 00 1a 07 00 1b 07 0000040 00 1c 01 00 06 3c <span class="token number">69</span> 6e <span class="token number">69</span> <span class="token number">74</span> 3e 01 00 03 <span class="token number">28</span> <span class="token number">29</span> 0000060 <span class="token number">56</span> 01 00 04 <span class="token number">43</span> 6f <span class="token number">64</span> <span class="token number">65</span> 01 00 0f 4c <span class="token number">69</span> 6e <span class="token number">65</span> 4e 0000100 <span class="token number">75</span> 6d <span class="token number">62</span> <span class="token number">65</span> <span class="token number">72</span> <span class="token number">54</span> <span class="token number">61</span> <span class="token number">62</span> 6c <span class="token number">65</span> 01 00 <span class="token number">12</span> 4c 6f <span class="token number">63</span> 0000120 <span class="token number">61</span> 6c <span class="token number">56</span> <span class="token number">61</span> <span class="token number">72</span> <span class="token number">69</span> <span class="token number">61</span> <span class="token number">62</span> 6c <span class="token number">65</span> <span class="token number">54</span> <span class="token number">61</span> <span class="token number">62</span> 6c <span class="token number">65</span> 01 0000140 00 04 <span class="token number">74</span> <span class="token number">68</span> <span class="token number">69</span> <span class="token number">73</span> 01 00 1d 4c <span class="token number">63</span> 6e 2f <span class="token number">69</span> <span class="token number">74</span> <span class="token number">63</span> 0000160 <span class="token number">61</span> <span class="token number">73</span> <span class="token number">74</span> 2f 6a <span class="token number">76</span> 6d 2f <span class="token number">74</span> <span class="token number">35</span> 2f <span class="token number">48</span> <span class="token number">65</span> 6c 6c 6f 0000200 <span class="token number">57</span> 6f <span class="token number">72</span> 6c <span class="token number">64</span> 3b 01 00 04 6d <span class="token number">61</span> <span class="token number">69</span> 6e 01 00 <span class="token number">16</span> 0000220 <span class="token number">28</span> 5b 4c 6a <span class="token number">61</span> <span class="token number">76</span> <span class="token number">61</span> 2f 6c <span class="token number">61</span> 6e <span class="token number">67</span> 2f <span class="token number">53</span> <span class="token number">74</span> <span class="token number">72</span> 0000240 <span class="token number">69</span> 6e <span class="token number">67</span> 3b <span class="token number">29</span> <span class="token number">56</span> 01 00 04 <span class="token number">61</span> <span class="token number">72</span> <span class="token number">67</span> <span class="token number">73</span> 01 00 <span class="token number">13</span> 0000260 5b 4c 6a <span class="token number">61</span> <span class="token number">76</span> <span class="token number">61</span> 2f 6c <span class="token number">61</span> 6e <span class="token number">67</span> 2f <span class="token number">53</span> <span class="token number">74</span> <span class="token number">72</span> <span class="token number">69</span> 0000300 6e <span class="token number">67</span> 3b 01 00 <span class="token number">10</span> 4d <span class="token number">65</span> <span class="token number">74</span> <span class="token number">68</span> 6f <span class="token number">64</span> <span class="token number">50</span> <span class="token number">61</span> <span class="token number">72</span> <span class="token number">61</span> 0000320 6d <span class="token number">65</span> <span class="token number">74</span> <span class="token number">65</span> <span class="token number">72</span> <span class="token number">73</span> 01 00 0a <span class="token number">53</span> 6f <span class="token number">75</span> <span class="token number">72</span> <span class="token number">63</span> <span class="token number">65</span> <span class="token number">46</span> 0000340 <span class="token number">69</span> 6c <span class="token number">65</span> 01 00 0f <span class="token number">48</span> <span class="token number">65</span> 6c 6c 6f <span class="token number">57</span> 6f <span class="token number">72</span> 6c <span class="token number">64</span>0000360 2e 6a <span class="token number">61</span> <span class="token number">76</span> <span class="token number">61</span> 0c 00 07 00 08 07 00 1d 0c 00 1e 0000400 00 1f 01 00 0b <span class="token number">68</span> <span class="token number">65</span> 6c 6c 6f <span class="token number">20</span> <span class="token number">77</span> 6f <span class="token number">72</span> 6c <span class="token number">64</span> 0000420 07 00 <span class="token number">20</span> 0c 00 <span class="token number">21</span> 00 <span class="token number">22</span> 01 00 1b <span class="token number">63</span> 6e 2f <span class="token number">69</span> <span class="token number">74</span> 0000440 <span class="token number">63</span> <span class="token number">61</span> <span class="token number">73</span> <span class="token number">74</span> 2f 6a <span class="token number">76</span> 6d 2f <span class="token number">74</span> <span class="token number">35</span> 2f <span class="token number">48</span> <span class="token number">65</span> 6c 6c 0000460 6f <span class="token number">57</span> 6f <span class="token number">72</span> 6c <span class="token number">64</span> 01 00 <span class="token number">10</span> 6a <span class="token number">61</span> <span class="token number">76</span> <span class="token number">61</span> 2f 6c <span class="token number">61</span> 0000500 6e <span class="token number">67</span> 2f 4f <span class="token number">62</span> 6a <span class="token number">65</span> <span class="token number">63</span> <span class="token number">74</span> 01 00 <span class="token number">10</span> 6a <span class="token number">61</span> <span class="token number">76</span> <span class="token number">61</span> 0000520 2f 6c <span class="token number">61</span> 6e <span class="token number">67</span> 2f <span class="token number">53</span> <span class="token number">79</span> <span class="token number">73</span> <span class="token number">74</span> <span class="token number">65</span> 6d 01 00 03 6f 0000540 <span class="token number">75</span> <span class="token number">74</span> 01 00 <span class="token number">15</span> 4c 6a <span class="token number">61</span> <span class="token number">76</span> <span class="token number">61</span> 2f <span class="token number">69</span> 6f 2f <span class="token number">50</span> <span class="token number">72</span> 0000560 <span class="token number">69</span> 6e <span class="token number">74</span> <span class="token number">53</span> <span class="token number">74</span> <span class="token number">72</span> <span class="token number">65</span> <span class="token number">61</span> 6d 3b 01 00 <span class="token number">13</span> 6a <span class="token number">61</span> <span class="token number">76</span> 0000600 <span class="token number">61</span> 2f <span class="token number">69</span> 6f 2f <span class="token number">50</span> <span class="token number">72</span> <span class="token number">69</span> 6e <span class="token number">74</span> <span class="token number">53</span> <span class="token number">74</span> <span class="token number">72</span> <span class="token number">65</span> <span class="token number">61</span> 6d 0000620 01 00 07 <span class="token number">70</span> <span class="token number">72</span> <span class="token number">69</span> 6e <span class="token number">74</span> 6c 6e 01 00 <span class="token number">15</span> <span class="token number">28</span> 4c 6a 0000640 <span class="token number">61</span> <span class="token number">76</span> <span class="token number">61</span> 2f 6c <span class="token number">61</span> 6e <span class="token number">67</span> 2f <span class="token number">53</span> <span class="token number">74</span> <span class="token number">72</span> <span class="token number">69</span> 6e <span class="token number">67</span> 3b 0000660 <span class="token number">29</span> <span class="token number">56</span> 00 <span class="token number">21</span> 00 05 00 06 00 00 00 00 00 02 00 01 0000700 00 07 00 08 00 01 00 09 00 00 00 2f 00 01 00 01 0000720 00 00 00 05 2a b7 00 01 b1 00 00 00 02 00 0a 00 0000740 00 00 06 00 01 00 00 00 04 00 0b 00 00 00 0c 00 0000760 01 00 00 00 05 00 0c 00 0d 00 00 00 09 00 0e 00 0001000 0f 00 02 00 09 00 00 00 <span class="token number">37</span> 00 02 00 01 00 00 00 0001020 09 b2 00 02 <span class="token number">12</span> 03 b6 00 04 b1 00 00 00 02 00 0a 0001040 00 00 00 0a 00 02 00 00 00 06 00 08 00 07 00 0b 0001060 00 00 00 0c 00 01 00 00 00 09 00 <span class="token number">10</span> 00 <span class="token number">11</span> 00 00 0001100 00 <span class="token number">12</span> 00 00 00 05 01 00 <span class="token number">10</span> 00 00 00 01 00 <span class="token number">13</span> 00 0001120 00 00 02 00 <span class="token number">14</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据 JVM 规范，<code>类文件结构</code>如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">u4  magicu2             minor_version<span class="token punctuation">;</span>    u2             major_version<span class="token punctuation">;</span>    u2             constant_pool_count<span class="token punctuation">;</span>    cp_info        constant_pool<span class="token punctuation">[</span>constant_pool_count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    u2             access_flags<span class="token punctuation">;</span>    u2             this_class<span class="token punctuation">;</span>    u2             super_class<span class="token punctuation">;</span>   u2             interfaces_count<span class="token punctuation">;</span>    u2             interfaces<span class="token punctuation">[</span>interfaces_count<span class="token punctuation">]</span><span class="token punctuation">;</span>   u2             fields_count<span class="token punctuation">;</span>    field_info     fields<span class="token punctuation">[</span>fields_count<span class="token punctuation">]</span><span class="token punctuation">;</span>   u2             methods_count<span class="token punctuation">;</span>    method_info    methods<span class="token punctuation">[</span>methods_count<span class="token punctuation">]</span><span class="token punctuation">;</span>    u2             attributes_count<span class="token punctuation">;</span>    attribute_info attributes<span class="token punctuation">[</span>attributes_count<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="魔数"><a href="#魔数" class="headerlink" title="魔数"></a>魔数</h3><p>对应字节码文件的0~3 字节，表示它是否是【class】类型的文件 </p><p>0000000 <font color="red"><strong>ca fe ba be</strong> </font>00 00 00 34 00 23 0a 00 06 00 15 09</p><h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><p>对应字节码文件的4~7 字节，表示类的版本 00 34（52） 表示是 Java 8 </p><p>0000000 ca fe ba be <font color="red"><strong>00 00 00 34</strong></font> 00 23 0a 00 06 00 15 09</p><h3 id="常量池-1"><a href="#常量池-1" class="headerlink" title="常量池"></a>常量池</h3><table><thead><tr><th align="center">常量表类型</th><th align="center">标志值(占 1byte)</th></tr></thead><tbody><tr><td align="center">CONSTANT_Class</td><td align="center">7</td></tr><tr><td align="center">CONSTANT_Fieldref</td><td align="center">9</td></tr><tr><td align="center">CONSTANT_Methodref</td><td align="center">10</td></tr><tr><td align="center">CONSTANT_InterfaceMethodref</td><td align="center">11</td></tr><tr><td align="center">CONSTANT_String</td><td align="center">8</td></tr><tr><td align="center">CONSTANT_Integer</td><td align="center">3</td></tr><tr><td align="center">CONSTANT_Float</td><td align="center">4</td></tr><tr><td align="center">CONSTANT_Long</td><td align="center">5</td></tr><tr><td align="center">CONSTANT_Double</td><td align="center">6</td></tr><tr><td align="center">CONSTANT_NameAndType</td><td align="center">12</td></tr><tr><td align="center">CONSTANT_Utf8</td><td align="center">1</td></tr><tr><td align="center">CONSTANT_MethodHandle</td><td align="center">15</td></tr><tr><td align="center">CONSTANT_MethodType</td><td align="center">16</td></tr><tr><td align="center">CONSTANT_InvokeDynamic</td><td align="center">18</td></tr></tbody></table><p>具体请参考</p><p><a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html">Chapter 4. The class File Format (oracle.com)</a></p><h2 id="字节码指令"><a href="#字节码指令" class="headerlink" title="字节码指令"></a>字节码指令</h2><blockquote><p>具体请参考</p></blockquote><p><a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-6.html#jvms-6.5">Chapter 6. The Java Virtual Machine Instruction Set (oracle.com)</a></p><h3 id="javap工具"><a href="#javap工具" class="headerlink" title="javap工具"></a>javap工具</h3><p>自己分析类文件结构太麻烦了，Oracle 提供了 <code>javap 工具来反编译 class 文件</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">javap <span class="token operator">-</span>v 文件名<span class="token punctuation">.</span><span class="token keyword">class</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">e<span class="token operator">:</span>\study<span class="token operator">&gt;</span>javap <span class="token operator">-</span>v e<span class="token operator">:</span>\studysrc\<span class="token class-name">Demo1</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token class-name">Classfile</span> <span class="token operator">/</span>e<span class="token operator">:</span>\studysrc\<span class="token class-name">Demo1</span><span class="token punctuation">.</span><span class="token keyword">class</span>  <span class="token class-name">Last</span> modified <span class="token number">2020</span><span class="token operator">-</span><span class="token number">6</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">;</span> size <span class="token number">434</span> bytes  MD5 checksum df1dce65bf6fb0b4c1de318051f4a67e  <span class="token class-name">Compiled</span> from <span class="token string">"Demo1.java"</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span>  minor version<span class="token operator">:</span> <span class="token number">0</span>  major version<span class="token operator">:</span> <span class="token number">52</span>  flags<span class="token operator">:</span> ACC_PUBLIC<span class="token punctuation">,</span> ACC_SUPER<span class="token class-name">Constant</span> pool<span class="token operator">:</span>   #<span class="token number">1</span> <span class="token operator">=</span> <span class="token class-name">Methodref</span>          #<span class="token number">6.</span>#<span class="token number">15</span>         <span class="token comment">// java/lang/Object."&lt;init&gt;":()V</span>   #<span class="token number">2</span> <span class="token operator">=</span> <span class="token class-name">Fieldref</span>           #<span class="token number">16.</span>#<span class="token number">17</span>        <span class="token comment">// java/lang/System.out:Ljava/io/PrintStream;</span>   #<span class="token number">3</span> <span class="token operator">=</span> <span class="token class-name">String</span>             #<span class="token number">18</span>            <span class="token comment">// hello world</span>   #<span class="token number">4</span> <span class="token operator">=</span> <span class="token class-name">Methodref</span>          #<span class="token number">19.</span>#<span class="token number">20</span>        <span class="token comment">// java/io/PrintStream.println:(Ljava/lang/String;)V</span>   #<span class="token number">5</span> <span class="token operator">=</span> <span class="token class-name">Class</span>              #<span class="token number">21</span>            <span class="token comment">// com/nyima/JVM/day5/Demo1</span>   #<span class="token number">6</span> <span class="token operator">=</span> <span class="token class-name">Class</span>              #<span class="token number">22</span>            <span class="token comment">// java/lang/Object</span>   #<span class="token number">7</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token generics"><span class="token punctuation">&lt;</span>init<span class="token punctuation">&gt;</span></span>   #<span class="token number">8</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span>   #<span class="token number">9</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">Code</span>  #<span class="token number">10</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">LineNumberTable</span>  #<span class="token number">11</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               main  #<span class="token number">12</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span>  #<span class="token number">13</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">SourceFile</span>  #<span class="token number">14</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">Demo1</span><span class="token punctuation">.</span>java  #<span class="token number">15</span> <span class="token operator">=</span> <span class="token class-name">NameAndType</span>        #<span class="token number">7</span><span class="token operator">:</span>#<span class="token number">8</span>          <span class="token comment">// "&lt;init&gt;":()V</span>  #<span class="token number">16</span> <span class="token operator">=</span> <span class="token class-name">Class</span>              #<span class="token number">23</span>            <span class="token comment">// java/lang/System</span>  #<span class="token number">17</span> <span class="token operator">=</span> <span class="token class-name">NameAndType</span>        #<span class="token number">24</span><span class="token operator">:</span>#<span class="token number">25</span>        <span class="token comment">// out:Ljava/io/PrintStream;</span>  #<span class="token number">18</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               hello world  #<span class="token number">19</span> <span class="token operator">=</span> <span class="token class-name">Class</span>              #<span class="token number">26</span>            <span class="token comment">// java/io/PrintStream</span>  #<span class="token number">20</span> <span class="token operator">=</span> <span class="token class-name">NameAndType</span>        #<span class="token number">27</span><span class="token operator">:</span>#<span class="token number">28</span>        <span class="token comment">// println:(Ljava/lang/String;)V</span>  #<span class="token number">21</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               com<span class="token operator">/</span>nyima<span class="token operator">/</span>JVM<span class="token operator">/</span>day5<span class="token operator">/</span><span class="token class-name">Demo1</span>  #<span class="token number">22</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Object</span>  #<span class="token number">23</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">System</span>  #<span class="token number">24</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               out  #<span class="token number">25</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">Ljava</span><span class="token operator">/</span>io<span class="token operator">/</span><span class="token class-name">PrintStream</span><span class="token punctuation">;</span>  #<span class="token number">26</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               java<span class="token operator">/</span>io<span class="token operator">/</span><span class="token class-name">PrintStream</span>  #<span class="token number">27</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               println  #<span class="token number">28</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token punctuation">(</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token class-name">Demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    descriptor<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span>    flags<span class="token operator">:</span> ACC_PUBLIC    <span class="token class-name">Code</span><span class="token operator">:</span>      stack<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span>         <span class="token number">0</span><span class="token operator">:</span> aload_0         <span class="token number">1</span><span class="token operator">:</span> invokespecial #<span class="token number">1</span>                  <span class="token comment">// Method java/lang/Object."&lt;init&gt;":()V</span>         <span class="token number">4</span><span class="token operator">:</span> <span class="token keyword">return</span>      <span class="token class-name">LineNumberTable</span><span class="token operator">:</span>        line <span class="token number">7</span><span class="token operator">:</span> <span class="token number">0</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    descriptor<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span>    flags<span class="token operator">:</span> ACC_PUBLIC<span class="token punctuation">,</span> ACC_STATIC    <span class="token class-name">Code</span><span class="token operator">:</span>      stack<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span>         <span class="token number">0</span><span class="token operator">:</span> getstatic     #<span class="token number">2</span>                  <span class="token comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span>         <span class="token number">3</span><span class="token operator">:</span> ldc           #<span class="token number">3</span>                  <span class="token comment">// String hello world</span>         <span class="token number">5</span><span class="token operator">:</span> invokevirtual #<span class="token number">4</span>                  <span class="token comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span>         <span class="token number">8</span><span class="token operator">:</span> <span class="token keyword">return</span>      <span class="token class-name">LineNumberTable</span><span class="token operator">:</span>        line <span class="token number">9</span><span class="token operator">:</span> <span class="token number">0</span>        line <span class="token number">10</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="图解方法执行流程"><a href="#图解方法执行流程" class="headerlink" title="图解方法执行流程"></a>图解方法执行流程</h3><h4 id="原始java代码"><a href="#原始java代码" class="headerlink" title="原始java代码"></a>原始java代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo3_1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token class-name">Short</span><span class="token punctuation">.</span>MAX_VALUE <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="编译成字节码文件"><a href="#编译成字节码文件" class="headerlink" title="编译成字节码文件"></a>编译成字节码文件</h4><blockquote><p>javap -v Demo3_1.class</p></blockquote><h4 id="常量池载入运行时常量池"><a href="#常量池载入运行时常量池" class="headerlink" title="常量池载入运行时常量池"></a>常量池载入运行时常量池</h4><blockquote><p>常量池也<code>属于方法区</code>，只不过这里单独提出来了</p></blockquote><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm36.png"></p><h4 id="方法字节码载入方法区"><a href="#方法字节码载入方法区" class="headerlink" title="方法字节码载入方法区"></a>方法字节码载入方法区</h4><blockquote><p>（stack=2，locals=4） 对应操作数栈有2个空间（<code>每个空间4个字节</code>），局部变量表中有4个槽位</p></blockquote><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm37.png"></p><h4 id="执行引擎开始执行字节码"><a href="#执行引擎开始执行字节码" class="headerlink" title="执行引擎开始执行字节码"></a>执行引擎开始执行字节码</h4><p><strong>bipush 10</strong></p><ul><li><code>将一个 byte 压入操作数栈</code>（其长度会补齐 4 个字节），类似的指令还有<ul><li>sipush 将一个 short 压入操作数栈（其长度会补齐 4 个字节）</li><li>ldc 将一个 int 压入操作数栈</li><li>ldc2_w 将一个 long 压入操作数栈（<code>分两次压入</code>，因为 long 是 8 个字节）</li><li>这里小的数字都是和字节码指令存在一起，<code>超过 short 范围的数字存入了常量池</code></li></ul></li></ul><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm38.png"></p><p><strong>istore 1</strong></p><ul><li><p>将操作数栈<code>栈顶元素弹出</code>，放入局部变量表的<code>slot 1</code>中</p></li><li><p>对应代码中的</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">a <span class="token operator">=</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm39.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm40.png"></p><p><strong>ldc #3</strong></p><ul><li><p>读取运行时常量池中#3，即32768(超过short最大值范围的数会被放到运行时常量池中)，将其加载到操作数栈中</p></li><li><p>注意 Short.MAX_VALUE 是 32767，所以 32768 = Short.MAX_VALUE + 1 实际是在编译期间计算好的</p></li></ul><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm41.png"></p><p><strong>istore 2</strong></p><ul><li>将操作数栈中的<code>元素弹出</code>，放到局部变量表的<code>2号位置</code></li></ul><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm42.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm43.png"></p><p><strong>iload1 iload2</strong></p><p>将局部变量表中1号位置和2号位置的元素<code>放入操作数栈</code>中</p><ul><li>因为只能在操作数栈中执行运算操作</li></ul><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm44.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm45.png"></p><p><strong>iadd</strong></p><ul><li>将操作数栈中的两个元素<code>弹出栈</code>并<code>相加</code>，结果在<code>压入操作数栈</code>中</li></ul><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm46.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm47.png"></p><p><strong>istore 3</strong></p><ul><li>将操作数栈中的<code>元素弹出</code>，放入局部变量表的<code>3号位置</code></li></ul><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm48.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm49.png"></p><p><strong>getstatic #4</strong></p><ul><li><p>在运行时常量池中找到#4，发现是一个对象</p></li><li><p>在堆内存中找到该对象，并将其<code>引用</code>放入操作数栈中</p></li></ul><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm50.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm51.png"></p><p><strong>iload 3</strong></p><ul><li>将局部变量表中3号位置的元素压入操作数栈中</li></ul><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm52.png"></p><p><strong>invokevirtual 5</strong></p><ul><li><p>找到常量池 #5 项</p></li><li><p>定位到方法区 java/io/PrintStream.println:(I)V 方法</p></li><li><p>生成<code>新的栈帧</code>（分配 locals、stack等）</p></li><li><p>传递参数，执行新栈帧中的字节码</p></li></ul><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm53.png"></p><ul><li><p>执行完毕，弹出栈帧</p></li><li><p>清除 main 操作数栈内容</p></li></ul><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm54.png"></p><p><strong>return</strong></p><ul><li>完成 main 方法调用，弹出 main 栈帧</li><li>程序结束</li></ul><h3 id="通过字节码指令来分析问题"><a href="#通过字节码指令来分析问题" class="headerlink" title="通过字节码指令来分析问题"></a>通过字节码指令来分析问题</h3><h4 id="原始的java代码"><a href="#原始的java代码" class="headerlink" title="原始的java代码"></a>原始的java代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>x <span class="token operator">=</span> x<span class="token operator">++</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//接过为0</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么最终的x结果为0呢？ 通过<code>分析字节码指令</code>即可知晓</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Code</span><span class="token operator">:</span>     stack<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span><span class="token comment">//操作数栈分配2个空间，局部变量表分配3个空间</span>        <span class="token number">0</span><span class="token operator">:</span> iconst_0<span class="token comment">//准备一个常数0</span>        <span class="token number">1</span><span class="token operator">:</span> istore_1<span class="token comment">//将常数0放入局部变量表的1号槽位 i=0</span>        <span class="token number">2</span><span class="token operator">:</span> iconst_0<span class="token comment">//准备一个常数0</span>        <span class="token number">3</span><span class="token operator">:</span> istore_2<span class="token comment">//将常数0放入局部变量的2号槽位 x=0</span>        <span class="token number">4</span><span class="token operator">:</span> iload_1<span class="token comment">//将局部变量表1号槽位的数放入操作数栈中</span>        <span class="token number">5</span><span class="token operator">:</span> bipush        <span class="token number">10</span><span class="token comment">//将数字10放入操作数栈中，此时操作数栈中有2个数</span>        <span class="token number">7</span><span class="token operator">:</span> if_icmpge     <span class="token number">21</span><span class="token comment">//比较操作数栈中的两个数，如果下面的数大于上面的数，就跳转到21。这里的比较是将两个数做减法。因为涉及运算操作，所以会将两个数弹出操作数栈来进行运算。运算结束后操作数栈为空</span>       <span class="token number">10</span><span class="token operator">:</span> iload_2<span class="token comment">//将局部变量2号槽位的数放入操作数栈中，放入的值是0</span>       <span class="token number">11</span><span class="token operator">:</span> iinc          <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token comment">//将局部变量2号槽位的数加1，自增后，槽位中的值为1</span>       <span class="token number">14</span><span class="token operator">:</span> istore_2<span class="token comment">//将操作数栈中的数放入到局部变量表的2号槽位，2号槽位的值又变为了0</span>       <span class="token number">15</span><span class="token operator">:</span> iinc          <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment">//1号槽位的值自增1</span>       <span class="token number">18</span><span class="token operator">:</span> <span class="token keyword">goto</span>          <span class="token number">4</span> <span class="token comment">//跳转到第4条指令</span>       <span class="token number">21</span><span class="token operator">:</span> getstatic     #<span class="token number">2</span>                  <span class="token comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span>       <span class="token number">24</span><span class="token operator">:</span> iload_2       <span class="token number">25</span><span class="token operator">:</span> invokevirtual #<span class="token number">3</span>                  <span class="token comment">// Method java/io/PrintStream.println:(I)V</span>       <span class="token number">28</span><span class="token operator">:</span> <span class="token keyword">return</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><h4 id="cinit-V"><a href="#cinit-V" class="headerlink" title="cinit()V"></a>cinit()V</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo3</span> <span class="token punctuation">{</span><span class="token keyword">static</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token punctuation">{</span>i <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token punctuation">{</span>i <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//结果为30</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译器会按<code>从上至下</code>的顺序，收集所有 <code>static 静态代码块和静态成员赋值的代码</code>，<code>合并</code>为一个特殊的方法 <code>cinit()V</code> ：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">stack<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">0</span>         <span class="token number">0</span><span class="token operator">:</span> bipush        <span class="token number">10</span>         <span class="token number">2</span><span class="token operator">:</span> putstatic     #<span class="token number">3</span>                  <span class="token comment">// Field i:I</span>         <span class="token number">5</span><span class="token operator">:</span> bipush        <span class="token number">20</span>         <span class="token number">7</span><span class="token operator">:</span> putstatic     #<span class="token number">3</span>                  <span class="token comment">// Field i:I</span>        <span class="token number">10</span><span class="token operator">:</span> bipush        <span class="token number">30</span>        <span class="token number">12</span><span class="token operator">:</span> putstatic     #<span class="token number">3</span>                  <span class="token comment">// Field i:I</span>        <span class="token number">15</span><span class="token operator">:</span> <span class="token keyword">return</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="init-V"><a href="#init-V" class="headerlink" title="init()V"></a>init()V</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo4</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token string">"s1"</span><span class="token punctuation">;</span><span class="token punctuation">{</span>b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">{</span>a <span class="token operator">=</span> <span class="token string">"s2"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Demo4</span><span class="token punctuation">(</span><span class="token class-name">String</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Demo4</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo4</span><span class="token punctuation">(</span><span class="token string">"s3"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译器会按<code>从上至下</code>的顺序，收集<code>所有 {} 代码块和成员变量赋值的代码</code>，<code>形成新的构造方法</code>，但<code>原始构造方法</code>内的代码<code>总是在最后</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Code</span><span class="token operator">:</span>     stack<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">3</span>        <span class="token number">0</span><span class="token operator">:</span> aload_0        <span class="token number">1</span><span class="token operator">:</span> invokespecial #<span class="token number">1</span>                  <span class="token comment">// Method java/lang/Object."&lt;init&gt;":()V</span>        <span class="token number">4</span><span class="token operator">:</span> aload_0        <span class="token number">5</span><span class="token operator">:</span> ldc           #<span class="token number">2</span>                  <span class="token comment">// String s1</span>        <span class="token number">7</span><span class="token operator">:</span> putfield      #<span class="token number">3</span>                  <span class="token comment">// Field a:Ljava/lang/String;</span>       <span class="token number">10</span><span class="token operator">:</span> aload_0       <span class="token number">11</span><span class="token operator">:</span> bipush        <span class="token number">20</span>       <span class="token number">13</span><span class="token operator">:</span> putfield      #<span class="token number">4</span>                  <span class="token comment">// Field b:I</span>       <span class="token number">16</span><span class="token operator">:</span> aload_0       <span class="token number">17</span><span class="token operator">:</span> bipush        <span class="token number">10</span>       <span class="token number">19</span><span class="token operator">:</span> putfield      #<span class="token number">4</span>                  <span class="token comment">// Field b:I</span>       <span class="token number">22</span><span class="token operator">:</span> aload_0       <span class="token number">23</span><span class="token operator">:</span> ldc           #<span class="token number">5</span>                  <span class="token comment">// String s2</span>       <span class="token number">25</span><span class="token operator">:</span> putfield      #<span class="token number">3</span>                  <span class="token comment">// Field a:Ljava/lang/String;</span>       <span class="token comment">//原始构造方法在最后执行</span>       <span class="token number">28</span><span class="token operator">:</span> aload_0       <span class="token number">29</span><span class="token operator">:</span> aload_1       <span class="token number">30</span><span class="token operator">:</span> putfield      #<span class="token number">3</span>                  <span class="token comment">// Field a:Ljava/lang/String;</span>       <span class="token number">33</span><span class="token operator">:</span> aload_0       <span class="token number">34</span><span class="token operator">:</span> iload_2       <span class="token number">35</span><span class="token operator">:</span> putfield      #<span class="token number">4</span>                  <span class="token comment">// Field b:I</span>       <span class="token number">38</span><span class="token operator">:</span> <span class="token keyword">return</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo5</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token class-name">Demo5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Demo5</span> demo5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>demo5<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>demo5<span class="token punctuation">.</span><span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>demo5<span class="token punctuation">.</span><span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Demo5</span><span class="token punctuation">.</span><span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不同方法在调用时，对应的虚拟机指令有所区别</p><ul><li><code>私有</code>、<code>构造</code>、<code>被final修饰的方法</code>，在调用时都使用<code>invokespecial</code>指令</li><li><code>普通成员</code>方法在调用时，使用<code>invokevirtua</code>指令。因为编译期间无法确定该方法的内容，只有在运行期间才能确定</li><li><code>静态方法</code>在调用时使用<code>invokestatic</code>指令</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Code</span><span class="token operator">:</span>      stack<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span>         <span class="token number">0</span><span class="token operator">:</span> <span class="token keyword">new</span>           #<span class="token number">2</span>                  <span class="token comment">// class com/nyima/JVM/day5/Demo5 </span>         <span class="token number">3</span><span class="token operator">:</span> dup         <span class="token number">4</span><span class="token operator">:</span> invokespecial #<span class="token number">3</span>                  <span class="token comment">// Method "&lt;init&gt;":()V</span>         <span class="token number">7</span><span class="token operator">:</span> astore_1         <span class="token number">8</span><span class="token operator">:</span> aload_1         <span class="token number">9</span><span class="token operator">:</span> invokespecial #<span class="token number">4</span>                  <span class="token comment">// Method test1:()V</span>        <span class="token number">12</span><span class="token operator">:</span> aload_1        <span class="token number">13</span><span class="token operator">:</span> invokespecial #<span class="token number">5</span>                  <span class="token comment">// Method test2:()V</span>        <span class="token number">16</span><span class="token operator">:</span> aload_1        <span class="token number">17</span><span class="token operator">:</span> invokevirtual #<span class="token number">6</span>                  <span class="token comment">// Method test3:()V</span>        <span class="token number">20</span><span class="token operator">:</span> invokestatic  #<span class="token number">7</span>                  <span class="token comment">// Method test4:()V</span>        <span class="token number">23</span><span class="token operator">:</span> <span class="token keyword">return</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>new 是创建【对象】，给对象<code>分配堆内存</code>，执行成功会将【<strong>对象引用</strong>】<code>压入操作数栈</code></li><li>dup 是赋值操作数栈栈顶的内容，本例即为【<strong>对象引用</strong>】，为什么需要两份引用呢，一个是要配合 invokespecial 调用该对象的构造方法 “init”:()V （会消耗掉栈顶一个引用），另一个要 配合 astore_1 赋值给局部变量</li><li>最终方法（ﬁnal），私有方法（private），构造方法都是由 invokespecial 指令来调用，属于静态绑定</li><li>普通成员方法是由 invokevirtual 调用，属于<strong>动态绑定</strong>，即支持多态 </li><li>成员方法与静态方法调用的另一个区别是，执行方法前是否需要【对象引用】</li></ul><h3 id="多态的原理"><a href="#多态的原理" class="headerlink" title="多态的原理"></a>多态的原理</h3><p>因为普通成员方法需要在运行时才能确定具体的内容，所以虚拟机需要调用<strong>invokevirtual</strong>指令</p><p>在执行invokevirtual指令时，经历了以下几个步骤</p><ul><li>先通过栈帧中对象的引用找到对象</li><li>分析对象头，找到对象实际的Class</li><li>Class结构中有<strong>vtable</strong>，它在类加载的链接阶段就已经根据方法的重写规则生成好了</li><li>查询vtable找到方法的具体地址</li><li>执行方法的字节码</li></ul><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><h4 id="try-catch"><a href="#try-catch" class="headerlink" title="try-catch"></a>try-catch</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>i <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应的字节码指令:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Code</span><span class="token operator">:</span>     stack<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span>        <span class="token number">0</span><span class="token operator">:</span> iconst_0        <span class="token number">1</span><span class="token operator">:</span> istore_1        <span class="token number">2</span><span class="token operator">:</span> bipush        <span class="token number">10</span>        <span class="token number">4</span><span class="token operator">:</span> istore_1        <span class="token number">5</span><span class="token operator">:</span> <span class="token keyword">goto</span>          <span class="token number">12</span>        <span class="token number">8</span><span class="token operator">:</span> astore_2        <span class="token number">9</span><span class="token operator">:</span> bipush        <span class="token number">20</span>       <span class="token number">11</span><span class="token operator">:</span> istore_1       <span class="token number">12</span><span class="token operator">:</span> <span class="token keyword">return</span>     <span class="token comment">//多出来一个异常表</span>     <span class="token class-name">Exception</span> table<span class="token operator">:</span>        from    <span class="token keyword">to</span>  <span class="token namespace">target</span> type            <span class="token number">2</span>     <span class="token number">5</span>     <span class="token number">8</span>   <span class="token class-name">Class</span> java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Exception</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可以看到多出来一个 Exception table 的结构，[from, to) 是<code>前闭后开</code>（也就是检测2~4行）的检测范围，一旦这个范围内的字节码执行出现异常，则通过 type 匹配异常类型，如果一致，进入 target 所指示行号</li><li>8行的字节码指令 astore_2 是将异常对象引用存入局部变量表的2号位置</li></ul><h4 id="多个single-catch"><a href="#多个single-catch" class="headerlink" title="多个single-catch"></a>多个single-catch</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>i <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>i <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应的字节码指令:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Code</span><span class="token operator">:</span>     stack<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span>        <span class="token number">0</span><span class="token operator">:</span> iconst_0        <span class="token number">1</span><span class="token operator">:</span> istore_1        <span class="token number">2</span><span class="token operator">:</span> bipush        <span class="token number">10</span>        <span class="token number">4</span><span class="token operator">:</span> istore_1        <span class="token number">5</span><span class="token operator">:</span> <span class="token keyword">goto</span>          <span class="token number">19</span>        <span class="token number">8</span><span class="token operator">:</span> astore_2        <span class="token number">9</span><span class="token operator">:</span> bipush        <span class="token number">20</span>       <span class="token number">11</span><span class="token operator">:</span> istore_1       <span class="token number">12</span><span class="token operator">:</span> <span class="token keyword">goto</span>          <span class="token number">19</span>       <span class="token number">15</span><span class="token operator">:</span> astore_2       <span class="token number">16</span><span class="token operator">:</span> bipush        <span class="token number">30</span>       <span class="token number">18</span><span class="token operator">:</span> istore_1       <span class="token number">19</span><span class="token operator">:</span> <span class="token keyword">return</span>     <span class="token class-name">Exception</span> table<span class="token operator">:</span>        from    <span class="token keyword">to</span>  <span class="token namespace">target</span> type            <span class="token number">2</span>     <span class="token number">5</span>     <span class="token number">8</span>   <span class="token class-name">Class</span> java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">ArithmeticException</span>            <span class="token number">2</span>     <span class="token number">5</span>    <span class="token number">15</span>   <span class="token class-name">Class</span> java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Exception</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>因为异常出现时，<code>只能进入</code> Exception table 中<code>一个分支</code>，所以<code>局部变量表 slot 2</code> 位置<code>被共用</code></li></ul><h4 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>i <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>i <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应的字节码指令:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Code</span><span class="token operator">:</span>     stack<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span>        <span class="token number">0</span><span class="token operator">:</span> iconst_0        <span class="token number">1</span><span class="token operator">:</span> istore_1        <span class="token comment">//try块</span>        <span class="token number">2</span><span class="token operator">:</span> bipush        <span class="token number">10</span>        <span class="token number">4</span><span class="token operator">:</span> istore_1        <span class="token comment">//try块执行完后，会执行finally    </span>        <span class="token number">5</span><span class="token operator">:</span> bipush        <span class="token number">30</span>        <span class="token number">7</span><span class="token operator">:</span> istore_1        <span class="token number">8</span><span class="token operator">:</span> <span class="token keyword">goto</span>          <span class="token number">27</span>       <span class="token comment">//catch块     </span>       <span class="token number">11</span><span class="token operator">:</span> astore_2 <span class="token comment">//异常信息放入局部变量表的2号槽位</span>       <span class="token number">12</span><span class="token operator">:</span> bipush        <span class="token number">20</span>       <span class="token number">14</span><span class="token operator">:</span> istore_1       <span class="token comment">//catch块执行完后，会执行finally        </span>       <span class="token number">15</span><span class="token operator">:</span> bipush        <span class="token number">30</span>       <span class="token number">17</span><span class="token operator">:</span> istore_1       <span class="token number">18</span><span class="token operator">:</span> <span class="token keyword">goto</span>          <span class="token number">27</span>       <span class="token comment">//出现异常，但未被Exception捕获，会抛出其他异常，这时也需要执行finally块中的代码   </span>       <span class="token number">21</span><span class="token operator">:</span> astore_3       <span class="token number">22</span><span class="token operator">:</span> bipush        <span class="token number">30</span>       <span class="token number">24</span><span class="token operator">:</span> istore_1       <span class="token number">25</span><span class="token operator">:</span> aload_3       <span class="token number">26</span><span class="token operator">:</span> athrow  <span class="token comment">//抛出异常</span>       <span class="token number">27</span><span class="token operator">:</span> <span class="token keyword">return</span>     <span class="token class-name">Exception</span> table<span class="token operator">:</span>        from    <span class="token keyword">to</span>  <span class="token namespace">target</span> type            <span class="token number">2</span>     <span class="token number">5</span>    <span class="token number">11</span>   <span class="token class-name">Class</span> java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Exception</span>            <span class="token number">2</span>     <span class="token number">5</span>    <span class="token number">21</span>   any           <span class="token number">11</span>    <span class="token number">15</span>    <span class="token number">21</span>   any<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可以看到 finally 中的代码被复制了 3 份，分别放入 try 流程，catch 流程以及 catch 剩余的异常类型流程</li></ul><blockquote><p><strong>注意</strong>：虽然从字节码指令看来，每个块中都有finally块，但是finally块中的代码<code>只会被执行一次</code></p></blockquote><h4 id="finally中的return"><a href="#finally中的return" class="headerlink" title="finally中的return"></a>finally中的return</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo3</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">Demo3</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//结果为20</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>i <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应的字节码指令:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Code</span><span class="token operator">:</span>     stack<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">0</span>        <span class="token number">0</span><span class="token operator">:</span> bipush        <span class="token number">10</span>        <span class="token number">2</span><span class="token operator">:</span> istore_0        <span class="token number">3</span><span class="token operator">:</span> iload_0        <span class="token number">4</span><span class="token operator">:</span> istore_1  <span class="token comment">//暂存返回值</span>        <span class="token number">5</span><span class="token operator">:</span> bipush        <span class="token number">20</span>        <span class="token number">7</span><span class="token operator">:</span> istore_0        <span class="token number">8</span><span class="token operator">:</span> iload_0        <span class="token number">9</span><span class="token operator">:</span> ireturn<span class="token comment">//ireturn会返回操作数栈顶的整型值20</span>       <span class="token comment">//如果出现异常，还是会执行finally块中的内容，没有抛出异常</span>       <span class="token number">10</span><span class="token operator">:</span> astore_2       <span class="token number">11</span><span class="token operator">:</span> bipush        <span class="token number">20</span>       <span class="token number">13</span><span class="token operator">:</span> istore_0       <span class="token number">14</span><span class="token operator">:</span> iload_0       <span class="token number">15</span><span class="token operator">:</span> ireturn<span class="token comment">//这里没有athrow了，也就是如果在finally块中如果有返回操作的话，且try块中出现异常，会吞掉异常！</span>     <span class="token class-name">Exception</span> table<span class="token operator">:</span>        from    <span class="token keyword">to</span>  <span class="token namespace">target</span> type            <span class="token number">0</span>     <span class="token number">5</span>    <span class="token number">10</span>   any<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>由于 ﬁnally 中的 <code>ireturn</code> 被插入了所有可能的流程，因此返回结果肯定以ﬁnally的为准</li><li>至于字节码中第 2 行，似乎没啥用，且留个伏笔，看下个例子</li><li>跟上例中的 ﬁnally 相比，发现<code>没有 athrow 了</code>，这告诉我们：如果在 ﬁnally 中出现了 return，会<code>吞掉异常</code></li><li>所以尽量<strong>不要在finally中进行返回操作</strong></li></ul><h4 id="被吞掉的异常"><a href="#被吞掉的异常" class="headerlink" title="被吞掉的异常"></a>被吞掉的异常</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo3</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">Demo3</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//最终结果为20</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> i<span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>         <span class="token comment">//这里应该会抛出异常</span>         i <span class="token operator">=</span> i<span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> i<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>         i <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> i<span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>会发现打印结果为20，并未抛出异常</p></blockquote><h4 id="finally不带return"><a href="#finally不带return" class="headerlink" title="finally不带return"></a>finally不带return</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo4</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">Demo4</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>i <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应的字节码指令:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Code</span><span class="token operator">:</span>     stack<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">0</span>        <span class="token number">0</span><span class="token operator">:</span> bipush        <span class="token number">10</span>        <span class="token number">2</span><span class="token operator">:</span> istore_0 <span class="token comment">//赋值给i 10</span>        <span class="token number">3</span><span class="token operator">:</span> iload_0<span class="token comment">//加载到操作数栈顶</span>        <span class="token number">4</span><span class="token operator">:</span> istore_1 <span class="token comment">//加载到局部变量表的1号位置</span>        <span class="token number">5</span><span class="token operator">:</span> bipush        <span class="token number">20</span>        <span class="token number">7</span><span class="token operator">:</span> istore_0 <span class="token comment">//赋值给i 20</span>        <span class="token number">8</span><span class="token operator">:</span> iload_1 <span class="token comment">//加载局部变量表1号位置的数10到操作数栈</span>        <span class="token number">9</span><span class="token operator">:</span> ireturn <span class="token comment">//返回操作数栈顶元素 10</span>       <span class="token number">10</span><span class="token operator">:</span> astore_2       <span class="token number">11</span><span class="token operator">:</span> bipush        <span class="token number">20</span>       <span class="token number">13</span><span class="token operator">:</span> istore_0       <span class="token number">14</span><span class="token operator">:</span> aload_2 <span class="token comment">//加载异常</span>       <span class="token number">15</span><span class="token operator">:</span> athrow <span class="token comment">//抛出异常</span>     <span class="token class-name">Exception</span> table<span class="token operator">:</span>        from    <span class="token keyword">to</span>  <span class="token namespace">target</span> type            <span class="token number">3</span>     <span class="token number">5</span>    <span class="token number">10</span>   any<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>返回的值是10</p></blockquote><h3 id="Synchronized"><a href="#Synchronized" class="headerlink" title="Synchronized"></a>Synchronized</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo5</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Lock</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应的字节码指令:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Code</span><span class="token operator">:</span>     stack<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span>        <span class="token number">0</span><span class="token operator">:</span> bipush        <span class="token number">10</span>        <span class="token number">2</span><span class="token operator">:</span> istore_1        <span class="token number">3</span><span class="token operator">:</span> <span class="token keyword">new</span>           #<span class="token number">2</span>                  <span class="token comment">// class com/nyima/JVM/day06/Lock</span>        <span class="token number">6</span><span class="token operator">:</span> dup <span class="token comment">//复制一份，放到操作数栈顶，用于构造函数消耗</span>        <span class="token number">7</span><span class="token operator">:</span> invokespecial #<span class="token number">3</span>                  <span class="token comment">// Method com/nyima/JVM/day06/Lock."&lt;init&gt;":()V</span>       <span class="token number">10</span><span class="token operator">:</span> astore_2 <span class="token comment">//剩下的一份放到局部变量表的2号位置</span>       <span class="token number">11</span><span class="token operator">:</span> aload_2 <span class="token comment">//加载到操作数栈</span>       <span class="token number">12</span><span class="token operator">:</span> dup <span class="token comment">//复制一份，放到操作数栈，用于加锁时消耗</span>       <span class="token number">13</span><span class="token operator">:</span> astore_3 <span class="token comment">//将操作数栈顶元素弹出，暂存到局部变量表的三号槽位。这时操作数栈中有一份对象的引用</span>       <span class="token number">14</span><span class="token operator">:</span> monitorenter <span class="token comment">//加锁</span>       <span class="token comment">//锁住后代码块中的操作    </span>       <span class="token number">15</span><span class="token operator">:</span> getstatic     #<span class="token number">4</span>                  <span class="token comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span>       <span class="token number">18</span><span class="token operator">:</span> iload_1       <span class="token number">19</span><span class="token operator">:</span> invokevirtual #<span class="token number">5</span>                  <span class="token comment">// Method java/io/PrintStream.println:(I)V</span>       <span class="token comment">//加载局部变量表中三号槽位对象的引用，用于解锁    </span>       <span class="token number">22</span><span class="token operator">:</span> aload_3           <span class="token number">23</span><span class="token operator">:</span> monitorexit <span class="token comment">//解锁</span>       <span class="token number">24</span><span class="token operator">:</span> <span class="token keyword">goto</span>          <span class="token number">34</span>       <span class="token comment">//异常操作    </span>       <span class="token number">27</span><span class="token operator">:</span> astore        <span class="token number">4</span>       <span class="token number">29</span><span class="token operator">:</span> aload_3       <span class="token number">30</span><span class="token operator">:</span> monitorexit <span class="token comment">//解锁</span>       <span class="token number">31</span><span class="token operator">:</span> aload         <span class="token number">4</span>       <span class="token number">33</span><span class="token operator">:</span> athrow       <span class="token number">34</span><span class="token operator">:</span> <span class="token keyword">return</span>     <span class="token comment">//可以看出，无论何时出现异常，都会跳转到27行，将异常放入局部变量中，并进行解锁操作，然后加载异常并抛出异常。      </span>     <span class="token class-name">Exception</span> table<span class="token operator">:</span>        from    <span class="token keyword">to</span>  <span class="token namespace">target</span> type           <span class="token number">15</span>    <span class="token number">24</span>    <span class="token number">27</span>   any           <span class="token number">27</span>    <span class="token number">31</span>    <span class="token number">27</span>   any<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意 </p><p>方法级别的 synchronized 不会在字节码指令中有所体现</p></blockquote><h2 id="编译期处理"><a href="#编译期处理" class="headerlink" title="编译期处理"></a>编译期处理</h2><p>所谓的 <code>语法糖</code> ，其实就是指 <code>java 编译器</code>把 <code>*.java</code> 源码<code>编译</code>为 <code>*.class</code> 字节码的过程中，<code>自动生成</code>和<code>转换</code>的一些代码，主要是为了减轻程序员的负担，算是 java 编译器给我们的一个额外福利</p><p><strong>注意</strong>，以下代码的分析，借助了 <code>javap</code> 工具，idea 的反编译功能，idea 插件 jclasslib 等工具。另外， 编译器转换的<code>结果直接就是 class 字节码</code>，只是为了便于阅读，给出了 几乎等价 的 java 源码方式，并不是编译器还会转换出中间的 java 源码，切记。</p><h3 id="默认构造函数"><a href="#默认构造函数" class="headerlink" title="默认构造函数"></a>默认构造函数</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Candy1</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>经过编译期优化后</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Candy1</span> <span class="token punctuation">{</span>   <span class="token comment">//这个无参构造器是java编译器帮我们加上的</span>   <span class="token keyword">public</span> <span class="token class-name">Candy1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">//即调用父类 Object 的无参构造方法，即调用 java/lang/Object." &lt;init&gt;":()V</span>      <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自动拆装箱"><a href="#自动拆装箱" class="headerlink" title="自动拆装箱"></a>自动拆装箱</h3><ul><li><p><code>基本类型</code>和其<code>包装类型</code>的相互<code>转换过程</code>，称为<code>拆装箱</code></p></li><li><p>在JDK 5以后，它们的转换可以在编译期自动完成</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">Integer</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> y <span class="token operator">=</span> x<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>转换过程如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">//基本类型赋值给包装类型，称为装箱</span>      <span class="token class-name">Integer</span> x <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//包装类型赋值给基本类型，称谓拆箱</span>      <span class="token keyword">int</span> y <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="泛型集合取值"><a href="#泛型集合取值" class="headerlink" title="泛型集合取值"></a>泛型集合取值</h3><p>泛型也是在 JDK 5 开始加入的特性，但 java 在<code>编译泛型代码后</code>会执行 <code>泛型擦除</code> 的动作，即泛型信息在编译为字节码之后就<code>丢失</code>了，实际的类型都当做了 <code>Object 类型</code>来处理</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo3</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Integer</span> x <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应的字节码指令:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Code</span><span class="token operator">:</span>    stack<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span>       <span class="token number">0</span><span class="token operator">:</span> <span class="token keyword">new</span>           #<span class="token number">2</span>                  <span class="token comment">// class java/util/ArrayList</span>       <span class="token number">3</span><span class="token operator">:</span> dup       <span class="token number">4</span><span class="token operator">:</span> invokespecial #<span class="token number">3</span>                  <span class="token comment">// Method java/util/ArrayList."&lt;init&gt;":()V</span>       <span class="token number">7</span><span class="token operator">:</span> astore_1       <span class="token number">8</span><span class="token operator">:</span> aload_1       <span class="token number">9</span><span class="token operator">:</span> bipush        <span class="token number">10</span>      <span class="token number">11</span><span class="token operator">:</span> invokestatic  #<span class="token number">4</span>                  <span class="token comment">// Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;</span>      <span class="token comment">//这里进行了泛型擦除，实际调用的是add(Objcet o)</span>      <span class="token number">14</span><span class="token operator">:</span> invokeinterface #<span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">2</span>            <span class="token comment">// InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z</span>      <span class="token number">19</span><span class="token operator">:</span> pop      <span class="token number">20</span><span class="token operator">:</span> aload_1      <span class="token number">21</span><span class="token operator">:</span> iconst_0      <span class="token comment">//这里也进行了泛型擦除，实际调用的是get(Object o)   </span>      <span class="token number">22</span><span class="token operator">:</span> invokeinterface #<span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">2</span>            <span class="token comment">// InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;</span><span class="token comment">//这里进行了类型转换，将Object转换成了Integer</span>      <span class="token number">27</span><span class="token operator">:</span> checkcast     #<span class="token number">7</span>                  <span class="token comment">// class java/lang/Integer</span>      <span class="token number">30</span><span class="token operator">:</span> astore_2      <span class="token number">31</span><span class="token operator">:</span> <span class="token keyword">return</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以调用get函数取值时，有一个类型转换的操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果要将返回结果赋值给一个int类型的变量，则还有<code>自动拆箱</code>的操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo4</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">//将args赋值给arr，可以看出String...实际就是String[] </span>      <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> args<span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">foo</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可变参数 <strong>String…</strong> args 其实是一个 <strong>String[]</strong> args ，从代码中的赋值语句中就可以看出来。 同 样 java 编译器会在编译期间将上述代码变换为</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo4</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token class-name">Demo4</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> args<span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，如果调用的是<code>foo()</code>，即未传递参数时，等价代码为<code>foo(new String[]{})</code>，<code>创建了一个空数组，</code>而不是直接传递的null</p><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo5</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//数组赋初值的简化写法也是一种语法糖。</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译器会帮我们转换为</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo5</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Demo5</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> x <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>如果是集合使用foreach</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo5</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> x <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>集合要使用foreach，需要该集合类<code>实现了Iterable接口</code>，因为集合的遍历需要用到<code>迭代器Iterator</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo5</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Demo5</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//获得该集合的迭代器</span>      <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token class-name">Integer</span> x <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="switch字符串"><a href="#switch字符串" class="headerlink" title="switch字符串"></a>switch字符串</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo6</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>      <span class="token keyword">switch</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">case</span> <span class="token string">"hello"</span> <span class="token operator">:</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"h"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token keyword">case</span> <span class="token string">"world"</span> <span class="token operator">:</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在编译器中执行的操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo6</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token class-name">Demo6</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment">//通过字符串的hashCode+value来判断是否匹配</span>      <span class="token keyword">switch</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment">//hello的hashCode</span>         <span class="token keyword">case</span> <span class="token number">99162322</span> <span class="token operator">:</span>            <span class="token comment">//再次比较，因为字符串的hashCode有可能相等</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token comment">//world的hashCode</span>         <span class="token keyword">case</span> <span class="token number">11331880</span> <span class="token operator">:</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment">//用第二个switch在进行输出判断</span>      <span class="token keyword">switch</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"h"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过程说明：</p><ul><li>在编译期间，单个的switch被分为了两个<ul><li>第一个用来匹配字符串，并给x赋值<ul><li><strong>字符串的匹配用到了字符串的hashCode，还用到了equals方法</strong></li><li><strong>使用hashCode是为了提高比较效率</strong>，<strong>使用equals是防止有hashCode冲突（如BM和C.）</strong></li></ul></li><li>第二个用来根据x的值来决定输出语句</li></ul></li></ul><h3 id="switch枚举"><a href="#switch枚举" class="headerlink" title="switch枚举"></a>switch枚举</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo7</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">SEX</span> sex <span class="token operator">=</span> SEX<span class="token punctuation">.</span>MALE<span class="token punctuation">;</span>      <span class="token keyword">switch</span> <span class="token punctuation">(</span>sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">case</span> MALE<span class="token operator">:</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"man"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token keyword">case</span> FEMALE<span class="token operator">:</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"woman"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">enum</span> SEX <span class="token punctuation">{</span>   MALE<span class="token punctuation">,</span> FEMALE<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译器中执行的代码如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo7</span> <span class="token punctuation">{</span>   <span class="token comment">/**         * 定义一个合成类（仅 jvm 使用，对我们不可见）         * 用来映射枚举的 ordinal 与数组元素的关系         * 枚举的 ordinal 表示枚举对象的序号，从 0 开始         * 即 MALE 的 ordinal()=0，FEMALE 的 ordinal()=1         */</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> $MAP <span class="token punctuation">{</span>      <span class="token comment">//数组大小即为枚举元素个数，里面存放了case用于比较的数字</span>      <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">static</span> <span class="token punctuation">{</span>         <span class="token comment">//ordinal即枚举元素对应所在的位置，MALE为0，FEMALE为1</span>         map<span class="token punctuation">[</span>SEX<span class="token punctuation">.</span>MALE<span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>         map<span class="token punctuation">[</span>SEX<span class="token punctuation">.</span>FEMALE<span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">SEX</span> sex <span class="token operator">=</span> SEX<span class="token punctuation">.</span>MALE<span class="token punctuation">;</span>      <span class="token comment">//将对应位置枚举元素的值赋给x，用于case操作</span>      <span class="token keyword">int</span> x <span class="token operator">=</span> $MAP<span class="token punctuation">.</span>map<span class="token punctuation">[</span>sex<span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">switch</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"man"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"woman"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">enum</span> SEX <span class="token punctuation">{</span>   MALE<span class="token punctuation">,</span> FEMALE<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">enum</span> SEX <span class="token punctuation">{</span>   MALE<span class="token punctuation">,</span> FEMALE<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>转换后的代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Sex</span> <span class="token keyword">extends</span> <span class="token class-name">Enum</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Sex</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>      <span class="token comment">//对应枚举类中的元素</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Sex</span> MALE<span class="token punctuation">;</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Sex</span> FEMALE<span class="token punctuation">;</span>       <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Sex</span><span class="token punctuation">[</span><span class="token punctuation">]</span> $VALUES<span class="token punctuation">;</span>       <span class="token keyword">static</span> <span class="token punctuation">{</span>           <span class="token comment">//调用构造函数，传入枚举元素的值及ordinal</span>    MALE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sex</span><span class="token punctuation">(</span><span class="token string">"MALE"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            FEMALE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sex</span><span class="token punctuation">(</span><span class="token string">"FEMALE"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           $VALUES <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sex</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>MALE<span class="token punctuation">,</span> FEMALE<span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//调用父类中的方法</span>    <span class="token keyword">private</span> <span class="token class-name">Sex</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> ordinal<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> ordinal<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Sex</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> $VALUES<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Sex</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token class-name">Enum</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">Sex</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo8</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">Runnable</span> runnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token annotation punctuation">@Override</span>         <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"running..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>转换后的代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo8</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">//用额外创建的类来创建匿名内部类对象</span>      <span class="token class-name">Runnable</span> runnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo8</span>$<span class="token function">1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//创建了一个额外的类，实现了Runnable接口</span><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Demo8</span>$<span class="token number">1</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token class-name">Demo8</span>$<span class="token function">1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"running..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果匿名内部类中引用了<code>局部变量</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo8</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token class-name">Runnable</span> runnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token annotation punctuation">@Override</span>         <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>转化后的代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo8</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token class-name">Runnable</span> runnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token annotation punctuation">@Override</span>         <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Demo8</span>$<span class="token number">1</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>   <span class="token comment">//多创建了一个变量</span>   <span class="token keyword">int</span> val$x<span class="token punctuation">;</span>   <span class="token comment">//变为了有参构造器</span>   <span class="token keyword">public</span> <span class="token class-name">Demo8</span>$<span class="token function">1</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>val$x <span class="token operator">=</span> x<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>val$x<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="类加载阶段"><a href="#类加载阶段" class="headerlink" title="类加载阶段"></a>类加载阶段</h2><h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><ul><li>将类的<code>字节码载入方法区</code>（<strong>1.8后为元空间，在本地内存中</strong>）中，内部采用 C++ 的 <strong>instanceKlass</strong> 描述 java 类，它的重要 ﬁeld 有：<ul><li>_java_mirror 即 java 的类镜像，例如对 String 来说，它的镜像类就是 String.class，作用是把 klass 暴露给 java 使用</li><li>_super 即父类</li><li>_ﬁelds 即成员变量</li><li>_methods 即方法</li><li>_constants 即常量池</li><li>_class_loader 即类加载器</li><li>_vtable 虚方法表</li><li>_itable 接口方法</li></ul></li><li>如果这个类还有父类没有加载，<code>先加载父类</code></li><li><code>加载</code>和<code>链接</code>可能是<code>交替运行</code>的</li></ul><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm55.png"></p><p><strong>注意</strong></p><ul><li>instanceKlass保存在<code>方法区</code>。<strong>JDK 8以后，方法区位于元空间中，而元空间又位于本地内存中</strong></li><li><code>_java_mirror</code>则是保存在<code>堆内存</code>中</li><li>*<em>InstanceKlass和</em>.class(JAVA镜像类)互相保存了对方的地址**</li><li>类的对象在对象头中保存了*.class的地址。让对象可以通过其找到方法区中的instanceKlass，从而获取类的各种信息</li></ul><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><blockquote><p>验证类是否符合 JVM规范，安全性检查</p></blockquote><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p>为 <code>static</code> 变量<code>分配</code>空间，设置默认值</p><ul><li>static变量在JDK 7以前是存储与instanceKlass末尾。但在JDK 7以后就存储在_java_mirror末尾了</li><li>static变量在分配空间和赋值是在两个阶段完成的。<code>分配空间在准备阶段完成</code>，<code>赋值在初始化阶段完成</code></li><li>如果 static 变量是 <code>ﬁnal 的基本类型</code>，以及<code>字符串常量</code>，那么编译阶段值就确定了，<code>赋值在准备阶段完成</code></li><li>如果 static 变量是 ﬁnal 的，但属于<code>引用类型</code>，那么赋值也会在<code>初始化阶段完成</code></li></ul><h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><p><strong>HSDB的使用</strong></p><ul><li><p>先获得要查看的进程ID</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jps<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>打开HSDB</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">java -cp D:<span class="token punctuation">\</span>JAVA<span class="token punctuation">\</span>JDK8.0<span class="token punctuation">\</span>lib<span class="token punctuation">\</span>sa-jdi.jar sun.jvm.hotspot.HSDB<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>运行时可能会报错，是因为<strong>缺少一个.dll的文件</strong>，我们在JDK的安装目录中找到该文件，复制到缺失的文件下即可</p></li><li><p>定位到需要的进程</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm56.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm57.png"></p></li></ul><p><strong>解析的含义</strong></p><p>将<code>常量池</code>中的<code>符号引用</code>解析为<code>直接引用</code></p><ul><li>未解析时，常量池中的看到的对象仅是符号，未真正的存在于内存中</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>      <span class="token class-name">ClassLoader</span> loader <span class="token operator">=</span> <span class="token class-name">Demo1</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//只加载不解析</span>      <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> c <span class="token operator">=</span> loader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"com.nyima.JVM.day8.C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//用于阻塞主线程</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>   <span class="token class-name">D</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">D</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>打开HSDB<ul><li>可以看到此时只加载了类C</li></ul></li></ul><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm58.png"></p><ul><li>查看类C的常量池，可以看到类D<code>未被解析</code>，只是存在于常量池中的符号</li></ul><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm59.png"></p><p>解析以后，会将常量池中的<code>符号引用解析为直接引用</code></p><ul><li>可以看到，此时已加载并解析了类C和类D</li></ul><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm60.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm61.png"></p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>初始化阶段就是<code>执行类构造器cinit()V方法的过程</code>，虚拟机会保证这个类的『构造方法』的线程安全</p><ul><li>cinit()V方法是由编译器自动收集类中的所有类变量的<code>赋值动作和静态语句块</code>（static{}块）中的语句合并产生的</li></ul><h4 id="发生时机"><a href="#发生时机" class="headerlink" title="发生时机"></a>发生时机</h4><p><strong>类的初始化的懒惰的</strong>，以下情况会初始化</p><ul><li>main 方法所在的类，总会被首先初始化</li><li>首次访问这个类的静态变量或静态方法时</li><li>子类初始化，如果父类还没初始化，会引发</li><li>子类访问父类的静态变量，只会触发父类的初始化</li><li>Class.forName</li><li>new 会导致初始化</li></ul><p><strong>以下情况不会初始化</strong></p><ul><li>访问类的 static ﬁnal 静态常量（基本类型和字符串）</li><li>类对象.class 不会触发初始化</li><li>创建该类对象的数组</li><li>类加载器的.loadClass方法</li><li>Class.forNamed的参数2为false时</li></ul><p><strong>验证类是否被初始化，可以看该类的静态代码块是否被执行</strong></p><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><blockquote><p>Java虚拟机设计团队有意把类加载阶段中的<strong>“通过一个类的全限定名来获取描述该类的二进制字节流”</strong>这个动作放到Java虚拟机外部去实现，以便让应用程序自己决定如何去获取所需的类。实现这个动作的代码被称为<strong>“类加载器”</strong>（ClassLoader）</p></blockquote><h3 id="类与类加载器"><a href="#类与类加载器" class="headerlink" title="类与类加载器"></a>类与类加载器</h3><p>类加载器虽然只用于实现类的加载动作，但它在Java程序中起到的作用却远超类加载阶段</p><p>对于任意一个类，都必须由加载它的<code>类加载器</code>和这个<code>类本身</code>一起共同确立其在Java虚拟机中的唯一性，每一个类加载器，都拥有一个独立的类名称空间。这句话可以表达得更通俗一些：<strong>比较两个类是否“相等”，只有在这两个类是由同一个类加载器加载的前提下才有意义</strong>，否则，即使这两个类来源于同一个Class文件，被同一个Java虚拟机加载，只要加载它们的类加载器不同，那这两个类就必定不相等</p><p>以JDK 8为例</p><table><thead><tr><th align="center">名称</th><th align="center">加载的类</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Bootstrap ClassLoader（启动类加载器）</td><td align="center">JAVA_HOME/jre/lib</td><td align="center">无法直接访问</td></tr><tr><td align="center">Extension ClassLoader(拓展类加载器)</td><td align="center">JAVA_HOME/jre/lib/ext</td><td align="center">上级为Bootstrap，<strong>显示为null</strong></td></tr><tr><td align="center">Application ClassLoader(应用程序类加载器)</td><td align="center">classpath</td><td align="center">上级为Extension</td></tr><tr><td align="center">自定义类加载器</td><td align="center">自定义</td><td align="center">上级为Application</td></tr></tbody></table><h3 id="启动类加载器"><a href="#启动类加载器" class="headerlink" title="启动类加载器"></a>启动类加载器</h3><p>可通过在控制台输入指令，使得类被启动类加器加载</p><h3 id="拓展类加载器"><a href="#拓展类加载器" class="headerlink" title="拓展类加载器"></a>拓展类加载器</h3><p>如果classpath和JAVA_HOME/jre/lib/ext 下有同名类，加载时会使用<strong>拓展类加载器</strong>加载。当应用程序类加载器发现拓展类加载器已将该同名类加载过了，则不会再次加载</p><h3 id="双亲委派模式"><a href="#双亲委派模式" class="headerlink" title="双亲委派模式"></a>双亲委派模式</h3><p><code>双亲委派模式</code>，即调用类加载器ClassLoader 的 loadClass 方法时，查找类的规则</p><p>loadClass源码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> resolve<span class="token punctuation">)</span>    <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token function">getClassLoadingLock</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 首先查找该类是否已经被该类加载器加载过了</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> c <span class="token operator">=</span> <span class="token function">findLoadedClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//如果没有被加载过</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">long</span> t0 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment">//看是否被它的上级加载器加载过了 Extension的上级是Bootstarp，但它显示为null</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    c <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment">//看是否被启动类加载器加载过</span>                    c <span class="token operator">=</span> <span class="token function">findBootstrapClassOrNull</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// ClassNotFoundException thrown if class not found</span>                <span class="token comment">// from the non-null parent class loader</span>                <span class="token comment">//捕获异常，但不做任何处理</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//如果还是没有找到，先让拓展类加载器调用findClass方法去找到该类，如果还是没找到，就抛出异常</span>                <span class="token comment">//然后让应用类加载器去找classpath下找该类</span>                <span class="token keyword">long</span> t1 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                c <span class="token operator">=</span> <span class="token function">findClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 记录时间</span>                sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span><span class="token class-name">PerfCounter</span><span class="token punctuation">.</span><span class="token function">getParentDelegationTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addTime</span><span class="token punctuation">(</span>t1 <span class="token operator">-</span> t0<span class="token punctuation">)</span><span class="token punctuation">;</span>                sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span><span class="token class-name">PerfCounter</span><span class="token punctuation">.</span><span class="token function">getFindClassTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addElapsedTimeFrom</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>                sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span><span class="token class-name">PerfCounter</span><span class="token punctuation">.</span><span class="token function">getFindClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">resolveClass</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过程如图：</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/jvm/jvm62.png"></p><h3 id="自定义类加载器"><a href="#自定义类加载器" class="headerlink" title="自定义类加载器"></a>自定义类加载器</h3><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ul><li>想加载非 classpath 随意路径中的类文件</li><li>通过接口来使用实现，希望解耦时，常用在框架设计</li><li>这些类希望予以隔离，不同应用的同名类都可以加载，不冲突，常见于 tomcat 容器</li></ul><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ul><li>继承ClassLoader父类</li><li>要遵从双亲委派机制，<code>重写 ﬁndClass 方法</code><ul><li><code>不是重写loadClass方法</code>，否则不会走双亲委派机制</li></ul></li><li>读取类文件的字节码</li><li>调用父类的 deﬁneClass 方法来加载类</li><li>使用者调用该类加载器的 loadClass 方法</li></ul><h3 id="破坏双亲委派模式"><a href="#破坏双亲委派模式" class="headerlink" title="破坏双亲委派模式"></a>破坏双亲委派模式</h3><ul><li>双亲委派模型的第一次“被破坏”其实发生在双亲委派模型出现之前——即JDK1.2面世以前的“远古”时代<ul><li>建议用户重写findClass()方法，在类加载器中的loadClass()方法中也会调用该方法</li></ul></li><li>双亲委派模型的第二次“被破坏”是由这个模型自身的缺陷导致的<ul><li>如果有基础类型又要调用回用户的代码，此时也会破坏双亲委派模式</li></ul></li><li>双亲委派模型的第三次“被破坏”是由于用户对程序动态性的追求而导致的<ul><li>这里所说的“动态性”指的是一些非常“热”门的名词：代码热替换（Hot Swap）、模块热部署（Hot Deployment）等</li></ul></li></ul><h2 id="运行期优化"><a href="#运行期优化" class="headerlink" title="运行期优化"></a>运行期优化</h2><h3 id="分层编译"><a href="#分层编译" class="headerlink" title="分层编译"></a>分层编译</h3><p>JVM 将执行状态分成了 5 个层次：</p><ul><li>0层：解释执行，用解释器将字节码翻译为机器码</li><li>1层：使用 C1 <code>即时编译器</code>编译执行（不带 <code>proﬁling</code>）</li><li>2层：使用 C1 即时编译器编译执行（带基本的profiling）</li><li>3层：使用 C1 即时编译器编译执行（带完全的profiling）</li><li>4层：使用 C2 即时编译器编译执行</li></ul><p>proﬁling 是指在运行过程中收集一些程序执行状态的数据，例如【方法的调用次数】，【循环的 回边次数】等</p><h4 id="即时编译器（JIT）与解释器的区别"><a href="#即时编译器（JIT）与解释器的区别" class="headerlink" title="即时编译器（JIT）与解释器的区别"></a>即时编译器（JIT）与解释器的区别</h4><ul><li><strong>解释器</strong><ul><li>将字节码<code>解释</code>为机器码，下次即使遇到相同的字节码，<code>仍会执行重复的解释</code></li><li>是将字节码解释为针对所有平台都通用的机器码</li></ul></li><li><strong>即时编译器</strong><ul><li>将一些字节码<code>编译</code>为机器码，<code>并存入 Code Cache</code>，下次遇到相同的代码，直接执行，<code>无需再编译</code></li><li>根据平台类型，生成平台特定的机器码</li></ul></li></ul><p>对于大部分的不常用的代码，我们无需耗费时间将其编译成机器码，而是采取解释执行的方式运行；另一方面，对于仅占据小部分的热点代码，我们则可以将其编译成机器码，以达到理想的运行速度。 执行效率上简单比较一下 <code>Interpreter &lt; C1 &lt; C2</code>，总的目标是发现<code>热点代码</code>（hotspot名称的由 来），并<code>优化</code>这些热点代码</p><h4 id="逃逸分析"><a href="#逃逸分析" class="headerlink" title="逃逸分析"></a>逃逸分析</h4><p>逃逸分析（Escape Analysis）简单来讲就是，Java Hotspot 虚拟机可以分析新创建对象的使用范围，并决定是否在 Java 堆上分配内存的一项技术</p><p>逃逸分析的 JVM 参数如下：</p><ul><li>开启逃逸分析：-XX:+DoEscapeAnalysis</li><li>关闭逃逸分析：-XX:-DoEscapeAnalysis</li><li>显示分析结果：-XX:+PrintEscapeAnalysis</li></ul><p>逃逸分析技术在 Java SE 6u23+ 开始支持，并默认设置为启用状态，可以不用额外加这个参数</p><p><strong>对象逃逸状态</strong></p><p><strong>全局逃逸（GlobalEscape）</strong></p><ul><li>即一个对象的作用范围逃出了当前方法或者当前线程，有以下几种场景：<ul><li>对象是一个静态变量</li><li>对象是一个已经发生逃逸的对象</li><li>对象作为当前方法的返回值</li></ul></li></ul><p><strong>参数逃逸（ArgEscape）</strong></p><ul><li>即一个对象被作为方法参数传递或者被参数引用，但在调用过程中不会发生全局逃逸，这个状态是通过被调方法的字节码确定的</li></ul><p><strong>没有逃逸</strong></p><ul><li>即方法中的对象没有发生逃逸</li></ul><p><strong>逃逸分析优化</strong></p><p>针对上面第三点，当一个对象<strong>没有逃逸</strong>时，可以得到以下几个虚拟机的优化</p><p><strong>锁消除</strong></p><p>我们知道线程<code>同步锁是非常牺牲性能</code>的，当编译器确定<code>当前对象只有当前线程使用</code>，那么就会<code>移除</code>该对象的同步锁</p><p>例如，StringBuffer 和 Vector 都是用 synchronized 修饰线程安全的，但大部分情况下，它们都只是在当前线程中用到，这样编译器就会优化移除掉这些锁操作</p><p>锁消除的 JVM 参数如下：</p><ul><li>开启锁消除：-XX:+EliminateLocks</li><li>关闭锁消除：-XX:-EliminateLocks</li></ul><p>锁消除在 JDK8 中都是默认开启的，并且锁消除都要建立在逃逸分析的基础上</p><p><strong>标量替换</strong></p><p>首先要明白标量和聚合量，<strong>基础类型</strong>和<strong>对象的引用</strong>可以理解为<strong>标量</strong>，它们不能被进一步分解。而能被进一步分解的量就是聚合量，比如：对象</p><p>对象是聚合量，它又可以被进一步分解成标量，将其成员变量分解为分散的变量，这就叫做<strong>标量替换</strong>。</p><p>这样，如果一个对象没有发生逃逸，那压根就不用创建它，只会在栈或者寄存器上创建它用到的成员标量，节省了内存空间，也提升了应用程序性能</p><p>标量替换的 JVM 参数如下：</p><ul><li>开启标量替换：-XX:+EliminateAllocations</li><li>关闭标量替换：-XX:-EliminateAllocations</li><li>显示标量替换详情：-XX:+PrintEliminateAllocations</li></ul><p>标量替换同样在 JDK8 中都是默认开启的，并且都要建立在逃逸分析的基础上</p><p><strong>栈上分配</strong></p><p>当对象没有发生逃逸时，该<strong>对象</strong>就可以通过标量替换分解成成员标量分配在<strong>栈内存</strong>中，和方法的生命周期一致，随着栈帧出栈时销毁，减少了 GC 压力，提高了应用程序性能</p><h3 id="方法内联"><a href="#方法内联" class="headerlink" title="方法内联"></a>方法内联</h3><h4 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a><strong>内联函数</strong></h4><blockquote><p>内联函数就是在程序编译时，编译器将程序中出现的内联函数的调用表达式用内联函数的函数体来直接进行替换</p></blockquote><h4 id="JVM内联函数"><a href="#JVM内联函数" class="headerlink" title="JVM内联函数"></a><strong>JVM内联函数</strong></h4><p>C++是否为内联函数由自己决定，Java由<code>编译器决定</code>。Java不支持直接声明为内联函数的，如果想让他内联，你只能够向编译器提出请求: 关键字<code>final修饰</code> 用来指明那个函数是希望被JVM内联的，</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment">// to do something  </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>总的来说，一般的函数都不会被当做内联函数，只有声明了final后，编译器才会考虑是不是要把你的函数变成内联函数</p><p>JVM内建有许多运行时优化。首先<code>短方法</code>更利于JVM推断。流程更明显，作用域更短，副作用也更明显。如果是长方法JVM可能直接就跪了。</p><p>第二个原因则更重要：<code>方法内联</code></p><p>如果JVM监测到一些<code>小方法被频繁的执行</code>，它会把方法的调用替换成方法体本身，如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">add4</span><span class="token punctuation">(</span><span class="token keyword">int</span> x1<span class="token punctuation">,</span> <span class="token keyword">int</span> x2<span class="token punctuation">,</span> <span class="token keyword">int</span> x3<span class="token punctuation">,</span> <span class="token keyword">int</span> x4<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//这里调用了add2方法</span>        <span class="token keyword">return</span> <span class="token function">add2</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">add2</span><span class="token punctuation">(</span>x3<span class="token punctuation">,</span> x4<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">add2</span><span class="token punctuation">(</span><span class="token keyword">int</span> x1<span class="token punctuation">,</span> <span class="token keyword">int</span> x2<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> x1 <span class="token operator">+</span> x2<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法调用被替换后</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">add4</span><span class="token punctuation">(</span><span class="token keyword">int</span> x1<span class="token punctuation">,</span> <span class="token keyword">int</span> x2<span class="token punctuation">,</span> <span class="token keyword">int</span> x3<span class="token punctuation">,</span> <span class="token keyword">int</span> x4<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">//被替换为了方法本身</span>        <span class="token keyword">return</span> x1 <span class="token operator">+</span> x2 <span class="token operator">+</span> x3 <span class="token operator">+</span> x4<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="反射优化"><a href="#反射优化" class="headerlink" title="反射优化"></a>反射优化</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Reflect1</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"foo..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>      <span class="token class-name">Method</span> foo <span class="token operator">=</span> <span class="token class-name">Demo3</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">16</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         foo<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>foo.invoke 前面 0 ~ 15 次调用使用的是 MethodAccessor 的 NativeMethodAccessorImpl 实现</p><p>invoke方法源码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@CallerSensitive</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span>    <span class="token keyword">throws</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">,</span>       <span class="token class-name">InvocationTargetException</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>override<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Reflection</span><span class="token punctuation">.</span><span class="token function">quickCheckMemberAccess</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> modifiers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> caller <span class="token operator">=</span> <span class="token class-name">Reflection</span><span class="token punctuation">.</span><span class="token function">getCallerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">checkAccess</span><span class="token punctuation">(</span>caller<span class="token punctuation">,</span> clazz<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> modifiers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//MethodAccessor是一个接口，有3个实现类，其中有一个是抽象类</span>    <span class="token class-name">MethodAccessor</span> ma <span class="token operator">=</span> methodAccessor<span class="token punctuation">;</span>             <span class="token comment">// read volatile</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ma <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ma <span class="token operator">=</span> <span class="token function">acquireMethodAccessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ma<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会由DelegatingMehodAccessorImpl去调用NativeMethodAccessorImpl</p><p>NativeMethodAccessorImpl源码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">NativeMethodAccessorImpl</span> <span class="token keyword">extends</span> <span class="token class-name">MethodAccessorImpl</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Method</span> method<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">DelegatingMethodAccessorImpl</span> parent<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> numInvocations<span class="token punctuation">;</span>    <span class="token class-name">NativeMethodAccessorImpl</span><span class="token punctuation">(</span><span class="token class-name">Method</span> var1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>method <span class="token operator">=</span> var1<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">//每次进行反射调用，会让numInvocation与ReflectionFactory.inflationThreshold的值（15）进行比较，并使得numInvocation的值加一</span><span class="token comment">//如果numInvocation&gt;ReflectionFactory.inflationThreshold，则会调用本地方法invoke0方法</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> var1<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> var2<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>numInvocations <span class="token operator">&gt;</span> <span class="token class-name">ReflectionFactory</span><span class="token punctuation">.</span><span class="token function">inflationThreshold</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">ReflectUtil</span><span class="token punctuation">.</span><span class="token function">isVMAnonymousClass</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">MethodAccessorImpl</span> var3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MethodAccessorImpl</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MethodAccessorGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">generateMethod</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">getExceptionTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>parent<span class="token punctuation">.</span><span class="token function">setDelegate</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">invoke0</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">,</span> var1<span class="token punctuation">,</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">setParent</span><span class="token punctuation">(</span><span class="token class-name">DelegatingMethodAccessorImpl</span> var1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> var1<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">native</span> <span class="token class-name">Object</span> <span class="token function">invoke0</span><span class="token punctuation">(</span><span class="token class-name">Method</span> var0<span class="token punctuation">,</span> <span class="token class-name">Object</span> var1<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//ReflectionFactory.inflationThreshold()方法的返回值</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> inflationThreshold <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>一开始if条件不满足，就会调用本地方法invoke0</li><li>随着numInvocation的增大，当它大于ReflectionFactory.inflationThreshold的值16时，就会将本地方法访问器替换为一个运行时动态生成的访问器，来提高效率<ul><li>这时会从反射调用变为<code>正常调用</code>，即直接调用 Reflect1.foo()</li></ul></li></ul><hr><h1 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h1><h2 id="JAVA内存模型（JMM）"><a href="#JAVA内存模型（JMM）" class="headerlink" title="JAVA内存模型（JMM）"></a>JAVA内存模型（JMM）</h2><p>JMM 即 Java Memory Model，它定义了<code>主存（共享内存）、工作内存（线程私有）</code>抽象概念，底层对应着 CPU 寄存器、缓存、硬件内存、 CPU 指令优化等。</p><p><strong>JMM体现在以下几个方面</strong></p><ul><li>原子性 - 保证指令不会受到线程上下文切换的影响</li><li>可见性 - 保证指令不会受 cpu 缓存的影响</li><li>有序性 - 保证指令不会受 cpu 指令并行优化的影响</li></ul><h2 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h2><h3 id="引例"><a href="#引例" class="headerlink" title="引例"></a>引例</h3><p><strong>退不出的循环</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token class-name">Boolean</span> run <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span><span class="token keyword">while</span> <span class="token punctuation">(</span>run<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果run为真，则一直执行</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"改变run的值为false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>run <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>为什么无法退出该循环</strong></p><ul><li>初始状态， t 线程刚开始从<code>主内存</code>读取了 run 的值到<code>工作内存</code>。</li></ul><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc26.png"></p><ul><li>因为 t 线程要频繁从主内存中读取 run 的值，JIT 编译器会将 run 的值<code>缓存至自己工作内存</code>中的高速缓存中， 减少对主存中 run 的访问，提高效率</li></ul><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc27.png"></p><ul><li>1 秒之后，main 线程修改了 run 的值，并同步至主存，而 t 是从自己工作内存中的高速缓存中读取这个变量 的值，结果永远是<code>旧值</code></li></ul><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc28.png"></p><p><strong>解决方法</strong></p><ul><li>使用<code>volatile</code>易变关键字</li><li>它可以用来修饰<code>成员变量</code>和<code>静态成员变量</code>（放在主存中的变量），他可以避免线程从自己的工作缓存中查找变量的值，必须到主存中获取它的值，线程操作 volatile 变量都是<code>直接操作主存</code></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//使用易变关键字</span><span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token class-name">Boolean</span> run <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span><span class="token keyword">while</span> <span class="token punctuation">(</span>run<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果run为真，则一直执行</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"改变run的值为false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>run <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="可见性与原子性"><a href="#可见性与原子性" class="headerlink" title="可见性与原子性"></a>可见性与原子性</h3><p>前面例子体现的实际就是<code>可见性</code>，它保证的是在多个线程之间，一个线程对<code>volatile变量</code>的修改对另一个线程可见， <code>不能</code>保证原子性，仅用在<code>一个写</code>线程，<code>多个读</code>线程的情况</p><ul><li><p>注意 synchronized 语句块既可以保证代码块的<code>原子性</code>，也同时保证代码块内变量的<code>可见性</code>。</p></li><li><p>但缺点是 synchronized 是属于<code>重量级</code>操作，性能相对更低。</p></li><li><p>如果在前面示例的死循环中加入 System.out.println() 会发现即使不加 volatile 修饰符，线程 t 也能正确看到 对 run 变量的修改了，想一想为什么？</p><ul><li><p>因为使用了<code>synchronized</code>关键字</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//使用了synchronized关键字</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="两阶终止模式优化"><a href="#两阶终止模式优化" class="headerlink" title="两阶终止模式优化"></a>两阶终止模式优化</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test7</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span><span class="token class-name">Monitor</span> monitor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Monitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>monitor<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>monitor<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Monitor</span> <span class="token punctuation">{</span><span class="token class-name">Thread</span> monitor<span class="token punctuation">;</span><span class="token comment">//设置标记，用于判断是否被终止了</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> stop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">/** * 启动监控器线程 */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//设置线控器线程，用于监控线程状态</span>monitor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//开始不停的监控</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>stop<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"处理后续任务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"监控器运行中..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token comment">//线程休眠</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"被打断了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>monitor<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * 用于停止监控器线程 */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//打断线程</span>monitor<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//修改标记</span>stop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="同步模式之犹豫模式"><a href="#同步模式之犹豫模式" class="headerlink" title="同步模式之犹豫模式"></a>同步模式之犹豫模式</h3><p><strong>定义</strong></p><p>Balking （犹豫）模式用在一个线程发现另一个线程或本线程<code>已经做了某一件相同</code>的事，那么本线程就无需再做 了，**直接<code>结束返回**</code></p><ul><li>用一个标记来判断该任务是否已经被执行过了</li><li>需要避免线程安全问题<ul><li>加锁的代码块要尽量的小，以保证性能</li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>nyima<span class="token punctuation">.</span>day1</span><span class="token punctuation">;</span><span class="token comment">/** * @author Chen Panwen * @data 2020/3/26 16:11 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test7</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span><span class="token class-name">Monitor</span> monitor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Monitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>monitor<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>monitor<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>monitor<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Monitor</span> <span class="token punctuation">{</span><span class="token class-name">Thread</span> monitor<span class="token punctuation">;</span><span class="token comment">//设置标记，用于判断是否被终止了</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> stop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//设置标记，用于判断是否已经启动过了</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> starting <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">/** * 启动监控器线程 */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//上锁，避免多线程运行时出现线程安全问题</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>starting<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//已被启动，直接返回</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//启动监视器，改变标记</span>starting <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//设置线控器线程，用于监控线程状态</span>monitor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//开始不停的监控</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>stop<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"处理后续任务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"监控器运行中..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token comment">//线程休眠</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"被打断了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>monitor<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * 用于停止监控器线程 */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//打断线程</span>monitor<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h2><h3 id="指令重排"><a href="#指令重排" class="headerlink" title="指令重排"></a>指令重排</h3><ul><li>JVM 会在<strong>不影响正确性</strong>的前提下，可以<strong>调整</strong>语句的执行<strong>顺序</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> j<span class="token punctuation">;</span><span class="token comment">// 在某个线程内执行如下赋值操作</span>i <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span> j <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可以看到，至于是先执行 i 还是 先执行 j ，对最终的结果不会产生影响。所以，上面代码真正执行时，既可以是</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">i <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span> j <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>也可以是</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">j <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>i <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这种特性称之为『<code>指令重排</code>』，<strong>多线程下『指令重排』会影响正确性</strong>。</p><h3 id="指令重排序优化"><a href="#指令重排序优化" class="headerlink" title="指令重排序优化"></a>指令重排序优化</h3><ul><li>事实上，现代处理器会设计为一个时钟周期完成一条执行时间长的 CPU 指令。为什么这么做呢？可以想到指令还可以再划分成一个个更小的阶段，例如，每条指令都可以分为： <strong>取指令 - 指令译码 - 执行指令 - 内存访问 - 数据写回</strong> 这5 个阶段</li></ul><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc29.png"></p><ul><li><p>在不改变程序结果的前提下，这些指令的各个阶段可以通过<strong>重排序</strong>和<strong>组合</strong>来实现<strong>指令级并行</strong></p></li><li><p>指令重排的前提是，重排指令<code>不能影响结果</code>，例如</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 可以重排的例子 </span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> a <span class="token operator">+</span> b <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 不能重排的例子 </span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> a <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="支持流水线的处理器"><a href="#支持流水线的处理器" class="headerlink" title="支持流水线的处理器"></a>支持流水线的处理器</h3><p>现代 CPU 支持多级<strong>指令流水线</strong>，例如支持<strong>同时</strong>执行 <strong>取指令 - 指令译码 - 执行指令 - 内存访问 - 数据写回</strong> 的处理器，就可以称之为五级指令流水线。这时 CPU 可以在一个时钟周期内，同时运行五条指令的不同阶段（相当于一 条执行时间长的复杂指令），IPC = 1，本质上，流水线技术并不能缩短单条指令的执行时间，但它变相地提高了指令地<strong>吞吐率</strong>。</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc30.png"></p><p><strong>在多线程环境下，指令重排序可能导致出现意料之外的结果</strong></p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p><code>volatile</code> 修饰的变量，可以<code>禁用</code>指令重排</p><ul><li><strong>禁止的是加volatile关键字变量之前的代码被重排序</strong></li></ul><h2 id="内存屏障"><a href="#内存屏障" class="headerlink" title="内存屏障"></a>内存屏障</h2><ul><li><strong>可见性</strong><ul><li><strong>写屏障</strong>（sfence）保证在该屏障<code>之前</code>的，对共享变量的改动，都同步到主存当中</li><li><strong>读屏障</strong>（lfence）保证在该屏障<code>之后</code>，对共享变量的读取，加载的是主存中新数据</li></ul></li><li><strong>有序性</strong><ul><li>写屏障会确保指令重排序时，不会将<code>写屏障之前</code>的代码排在写屏障之后</li><li>读屏障会确保指令重排序时，不会将<code>读屏障之后</code>的代码排在读屏障之前</li></ul></li></ul><h2 id="volatile-原理"><a href="#volatile-原理" class="headerlink" title="volatile 原理"></a>volatile 原理</h2><p>volatile的底层实现原理是<code>内存屏障</code>，Memory Barrier（Memory Fence）</p><ul><li>对 volatile 变量的写指令后会加入写屏障</li><li>对 volatile 变量的读指令前会加入读屏障</li></ul><h3 id="如何保证可见性"><a href="#如何保证可见性" class="headerlink" title="如何保证可见性"></a>如何保证可见性</h3><ul><li><p>写屏障（sfence）保证在该屏障之前的，对共享变量的改动，都同步到主存当中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actor2</span><span class="token punctuation">(</span><span class="token class-name">I_Result</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>     num <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>     ready <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// ready 是 volatile 赋值带写屏障</span>     <span class="token comment">// 写屏障</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>而读屏障（lfence）保证在该屏障之后，对共享变量的读取，加载的是主存中新数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actor1</span><span class="token punctuation">(</span><span class="token class-name">I_Result</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">// 读屏障</span>     <span class="token comment">// ready 是 volatile 读取值带读屏障</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>ready<span class="token punctuation">)</span> <span class="token punctuation">{</span>         r<span class="token punctuation">.</span>r1 <span class="token operator">=</span> num <span class="token operator">+</span> num<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>     r<span class="token punctuation">.</span>r1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc31.png"></p><h3 id="如何保证有序性"><a href="#如何保证有序性" class="headerlink" title="如何保证有序性"></a>如何保证有序性</h3><ul><li><p>写屏障会确保指令重排序时，不会将写屏障之前的代码排在写屏障之后</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actor2</span><span class="token punctuation">(</span><span class="token class-name">I_Result</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>     num <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>     ready <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// ready 是 volatile 赋值带写屏障</span>     <span class="token comment">// 写屏障</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>读屏障会确保指令重排序时，不会将读屏障之后的代码排在读屏障之前</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actor1</span><span class="token punctuation">(</span><span class="token class-name">I_Result</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">// 读屏障</span>     <span class="token comment">// ready 是 volatile 读取值带读屏障</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>ready<span class="token punctuation">)</span> <span class="token punctuation">{</span>     r<span class="token punctuation">.</span>r1 <span class="token operator">=</span> num <span class="token operator">+</span> num<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>     r<span class="token punctuation">.</span>r1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/juc/juc32.png"></p></li></ul><p><strong>但是不能解决指令交错问题</strong></p><ul><li>写屏障仅仅是保证之后的读能够读到新的结果，但不能保证读跑到它前面去</li><li>而有序性的保证也只是保证了<code>本线程内</code>相关代码不被重排序</li></ul><h3 id="实现原理之Lock前缀"><a href="#实现原理之Lock前缀" class="headerlink" title="实现原理之Lock前缀"></a>实现原理之Lock前缀</h3><p>在X86处理器下通过工具获取JIT编译器生成的汇编指令来查看对volatile进行写操作时</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对应的汇编代码是</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> lock addl <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>有volatile变量修饰的共享变量进行写操作的时候会多出第二行汇编代码，通过查IA-32架构软件开发者手册可知，<strong>Lock前缀</strong>的指令在多核处理器下会引发了两件事</p><ul><li><p>Lock前缀指令会引起处理器</p><p>缓存回写到内存</p><ul><li>Lock前缀指令导致在执行指令期间，声言处理器的LOCK#信号。在多处理器环境中，LOCK#信号确保在声言该信号期间，处理器可以独占任何共享内存。但是，在最近的处理器里，LOCK #信号一般不锁总线，而是<strong>锁缓存</strong>，毕竟锁总线开销的比较大。使用缓存一致性机制来确保修改的原子性，此操作被称为“缓存锁定”，<strong>缓存一致性机制会阻止同时修改由两个以上处理器缓存的内存区域数据</strong></li></ul></li><li><p>一个处理器的缓存回写到内存会</p><p>导致其他处理器的缓存无效</p><ul><li>在多核处理器系统中进行操作的时候，IA-32和Intel 64处理器能<strong>嗅探其他处理器访问系统内存和它们的内部缓存</strong>。处理器使用嗅探技术保证它的内部缓存、系统内存和其他处理器的缓存的数据在总线上保持一致</li></ul></li></ul><hr><p>部分笔记内容参考-&gt;<a href="https://nyimac.gitee.io/2020/07/03/JVM%E5%AD%A6%E4%B9%A0/#JVM%E5%AD%A6%E4%B9%A0">JVM - Nyima’s Blog (gitee.io)</a>，感谢博主的分享。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本次学习是从【黑马程序员出品】的解密JVM教程视频中进行的。&lt;a href=&quot;%5B%E9%BB%91%E9%A9%AC%E7%A8%8B%</summary>
      
    
    
    
    <category term="笔记" scheme="http://mjean.life/categories/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="jvm" scheme="http://mjean.life/categories/%E7%AC%94%E8%AE%B0/jvm/"/>
    
    
    <category term="jvm" scheme="http://mjean.life/tags/jvm/"/>
    
    <category term="java虚拟机" scheme="http://mjean.life/tags/java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>常见的排序算法</title>
    <link href="http://mjean.life/posts/e714468f.html"/>
    <id>http://mjean.life/posts/e714468f.html</id>
    <published>2021-06-26T16:32:58.000Z</published>
    <updated>2022-04-18T12:48:45.805Z</updated>
    
    <content type="html"><![CDATA[<h1 id="排序算法的介绍"><a href="#排序算法的介绍" class="headerlink" title="排序算法的介绍"></a>排序算法的介绍</h1><p><code>排序</code>也称<code>排序算法(Sort Algorithm)</code>，排序是将<code>一组数据</code>，依<code>指定的顺序</code>进行<code>排列的过程</code>。</p><h2 id="排序的分类"><a href="#排序的分类" class="headerlink" title="排序的分类"></a>排序的分类</h2><ol><li><p>内部排序: 指将需要处理的所有数据都加载到<code>内部存储器(内存)</code>中进行排序。</p></li><li><p>外部排序法： <code>数据量过大</code>，无法全部加载到内存中，需要借助<code>外部存储(文件等)</code>进行排序。</p></li><li><p>常见的排序算法分类(见下图)</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/datastructure_algorithm/ds16.png"></p></li></ol><h2 id="算法的时间复杂度"><a href="#算法的时间复杂度" class="headerlink" title="算法的时间复杂度"></a>算法的时间复杂度</h2><blockquote><p>度量一个算法执行时间的两种方法：事后统计的方法 和 事前估算的方法</p></blockquote><ol><li><p>事后统计的方法</p><p>这种方法可行,，但是有两个问题：一是要想对设计的算法的运行性能进行评测，需要实际运行该程序；二是所 得时间的统计量依赖于计算机的硬件、软件等环境因素， 这种方式，要在同一台计算机的相同状态下运行，才能比较那个算法速度更快。 </p></li><li><p>事前估算的方法 </p><p>通过分析某个算法的<code>时间复杂度</code>来判断哪个算法更优.</p></li></ol><blockquote><p>时间频度：<code>一个算法中的语句执行次数称为语句频度或时间频度</code>。</p></blockquote><p><code>时间复杂度(O(n))</code>：<strong>时间频度忽略常数项 、低次项 、系数，即算法中的基本操作语句的重复执行次数是问题规模 n 的某个函数。</strong></p><p>常见的时间复杂度(见下图)</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/datastructure_algorithm/ds17.png"></p><p>如图的时间复杂度是逐渐增加的，我们应该<code>避免</code>时间复杂度为<code>指数阶</code>的算法。</p><blockquote><p>平均时间复杂度和最坏时间复杂度 </p></blockquote><ol><li>平均时间复杂度是指所有可能的输入实例均以等概率出现的情况下，该算法的运行时间。  </li><li>最坏情况下的时间复杂度称最坏时间复杂度。<code>一般讨论的时间复杂度均是最坏情况下的时间复杂度</code>。这样做的 原因是：最坏情况下的时间复杂度是算法在任何输入实例上运行时间的界限，这就保证了算法的运行时间不会 比最坏情况更长。 </li><li>平均时间复杂度和最坏时间复杂度是否一致，和算法有关(如下表)</li></ol><table><thead><tr><th align="center">排序法</th><th align="center">平均时间</th><th align="center">最差情形</th><th align="center">稳定度</th><th align="center">额外空间</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">冒泡排序</td><td align="center">O(n^2)</td><td align="center">O(n^2)</td><td align="center">稳定</td><td align="center">O(1)</td><td align="center">n小时较好</td></tr><tr><td align="center">交换排序</td><td align="center">O(n^2)</td><td align="center">O(n^2)</td><td align="center">不稳定</td><td align="center">O(1)</td><td align="center">n小时较好</td></tr><tr><td align="center">选择排序</td><td align="center">O(n^2)</td><td align="center">O(n^2)</td><td align="center">不稳定</td><td align="center">O(1)</td><td align="center">n小时较好</td></tr><tr><td align="center">插入排序</td><td align="center">O(n^2)</td><td align="center">O(n^2)</td><td align="center">稳定</td><td align="center">O(1)</td><td align="center">大部分以排序时较好</td></tr><tr><td align="center">基数排序</td><td align="center">O(n^2)</td><td align="center">O(logRB)</td><td align="center">稳定</td><td align="center">O(n)</td><td align="center">B是真数（0-9）R是基数</td></tr><tr><td align="center">希尔排序</td><td align="center">O(nlogn)</td><td align="center">O(n^s) 1&lt;s&lt;2</td><td align="center">不稳定</td><td align="center">O(1)</td><td align="center">s是所选分组</td></tr><tr><td align="center">快速排序</td><td align="center">O(nlogn)</td><td align="center">O(n^2)</td><td align="center">不稳定</td><td align="center">O(nlogn)</td><td align="center">n大时较好</td></tr><tr><td align="center">归并排序</td><td align="center">O(nlogn)</td><td align="center">O(nlogn)</td><td align="center">稳定</td><td align="center">O(1)</td><td align="center">n大时较好</td></tr><tr><td align="center">堆排序</td><td align="center">O(nlogn)</td><td align="center">O(nlogn)</td><td align="center">不稳定</td><td align="center">O(1)</td><td align="center">n大时较好</td></tr></tbody></table><h2 id="算法的空间复杂度"><a href="#算法的空间复杂度" class="headerlink" title="算法的空间复杂度"></a>算法的空间复杂度</h2><ol><li>类似于时间复杂度的讨论， 一个算法的空间复杂度(Space Complexity)定义为该算法所耗费的存储空间， 它也是问题规模 n 的函数。</li><li>空间复杂度(Space Complexity)是对一个算法在运行过程中临时占用存储空间大小的量度。 有的算法需要占用的临时工作单元数与解决问题的规模 n 有关， 它随着 n 的增大而增大， 当 n 较大时， 将占用较多的存储单元， 例如<code>快速排序和归并排序算法, 基数排序</code>就属于这种情况</li><li>在做算法分析时， 主要讨论的是时间复杂度。 因为<code>从用户使用体验上看， 更看重的程序执行的速度</code>。 一些缓存产品 (redis, memcache) 和算法(基数排序)本质就是<code>用空间换时间</code>。</li></ol><hr><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><blockquote><p>冒泡排序（Bubble Sorting）的基本思想是：通过对待排序序列从前向后（从下标较小的元素开始），<code>依次比较相邻元素的值，若发现逆序则交换</code>，使值较大的元素逐渐从前移向后部，就象水底下的气泡一样逐渐向上冒。</p></blockquote><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>依次比较相邻的两个数，将比较小的数放在前面，比较大的数放在后面。</p><ol><li>第一次比较：首先比较第一和第二个数，将小数放在前面，将大数放在后面。</li><li>比较第2和第3个数，将小数 放在前面，大数放在后面。</li></ol><p>　　……</p><ol start="3"><li>如此继续，直到比较到最后的两个数，将小数放在前面，大数放在后面，重复步骤，直至全部排序完成</li><li>在上面一趟比较完成后，最后一个数一定是数组中最大的一个数，所以在比较第二趟的时候，最后一个数是不参加比较的。</li><li>在第二趟比较完成后，倒数第二个数也一定是数组中倒数第二大数，所以在第三趟的比较中，最后两个数是不参与比较的。</li><li>依次类推，每一趟比较次数减少依次</li></ol><p>注意：因为排序的过程中，各元素不断接近自己的位置，<code>如果一趟比较下来没有进行过交换，就说明序列有序</code>，因此要在排序过程中设置一个<code>标志 flag 判断元素是否进行过交换</code>。从而减少不必要的比较。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token comment">/** * 冒泡排序 * @author xhc * @date 2021/6/4 13:08 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BubbleSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment">// int[] arr = {3,9,-1,10,-2};</span>        <span class="token comment">//测试一下冒泡排序的速度，给八万个数据，测试</span>        <span class="token comment">//创建一个80000个的随机的数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">80000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">80000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">800000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//生成【0,8000000】的数</span>        <span class="token punctuation">}</span>        <span class="token class-name">Date</span> date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SimpleDateFormat</span> simpleDateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> date1Str <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序前的时间是 "</span><span class="token operator">+</span> date1Str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//测试冒泡排序</span>        <span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Date</span> date2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> date2Str <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序后的时间是 "</span><span class="token operator">+</span> date2Str<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// System.out.println("排序后");</span>        <span class="token comment">//System.out.println(Arrays.toString(arr));</span>    <span class="token punctuation">}</span>    <span class="token comment">//将前面的冒泡排序算法，封装成一个方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//冒泡排序，时间复杂度O(n^2)</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//标识变量，表示是否进行过交换</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//临时变量</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//如果前面的数比后面的数大，则交换</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//在一趟排序中，一次交换都没有发生过</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//重置flag，进行下次判断</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小结：</p><ol><li><code>N个数字</code>要排序完成，总共进行<code>N-1趟</code>排序，每 <code>i 趟</code>的<code>排序次数为(N-i)次</code></li><li>每一趟排序的次数在逐渐的减少 </li><li>如果我们发现在某趟排序中，没有发生一次交换， 可以提前结束冒泡排序</li><li>冒泡排序总的<code>平均时间复杂度为：O(n^2)</code></li></ol><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><blockquote><p>选择排序也属于内部排序法，是从欲排序的数据中，按指定的规则选出某一元素，再依规定交换位置后达到排序的目的。</p></blockquote><h2 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h2><ol><li>在一个长度为 N 的无序数组中，<code>第一次遍历 n-1 个数</code>找到<code>最小的</code>和第一个数<code>交换</code>。</li><li>第二次从下一个数开始<code>遍历 n-2 个数</code>，<code>找到最小的数和第二个数交换</code>。</li><li>重复以上操作<code>直到第 n-1 次遍历</code>，找到最小的数和第 n-1 个数交换，排序完成。</li></ol><h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token comment">/** * 选择排序 * @author xhc * @date 2021/6/4 14:35 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelectSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment">// int[] arr = {101,34,119,1};</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">80000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">80000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">800000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//生成【0,8000000】的数</span>        <span class="token punctuation">}</span>        <span class="token class-name">Date</span> date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SimpleDateFormat</span> simpleDateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> date1Str <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序前的时间是 "</span><span class="token operator">+</span> date1Str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">selectSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Date</span> date2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> date2Str <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序后的时间是 "</span><span class="token operator">+</span> date2Str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        System.out.println("排序后~");</span><span class="token comment">//        System.out.println(Arrays.toString(arr));</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">selectSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//选择排序的时间复杂度是O(n^2)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">int</span> min <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//说明假定的最小值并不是最小值</span>                    min <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 重置min</span>                    minIndex <span class="token operator">=</span> j<span class="token punctuation">;</span> <span class="token comment">// 重置minIndex</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment">//将最小值，放在arr[i],即交换</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>minIndex <span class="token operator">!=</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>                arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> min<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小结：</p><ol><li><code>N个数字</code>要排序完成，总共进行<code>N-1轮</code>排序，每轮排序只进行 <code>元素数 - 轮数</code> 次比较</li><li>每一轮排序的元素数在逐渐的减少 </li><li>选择排序总的<code>平均时间复杂度为：O(n^2)</code></li></ol><h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><blockquote><p>插入式排序属于内部排序法，是对于欲排序的元素以插入的方式找寻该元素的适当位置，以达到排序的目的。</p></blockquote><h2 id="思路分析-2"><a href="#思路分析-2" class="headerlink" title="思路分析"></a>思路分析</h2><ol><li><p>把<code>n个待排序</code>的元素看成为<code>一个有序表和一个无序表</code></p></li><li><p>开始时有序表中只包含一个元素，无序表中包含有n-1个元素</p></li><li><p>排序过程中<code>每次从无序表中取出第一个元素</code>，把它的排序码依次与有序表元素的排序码进行比较，<code>将它插入到有序表中的适当位置</code>，<code>使之成为新的有序表</code>。</p><p>1）定义一个变量<code>insertVal</code>，用来保存待插入的值，定义一个<code>指针</code>，一开始指向<code>有序表的最后一个元素</code>，用来查找合适的位置。</p><p>2）从数组的<code>第二个元素</code>开始往前比较，此时有序表中只有数组的第一个元素。即一开始用第二个数和他前面的一个比较，如果符合条件（比前面的大或者小，自定义），则将<code>前面的第一个元素往后移一位</code>，待排序的这个元素插入到合适的位置上。</p><p>3）然后再用第三个数和第二个比较，符合则将<code>前面的第一个元素往后移一位</code>，<code>指针继续往前移动</code>，继续往前比较，比如有 5个数 <code>8，15，20，45, 17</code>,17比45小，则将17位置上的值改为45，指针继续向前移动，17也比20小，则将原来45位置上的值改为20，当指针移动到15的位置上时，说明已经找到了位置，此时将17插入到15后面的位置，即原来20的位置上即可。</p><p>4）重复步骤 3），一直到数据全都排完。</p></li></ol><h2 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token comment">/** * 插入排序 * @author xhc * @date 2021/6/4 15:04 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InsertSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//        int[] arr = {101,34,119,1};</span><span class="token comment">//        insertSort(arr);</span><span class="token comment">//        System.out.println(Arrays.toString(arr));</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">80000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">80000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">800000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//生成【0,8000000】的数</span>        <span class="token punctuation">}</span>        <span class="token class-name">Date</span> date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SimpleDateFormat</span> simpleDateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> date1Str <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序前的时间是 "</span><span class="token operator">+</span> date1Str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">insertSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Date</span> date2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> date2Str <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序后的时间是 "</span><span class="token operator">+</span> date2Str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> insertVal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> insertIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//定义待插入的数</span>            insertVal <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            insertIndex <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 即arr[i]的前面这个数的下标</span>            <span class="token comment">// 给insertVal 找到插入的位置</span>            <span class="token comment">//说明</span>            <span class="token comment">//1.insertIndex &gt;= 0 保证在给 insertVal 找插入位置，不越界</span>            <span class="token comment">//2.insertVal &lt; arr[insertIndex] 待插入的数，还没有找到插入位置</span>            <span class="token comment">//3。就需要将arr[insertIndex]后移</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>insertIndex <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> insertVal <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>insertIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                arr<span class="token punctuation">[</span>insertIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>insertIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>                insertIndex<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//当退出while循环时，说明插入的位置找到，insertIndex + 1;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>insertIndex <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">!=</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>                arr<span class="token punctuation">[</span>insertIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> insertVal<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小结：</p><ol><li>每一次插入，待排序的元素都减一，有序序列的元素加一 </li><li>插入排序总的<code>平均时间复杂度为：O(n^2)</code></li></ol><h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><blockquote><p>简单插入排序存在的问题</p></blockquote><p>数组 <code>arr = {2,3,4,5,6,1}</code> ，这时需要插入的数 <code>1(最小),</code> 这样的过程是</p><p>{2,3,4,5,6,6}</p><p>{2,3,4,5,5,6} </p><p>{2,3,4,4,5,6} </p><p>{2,3,3,4,5,6} </p><p>{2,2,3,4,5,6}</p><p>{1,2,3,4,5,6} </p><p>结论: 当<code>需要插入的数是较小的数</code>时，<code>后移的次数明显增多</code>，对<code>效率</code>有影响</p><blockquote><p>希尔排序是希尔（Donald Shell）于 1959 年提出的一种排序算法。希尔排序也是一种<code>插入排序</code>，它是简单插入，排序经过改进之后的一个<code>更高效的版本</code>，也称为<code>缩小增量排序</code>。</p></blockquote><h2 id="思路分析-3"><a href="#思路分析-3" class="headerlink" title="思路分析"></a>思路分析</h2><ol><li><p><strong>希尔排序</strong>是<code>将待排序的数组元素按下标的一定增量（步长）分组</code> ，分成<code>多个子序列</code>，然后对<code>各个子序列</code>进行<code>直接插入排序算法排序</code>；然后依次<code>缩减增量再进行排序</code>，<code>直到增量为1时，进行最后一次直接插入排序，排序结束</code>。</p></li><li><p>增量的首次取值为 <code>gap=length/2</code>，缩小增量以 <code>gap = gap/2</code> 的方式。</p></li><li><p>举例说明：假设有这样一组数 {7,6,9,3,1,5,2,4}</p><p>1）以增量为 gap = length/2 = 4 开始进行分组：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">7</span><span class="token number">1</span><span class="token number">6</span><span class="token number">5</span><span class="token number">9</span><span class="token number">2</span><span class="token number">3</span><span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2）然后我们对每一个分组进行插入排序：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span><span class="token number">7</span><span class="token number">5</span><span class="token number">6</span><span class="token number">2</span><span class="token number">9</span><span class="token number">3</span><span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>此时数组中的数为{1,5,2,3,7,6,9,4}</p><p>3）缩小增量 gap = gap/2 = 2，进行分组：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span><span class="token number">2</span><span class="token number">7</span><span class="token number">9</span><span class="token number">5</span><span class="token number">3</span><span class="token number">6</span><span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4）然后我们对每一个分组进行插入排序：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span><span class="token number">2</span><span class="token number">7</span><span class="token number">9</span><span class="token number">3</span><span class="token number">4</span><span class="token number">5</span><span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此时数组中的数为{1,3,2,4,7,5,9,6}</p><p>5）缩小增量 gap = gap/2 = 1，进行分组并排序：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">分组后：1<span class="token number">3</span><span class="token number">2</span><span class="token number">4</span><span class="token number">7</span><span class="token number">5</span><span class="token number">9</span><span class="token number">6</span>排序后：1<span class="token number">2</span><span class="token number">3</span><span class="token number">4</span><span class="token number">5</span><span class="token number">6</span><span class="token number">7</span><span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h2 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token comment">/** * 希尔排序 * @author xhc * @date 2021/6/5 10:56 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShellSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//        int[] arr = {7,5,1,2,6,4,9,3,8,0};</span><span class="token comment">//        shellSort2(arr);</span><span class="token comment">//        System.out.println(Arrays.toString(arr));</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">80000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">80000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">800000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//生成【0,8000000】的数</span>        <span class="token punctuation">}</span>        <span class="token class-name">Date</span> date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SimpleDateFormat</span> simpleDateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> date1Str <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序前的时间是 "</span><span class="token operator">+</span> date1Str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//测试希尔排序</span>        <span class="token function">shellSort2</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Date</span> date2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> date2Str <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序后的时间是 "</span><span class="token operator">+</span> date2Str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//交换式希尔排序</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">shellSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> gap <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>gap <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>gap <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//遍历各组中所有的元素（共gap组）步长 gap</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> gap<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token punctuation">;</span> j <span class="token operator">-=</span> gap<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// 如果当前元素大于加上步长后的那个元素，就进行交换</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> gap<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> gap<span class="token punctuation">]</span><span class="token punctuation">;</span>                        arr<span class="token punctuation">[</span>j <span class="token operator">+</span> gap<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//对交换式的希尔排序进行优化 -&gt; 移位法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">shellSort2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//增量 gap，并逐步的缩小增量</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> gap <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>gap <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>gap <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//从第 gap 个元素，逐个对其所在的组进行直接插入排序</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> gap <span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> temp <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token comment">//移动</span>                        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span><span class="token punctuation">;</span>                        j <span class="token operator">-=</span> gap<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment">//当退出while后，就给temp找到插入的位置</span>                    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小结：</p><ol><li>希尔排序时简单插入排序的一种改进</li><li>一开始增量是<code>最大的</code>，每一次排序之后，增量以<code>原来的增量的一半进行缩小</code></li><li>最后一次增量肯定缩小为1 </li><li>希尔排序总的<code>平均时间复杂度为：O(nlogn)</code></li></ol><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><blockquote><p>快速排序（Quicksort）是对<strong>冒泡排序的一种改进</strong></p></blockquote><h2 id="思路分析-4"><a href="#思路分析-4" class="headerlink" title="思路分析"></a>思路分析</h2><ol><li>选择一个<code>基数</code>pivot，通过<code>一趟排序</code>将要排序的数据<code>分割成独立的两部分</code>；其中<code>一部分的所有数据都比另外一部分的所有数据都要小</code>。</li><li>再按此方法对<code>这两部分数据分别进行快速排序</code>，整个排序过程可以<code>递归进行</code>，以此达到整个数据变成有序序列。</li><li>基数的选择可以选取任意数，这里选择最左边的数为基数pivot</li></ol><h2 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token comment">/** * 快速排序 * * @author xhc * @date 2021/6/5 14:05 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuickSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//        int[] arr = {-9, 78, 0, 23, -567, 70, 0, 1, 555};</span><span class="token comment">//        quickSort(arr,0,arr.length - 1);</span><span class="token comment">//        System.out.println(Arrays.toString(arr));</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">30000000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">30000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">30000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//生成【0,8000000】的数</span>        <span class="token punctuation">}</span>        <span class="token class-name">Date</span> date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SimpleDateFormat</span> simpleDateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> date1Str <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序前的时间是 "</span> <span class="token operator">+</span> date1Str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//测试快速排序</span>        <span class="token function">quickSort2</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        System.out.println(Arrays.toString(arr));</span>        <span class="token class-name">Date</span> date2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> date2Str <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序后的时间是 "</span> <span class="token operator">+</span> date2Str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">quickSort2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//将数组中的第0个数字 设置为基准数</span>            <span class="token keyword">int</span> pivot <span class="token operator">=</span> arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">//记录需要排序的下标</span>            <span class="token keyword">int</span> low <span class="token operator">=</span> start<span class="token punctuation">;</span>            <span class="token keyword">int</span> high <span class="token operator">=</span> end<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//右边的数比基准数大 则向左移动high指针</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">&gt;</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    high<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token comment">//退出此while循环说明当前a[high]&lt;stard</span>                arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//用high位的数覆盖low位的数</span>                <span class="token comment">//左边的数比基准数小 则向右移动low指针</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    low<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token comment">//退出此while循环说明当前a[low]&gt;stard</span>                arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//low和high指针相遇时 将基准数赋给此下标处</span>            arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> pivot<span class="token punctuation">;</span>            <span class="token comment">//递归</span>            <span class="token comment">//处理所有比基准数小的数字</span>            <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> start<span class="token punctuation">,</span> low <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//处理所有比基准数大的数字</span>            <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> low <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小结：</p><ol><li>快速排序算法当序列中元素的排列比较随机时效率最高，<code>但是当序列中的元素接近有序时，会达到最坏时间复杂度O(n^2)</code></li><li>快速排序总的<code>平均时间复杂度为：O(nlogn)</code></li><li>快速排序的<code>基数可以是数列中的任何数</code>，不过为了方便，一般取<code>数列的最左边的数为基数</code></li></ol><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><blockquote><p>归并排序（MERGE-SORT）是利用<code>归并的思想</code>实现的排序方法，该算法采用经典的<code>分治（divide-and-conquer）策略</code>（分治法将问题分(divide)成一些小的问题然后递归求解，而治(conquer)的阶段则将分的阶段得到的各答案”修补”在一起，即分而治之)。</p></blockquote><p><strong>分而治之</strong></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/datastructure_algorithm/ds18.png"></p><h2 id="思路分析-5"><a href="#思路分析-5" class="headerlink" title="思路分析"></a>思路分析</h2><ol><li><p>将待排序的数列<code>分解成若干个长度为1的子数列</code>，这些子数列都是各自有序的，然后将这些<code>数列两两合并</code>；得到若干个长度为2的<code>有序数列</code>，再将这些<code>数列两两合并</code>；得到若干个长度为4的有序数列，再将他们两两合并；直到合并成一个数列为止；</p></li><li><p>分解时，<code>先将数列按1/2的方式进行分解</code>，然后用同样的方式进行向<code>左和向右递归分解数列</code>；</p></li><li><p>合并时，如何把分裂的元素归并成一个有序的序列呢？</p><p>1）这里需要定义一个<code>临时的数组temp[]</code>,<code>用来存放排好序的序列</code>。<br>2）放置原则是：<code>由于两个序列都已经有序</code>，我们只需要从这两个序列的<code>低位轮番比较</code>，<code>将比较结果小的值放置到temp[]临时数组中</code>，<code>然后继续拿出该值所在序列中的下一个元素比较，直到某个序列中没有元素后</code>，将<code>有剩余元素的序列中剩余的元素依次放置在temp[]临时数组后面即可</code>。此时临时数组里面存放的序列是两个序列的有序合并，最后将<code>临时数组拷贝给原数组即可</code>。</p></li></ol><h2 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token comment">/** * @author xhc * @date 2021/6/6 13:12 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MergeSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//        int[] arr = {8,4,5,7,1,3,6,2};</span><span class="token comment">//         //归并排序需要一个额外空间</span><span class="token comment">//        mergeSort(arr,0,arr.length - 1,temp);</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//生成【0,8000000】的数</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">Date</span> date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SimpleDateFormat</span> simpleDateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> date1Str <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序前的时间是 "</span><span class="token operator">+</span> date1Str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//测试归并排序</span>        <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Date</span> date2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> date2Str <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序后的时间是 "</span><span class="token operator">+</span> date2Str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//分合并方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">//中间索引</span>            <span class="token comment">//向左递归进行分解</span>            <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>left<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//向右递归分解</span>            <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">,</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//合并</span>            <span class="token function">merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>left<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>right<span class="token punctuation">,</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     *     * 合并的方法      * @param arr 排序的原始数组     * @param left 左边有序序列的初始索引     * @param mid 中间索引     * @param right 右边索引     * @param temp 做中转的数组     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> mid<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span> <span class="token comment">//初始化 i 左边有序序列的初始索引</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//初始化 j，右边有序序列的初始索引</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> left<span class="token punctuation">;</span> <span class="token comment">//指向temp数组的当前索引</span>        <span class="token comment">//（一）</span>        <span class="token comment">//先把左右两边（有序）的数据按照规则填充到temp数组</span>        <span class="token comment">//直到左右两边的有序序列，有一边处理完毕为止</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//继续</span>            <span class="token comment">//如果左边的有序序列的当前元素，小于等于右边有序序列的当前元素</span>            <span class="token comment">//即将左边的当前元素，拷贝到temp数组</span>            <span class="token comment">//然后 t++ i++</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                temp<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                t <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>                i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">//反之，将右边有序序列的当前元素 拷贝到temp数组</span>                temp<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                t <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>                j <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">//（二）</span>        <span class="token comment">//把有剩余数据的一边的数据依次全部填充到temp</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//左边的有序序列还有剩余的元素，就全部填充到temp</span>            temp<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            t <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>            temp<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            t <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            j <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//（三）</span>        <span class="token comment">//将temp数组的元素拷贝到 arr</span>        <span class="token comment">//注意，并不是每次都拷贝所有</span><span class="token comment">//        t = 0;</span>        <span class="token keyword">int</span> tempLeft <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>tempLeft <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>tempLeft<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>tempLeft<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//            t += 1;</span>            tempLeft <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小结：</p><ol><li>当待排序列中有8个元素时，只需要归并7次，<code>n个元素也就需要归并n-1次</code></li><li>可以看到，归并次数呈线性增长。相比冒泡、插入排序的呈指数增长，归并排序的效率还是挺快的</li><li>归并排序总的<code>平均时间复杂度为：O(nlogn)</code></li></ol><h1 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h1><blockquote><ol><li>基数排序（radix sort）属于“分配式排序”（distribution sort），又称“桶子法”（bucket sort）或 bin sort，顾 名思义，它是通过键值的各个位的值，将要排序的元素分配至某些“桶”中，达到排序的作用。</li><li>基数排序法是属于稳定性的排序基数排序法的是效率高的稳定性排序法。</li><li>基数排序(Radix Sort)是桶排序的扩展 </li><li>基数排序是 1887 年赫尔曼·何乐礼发明的。它是这样实现的：将整数按位数切割成不同的数字，然后按每个 位数分别比较。</li></ol></blockquote><h2 id="思路分析-6"><a href="#思路分析-6" class="headerlink" title="思路分析"></a>思路分析</h2><ol><li><p>将所有待比较数值统一为同样的数位长度，<code>数位较短的数前面补零</code>。然后，<code>从最低位开始，依次进行一次排序</code>。 这样从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列。</p></li><li><p>举例说明</p><p>将数组 {53, 3, 542, 748, 14, 214} 使用基数排序, 进行升序排序</p><blockquote><p>第一轮排序 {53, 3, 542, 748, 14, 214}</p><p>1)将每个元素的个位数取出，然后看这个数应该放在哪个对应的桶（一个一维数组）</p><p>2)按照这个桶的顺序（一维数组的下标依次取出数据，放入原来的数组）</p></blockquote><table><thead><tr><th align="center">个位</th><th align="center"></th></tr></thead><tbody><tr><td align="center">0</td><td align="center"></td></tr><tr><td align="center">1</td><td align="center"></td></tr><tr><td align="center">2</td><td align="center">542</td></tr><tr><td align="center">3</td><td align="center">53、3</td></tr><tr><td align="center">4</td><td align="center">14、214</td></tr><tr><td align="center">5</td><td align="center"></td></tr><tr><td align="center">6</td><td align="center"></td></tr><tr><td align="center">7</td><td align="center"></td></tr><tr><td align="center">8</td><td align="center">748</td></tr><tr><td align="center">9</td><td align="center"></td></tr></tbody></table><blockquote><p>第二轮排序 {542,53,3,14,214,748}</p><p>1)将每个元素的十位数取出，然后看这个数应该放在哪个对应的桶（一个一维数组）</p><p>2)按照这个桶的顺序（一维数组的下标依次取出数据，放入原来的数组）</p></blockquote><table><thead><tr><th align="center">十位</th><th align="center"></th></tr></thead><tbody><tr><td align="center">0</td><td align="center">3</td></tr><tr><td align="center">1</td><td align="center">14、214</td></tr><tr><td align="center">2</td><td align="center"></td></tr><tr><td align="center">3</td><td align="center"></td></tr><tr><td align="center">4</td><td align="center">542、748</td></tr><tr><td align="center">5</td><td align="center">53</td></tr><tr><td align="center">6</td><td align="center"></td></tr><tr><td align="center">7</td><td align="center"></td></tr><tr><td align="center">8</td><td align="center"></td></tr><tr><td align="center">9</td><td align="center"></td></tr></tbody></table><blockquote><p>第三轮排序 {3,14,214,542,748,53}</p><p>1)将每个元素的百位数取出，然后看这个数应该放在哪个对应的桶（一个一维数组）</p><p>2)按照这个桶的顺序（一维数组的下标依次取出数据，放入原来的数组）</p></blockquote><table><thead><tr><th align="center">百位</th><th align="center"></th></tr></thead><tbody><tr><td align="center">0</td><td align="center">3、14、53</td></tr><tr><td align="center">1</td><td align="center"></td></tr><tr><td align="center">2</td><td align="center">214</td></tr><tr><td align="center">3</td><td align="center"></td></tr><tr><td align="center">4</td><td align="center"></td></tr><tr><td align="center">5</td><td align="center">542</td></tr><tr><td align="center">6</td><td align="center"></td></tr><tr><td align="center">7</td><td align="center">748</td></tr><tr><td align="center">8</td><td align="center"></td></tr><tr><td align="center">9</td><td align="center"></td></tr></tbody></table><p>排序完毕!</p></li></ol><h2 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xhc<span class="token punctuation">.</span>sort</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token comment">/** * @author xhc * @date 2021/6/6 16:20 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RadixSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">53</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">542</span><span class="token punctuation">,</span><span class="token number">748</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">214</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">radixSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//基数排序方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">radixSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//1.得到数组中最大数的位数</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//假设第一个数就是最大数</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> max<span class="token punctuation">)</span><span class="token punctuation">{</span>                max <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">//得到最大数是几位数</span>        <span class="token keyword">int</span> maxLength <span class="token operator">=</span> <span class="token punctuation">(</span>max <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//定义一个二维数组，表示10个桶，每个桶就是一个一维数组</span>        <span class="token comment">//说明</span>        <span class="token comment">//1.二维数组包含10个一维数组</span>        <span class="token comment">//2.为了防止在放入数的时候，数据溢出，则每个一维数组，大小定为arr.length</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bucket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//为了记录每个桶中，实际存放了多少个数据，我们定义一个一维数组来记录每个桶的每次放入的数据个数</span>        <span class="token comment">//可以这里理解</span>        <span class="token comment">//比如： bucketElementCount[0],记录的就是 bucket[0] 桶的放入数据个数</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bucketElementCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//这里使用循环将代码处理</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxLength<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//第一轮（针对每个元素的个位进行排序处理）(每一轮都是重复这个过程，对应的位不一样)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//取出每个元素的对应位的值 Math.pow(10,i) 10的i次方</span>                <span class="token keyword">int</span> digitOfElement <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>                <span class="token comment">//放到对应的桶中</span>                bucket<span class="token punctuation">[</span>digitOfElement<span class="token punctuation">]</span><span class="token punctuation">[</span>bucketElementCount<span class="token punctuation">[</span>digitOfElement<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                bucketElementCount<span class="token punctuation">[</span>digitOfElement<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//按照这个桶的顺序（一位数组的下标依次取出数据，放入到原来的数组）</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment">//遍历每个桶，并将桶中的数据，放入到原数组</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>k <span class="token operator">&lt;</span> bucketElementCount<span class="token punctuation">.</span>length<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//如果桶中有数据，才放入到原数组</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>bucketElementCount<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment">//循环该桶即第k个桶（即第k个一维数组）放入</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>l <span class="token operator">&lt;</span> bucketElementCount<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>l<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token comment">//取出元素放入到arr</span>                        arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> bucket<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>                        index<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment">//第一轮处理后，需要将每个bucketElementCount[k] = 0</span>                bucketElementCount<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第"</span><span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"轮"</span><span class="token operator">+</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小结：</p><ol><li>基数排序是对传统桶排序的扩展，速度很快.</li><li>基数排序是经典的<code>空间换时间的方式</code>，<code>占用内存很大</code>, 当对海量数据排序时，容易造成 <code>OutOfMemoryError</code> 。 </li><li>基数排序是<code>稳定的</code>。</li><li>基数排序总的<code>平均时间复杂度为：O(n^2)</code></li></ol><h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><blockquote><ol><li>堆排序是<code>利用堆</code>这种数据结构而设计的一种排序算法，堆排序是一种选择排序，它的最坏，最好，平均时间复 杂度均为 <code>O(nlogn)</code>，它也是<code>不稳定排序</code>。 </li><li>堆是具有以下性质的<code>完全二叉树</code>：<code>每个结点的值都大于或等于其左右孩子结点的值</code>，称为<code>大顶堆</code>, 注意 : 没有 要求结点的左孩子的值和右孩子的值的大小关系。 </li><li><code>每个结点的值都小于或等于其左右孩子结点的值</code>，称为<code>小顶堆</code>。</li><li>一般<code>升序</code>采用<code>大顶堆</code>，<code>降序</code>采用<code>小顶堆</code>。</li></ol></blockquote><h2 id="思路分析-7"><a href="#思路分析-7" class="headerlink" title="思路分析"></a>思路分析</h2><ol><li>将待排序序列构造成一个<code>大顶堆</code> ；</li><li>此时，整个序列的<code>最大值就是堆顶的根节点</code>； </li><li>将<code>根节点的值（最大值）</code>与<code>末尾元素</code>进行<code>交换</code>，此时<code>末尾就为最大值</code>；</li><li>然后将剩余 n-1 个元素重新构造成一个堆，这样会得到 n 个元素的次小值。如此反复执行，便能得到一个有序序列。</li></ol><h2 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token comment">/** * @author xhc * @date 2021/6/18 15:15 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeapSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">99</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">heapSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//编写一个堆排序的方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">heapSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"堆排序"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//分步完成</span><span class="token comment">//        adjustHeap(arr,1,arr.length);</span><span class="token comment">//        System.out.println("第一次"+ Arrays.toString(arr));</span><span class="token comment">//        adjustHeap(arr,0,arr.length);</span><span class="token comment">//        System.out.println("第二次"+ Arrays.toString(arr));</span>        <span class="token comment">//将无序序列构建成一个堆，根据升序降序需求选择大顶堆和小顶堆</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">adjustHeap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">/*         * 2.将堆顶元素与末尾元素交换，将最大元素“沉”到数组末端         * 3.重新调整结构，使其满足定义，然后继续交换堆顶元素与当前末尾元素，反复执行调整 + 交换步骤，直到整个序列有序         * */</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//交换</span>            temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token function">adjustHeap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     *     * 将一个数组（二叉树），调整成一个大顶堆     * 功能 完成将以 i 对应的非叶子节点的树调整成大顶堆     *     * @param arr    待调整的数组     * @param i      表示非叶子节点在数组中索引     * @param length 表示对多少个元素进行调整     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">adjustHeap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//先取出当前元素的值，保存临时变量</span>        <span class="token comment">//开始调整</span>        <span class="token comment">//说明 从左至右 从下至上调整</span>        <span class="token comment">//1. k = i * 2 + 1  k是i节点的左子节点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> k <span class="token operator">=</span> k <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> length <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//说明左子节点的值小于右子节点的值</span>                k<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&gt;</span> temp<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果子节点大于父节点</span>                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//把较大的值赋给当前节点</span>                i <span class="token operator">=</span> k<span class="token punctuation">;</span> <span class="token comment">//!!! i 指向 k，继续循环比较</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">//当 for 循环结束后，我们已经将以 i 为父节点的树的最大值，放在了最顶（局部）</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span> <span class="token comment">// 将temp值放到调整后的位置</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小结：</p><ol><li>堆排序是一种选择排序</li><li>整体主要由构建<code>初始堆+交换堆顶元素和末尾元素并重建堆</code>两部分组成</li><li>最坏，最好，平均时间复 杂度均为 <code>O(nlogn)</code></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;排序算法的介绍&quot;&gt;&lt;a href=&quot;#排序算法的介绍&quot; class=&quot;headerlink&quot; title=&quot;排序算法的介绍&quot;&gt;&lt;/a&gt;排序算法的介绍&lt;/h1&gt;&lt;p&gt;&lt;code&gt;排序&lt;/code&gt;也称&lt;code&gt;排序算法(Sort Algorithm)&lt;/code&gt;</summary>
      
    
    
    
    <category term="笔记" scheme="http://mjean.life/categories/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="数据结构和算法" scheme="http://mjean.life/categories/%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数据结构" scheme="http://mjean.life/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法" scheme="http://mjean.life/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>递归</title>
    <link href="http://mjean.life/posts/c6654282.html"/>
    <id>http://mjean.life/posts/c6654282.html</id>
    <published>2021-06-21T16:06:29.000Z</published>
    <updated>2022-04-18T12:48:45.668Z</updated>
    
    <content type="html"><![CDATA[<h1 id="递归的概念"><a href="#递归的概念" class="headerlink" title="递归的概念"></a>递归的概念</h1><p><code>递归</code>就是方法<code>自己调用自己</code>，每次调用时传入不同的变量。递归有助于编程者解决复杂的问题，同时可以让代码变得简洁。</p><p>递归需要<code>遵守的重要规则</code>：</p><ol><li>执行一个方法时，<code>会在栈中开辟一个独立的空间</code>。</li><li><code>每个空间的数据（方法的局部变量）</code>是独立的，不会相互影响；</li><li>如果方法中使用的是<code>引用类型变量</code>(比如数组)，就会<code>共享</code>该引用类型的数据.</li><li>递归必须向退出递归的条件逼近，否则就是无限递归，出现<code>StackOverflowError</code></li><li>当一个方法执行完毕，或者遇到return，就会返回，<code>遵守谁调用，就将结果返回给谁</code>，同时当方法执行完毕或者返回时，该方法也就执行完毕。</li></ol><h1 id="递归的应用"><a href="#递归的应用" class="headerlink" title="递归的应用"></a>递归的应用</h1><p><strong>递归用于解决什么样的问题：</strong></p><blockquote><ol><li>各种数学问题如: 8 皇后问题 , 汉诺塔, 阶乘问题, 迷宫问题, 球和篮子的问题（google 编程大赛）</li><li>各种算法中也会使用到递归， 比如快排， 归并排序， 二分查找， 分治算法等</li><li>将用栈解决的问题 –&gt; 递归代码比较简洁</li></ol></blockquote><h2 id="递归-迷宫问题"><a href="#递归-迷宫问题" class="headerlink" title="递归 - 迷宫问题"></a>递归 - 迷宫问题</h2><blockquote><p>有一个迷宫地图，有一些可达的位置，也有一些不可达的位置（障碍、墙壁、边界）。从一个位置到下一个位置只能通过向上（或者向右、或者向下、或者向左）走一步来实现，有一个小球从起点出发，如何找到一条到达终点的通路。</p></blockquote><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/datastructure_algorithm/ds14.png"></p><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><ol><li>使用<code>递归回溯</code>来给小球找路</li><li><code>map</code> 表示<code>地图</code></li><li>i,j 表示从地图的哪个位置开始出发(1,1)</li><li>如果小球能到 <code>map[6][5]</code>位置，则说明通路找到</li><li>约定：当<code>map[i][j]</code>为 <code>0 表示该点没有走过</code>，<code>当为 1 表示墙</code>；<code>2 表示通路可以走</code>；<code>3 表示点已经走过，但是走不通</code></li><li>在走迷宫时，需要确定一个策略（方法） <code>下-&gt;右-&gt;上-&gt;左</code>(策略可以改，策略不同，走的路径不一定相同)，如果该点走不通，再回溯</li></ol><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author xhc * @date 2021/6/2 10:23 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MiGong</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//先创建一个二维数组，模拟迷宫</span>        <span class="token comment">//地图</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//使用 1 表示墙</span>        <span class="token comment">//上下全部置为 1</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            map<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            map<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//左右全部置为 1</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//设置挡板，1 表示</span>        map<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        map<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">//输出地图</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"地图的情况"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//setWay(map,1,1);</span>        <span class="token function">setWay2</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//输出新的地图，小球走过并标识过的递归</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"球走过并标识过的地图的情况"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//使用递归回溯来给小球找路</span>    <span class="token comment">//说明</span>    <span class="token comment">//1.    map 表示地图</span>    <span class="token comment">//2.    i,j 表示从地图的哪个位置开始出发(1,1)</span>    <span class="token comment">//3.    如果小球能到 map[6][5]位置，则说明通路找到</span>    <span class="token comment">//4.    约定：当map[i][j] 为 0 表示该点没有走过，当为 1 表示墙；2 表示通路可以走；3 表示点已经走过，但是走不通</span>    <span class="token comment">//5.    在走迷宫时，需要确定一个策略（方法） 下-&gt;右-&gt;上-&gt;左，如果该点走不通，再回溯</span>    <span class="token comment">/**     *     * @param map 表示地图     * @param i 从哪个位置开始找     * @param j     * @return  如果找到通路，就返回true，否则返回false     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">setWay</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> map<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//通路已经找到 ok</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//如果当前这个点还没有走过</span>                <span class="token comment">//按照策略 下-&gt;右-&gt;上-&gt;左 走</span>                map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">//假定该点是可以走通的</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">setWay</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//向下走</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">setWay</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//向右走</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">setWay</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//向上走</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">setWay</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//向左走</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment">//说明该点是走不通的，是死路</span>                    map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">//如果map[i][j] != 0 ,可能是1,2，3</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//修改找路的策略，改成 上右下左</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">setWay2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> map<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//通路已经找到 ok</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//如果当前这个点还没有走过</span>                <span class="token comment">//按照策略 下-&gt;右-&gt;上-&gt;左 走</span>                map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">//假定该点是可以走通的</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">setWay2</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//向上走</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">setWay2</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//向右走</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">setWay2</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//向下走</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">setWay2</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//向左走</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment">//说明该点是走不通的，是死路</span>                    map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">//如果map[i][j] != 0 ,可能是1,2，3</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="递归-八皇后问题"><a href="#递归-八皇后问题" class="headerlink" title="递归 - 八皇后问题"></a>递归 - 八皇后问题</h2><blockquote><p>八皇后问题，是一个古老而著名的问题，是回溯算法的典型案例。该问题是国际西洋棋棋手马克斯·贝瑟尔于 1848 年提出：在 8×8 格的国际象棋上摆放八个皇后，使其不能互相攻击，即：任意两个皇后都不能处于同一行、 同一列或同一斜线上，问有多少种摆法</p></blockquote><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/datastructure_algorithm/ds15.png"></p><h3 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h3><ol><li>第一个皇后先放第一行第一列 </li><li>第二个皇后放在第二行第一列，然后判断是否 OK， 如果不 OK，继续放在第二列、第三列、<code>依次把所有列都放完</code>，<code>找到一个合适的位置</code> </li><li>继续第三个皇后，还是第一列、第二列……直到<code>第 8 个皇后</code>也能放在一个不冲突的位置，算是找到了<code>一个正确解</code> </li><li>当得到一个正确解时，<code>在栈回退到上一个栈时</code>，就会开始<code>回溯</code>，即将得到第一个皇后，放到第一列的所有正确解， 全部得到</li><li>然后回头继续第一个皇后放第二列，<code>后面继续循环执行 1,2,3,4 的步骤</code></li></ol><p><strong>说明：</strong></p><p>可以使用一个<code>一维数组来表示皇后在棋盘的位置</code>，就是<code>一维数组的下标 + 1 的值， 就是第某个皇后。然后该下标所对应的值 + 1 就是这个皇后所在的列。</code></p><p>例如：一维数组 arr[8]，arr[i]=val =&gt; 表示 第 i+1 个皇后，放在第 i+1 行的 第 val+1 列</p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author xhc * @date 2021/6/2 13:39 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Queen8</span> <span class="token punctuation">{</span>    <span class="token comment">//定义一个max表示共有多少个皇后</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token comment">//定义数组array，保存皇后放置位置的结果，比如 arr = {0,4,7,5,2,6,1,3}</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> judgeCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//测试 8皇后是否正确</span>        <span class="token class-name">Queen8</span> queen8 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Queen8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queen8<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一共有"</span><span class="token operator">+</span>count<span class="token operator">+</span><span class="token string">"解法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一共判断冲突的次数是"</span><span class="token operator">+</span>judgeCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//编写一个方法，放置第n个皇后</span>    <span class="token comment">//特别注意：check 是每一次递归时，进入到check中 都有一次for循环</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> max<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// n=8,其实8个皇后已然放好</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//依次放入皇后，并判断是否冲突</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//先把当前的这个皇后 n，放入到该行的第1列</span>            array<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token comment">//判断当放置第n个皇后到i列时，是否冲突</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">judge</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//不冲突</span>                <span class="token comment">//接着放n+1个皇后，即开始递归</span>                <span class="token function">check</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//如果冲突，就继续执行 array[n] = i;即将第n个皇后，放置在本行的后移的一个位置</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//查看当我们放置第 n 个皇后，就去检测该皇后是否和前面已经摆放的皇后冲突</span>    <span class="token comment">/**     *     * @param n 表示第n个皇后     * @return     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">judge</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>        judgeCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//说明</span>            <span class="token comment">//1. array[i] == array[n] 表示判断 第 n个 皇后是否和前面的n-1个皇后在同一列</span>            <span class="token comment">//2. Math.abs(n - i) == Math.abs(array[n] - array[i]) 表示判断 第 n个 皇后是否和前面的n-1个皇后在同一斜线</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> array<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>n <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">-</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//写一个方法，可以将皇后摆放的位置输出</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>对check()递归回溯的理解：在找到第一组正确的结果后，会返回到上一个栈，会继续执行上一个栈还未执行完的代码，即执行完check()所在的for循环，而for循环的作用就是将皇后依次摆放在各个列，所以在找到第一组结果后，程序会继续将剩余未摆放的列继续尝试摆放，直到所有的列全部走完，当走完后就回到上一个栈，如果进入if语句，就进入递归。重复这个过程。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;递归的概念&quot;&gt;&lt;a href=&quot;#递归的概念&quot; class=&quot;headerlink&quot; title=&quot;递归的概念&quot;&gt;&lt;/a&gt;递归的概念&lt;/h1&gt;&lt;p&gt;&lt;code&gt;递归&lt;/code&gt;就是方法&lt;code&gt;自己调用自己&lt;/code&gt;，每次调用时传入不同的变量。递归有助于编</summary>
      
    
    
    
    <category term="笔记" scheme="http://mjean.life/categories/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="数据结构和算法" scheme="http://mjean.life/categories/%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数据结构" scheme="http://mjean.life/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法" scheme="http://mjean.life/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据结构：栈</title>
    <link href="http://mjean.life/posts/42fe3134.html"/>
    <id>http://mjean.life/posts/42fe3134.html</id>
    <published>2021-06-20T13:47:02.000Z</published>
    <updated>2022-04-18T12:48:45.807Z</updated>
    
    <content type="html"><![CDATA[<h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><ul><li>栈的英文为(stack) 栈是一个<code>先入后出</code>(FILO-First In Last Out)的有序列表。</li><li>栈(stack)是限制线性表中元素的插入和删除只能在线性表的<code>同一端进行</code>的一种特殊线性表。</li><li>允许插入和删除的 一端，为变化的一端，称为<code>栈顶(Top)</code>，另一端为固定的一端，称为<code>栈底(Bottom)</code>。 </li><li>根据栈的定义可知，最先放入栈中元素在栈底，最后放入的元素在栈顶，而删除元素刚好相反，最后放入的元素最先删除，最先放入的元素最后删除。</li></ul><blockquote><p>入栈</p></blockquote><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/datastructure_algorithm/ds12.png"></p><blockquote><p>出栈</p></blockquote><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/datastructure_algorithm/ds13.png"></p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li>子程序的调用：在跳往子程序前，会先将下个指令的地址存到堆栈中，直到子程序执行完后再将地址取出，以回到原来的程序中。 </li><li>处理递归调用：和子程序的调用类似，只是除了储存下一个指令的地址外，也将参数、区域变量等数据存入堆栈中。 </li><li>表达式的转换[中缀表达式转后缀表达式]与求值(实际解决)。 </li><li>二叉树的遍历。  </li><li>图形的深度优先(depth 一 first)搜索法。</li></ul><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><blockquote><p>用数组模拟栈的使用，由于栈是一种有序列表，当然可以使用数组的结构来储存栈的数据内容， 下面我们就用数组模拟栈的出栈，入栈等操作。</p></blockquote><h3 id="数组模拟栈"><a href="#数组模拟栈" class="headerlink" title="数组模拟栈"></a>数组模拟栈</h3><p>思路分析：</p><ol><li><p>使用数组来模拟栈</p></li><li><p>定义一个 <code>top 来表示栈顶</code>，<code>初始化为 -1</code></p></li><li><p>入栈的操作，当有数据加入到栈时， <code>top++; stack[top] = data;</code></p></li><li><p>出栈的操作， <code>int value = stack[top]; top--, return value</code></p></li></ol><p>代码实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token comment">/** * @author xhc * @date 2021/5/25 11:24 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayStackDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//测试 ArrayStack 是否正确</span>        <span class="token comment">//先创建一个 ArrayStack 对象表示栈</span>        <span class="token class-name">ArrayStack</span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayStack</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> key<span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> loop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//判断是否退出菜单</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show: 表示显示栈"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"exit: 退出程序"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"push: 表示添加数据栈（入栈）"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"pop: 表示从栈取出数据（出栈）"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入你的选择"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            key <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">"show"</span><span class="token operator">:</span>                    stack<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"push"</span><span class="token operator">:</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> value <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"pop"</span><span class="token operator">:</span>                    <span class="token keyword">try</span><span class="token punctuation">{</span>                        <span class="token keyword">int</span> res <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"出栈的数据是%d\n"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"exit"</span><span class="token operator">:</span>                    scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    loop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token operator">:</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序退出了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//定义一个 ArrayStack 类 表示栈</span><span class="token keyword">class</span> <span class="token class-name">ArrayStack</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxSize<span class="token punctuation">;</span> <span class="token comment">//栈的大小</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stack<span class="token punctuation">;</span> <span class="token comment">//数组，数组模拟栈，数据就放在该数组</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//top表示栈顶，初始化为-1</span>    <span class="token comment">//构造器</span>    <span class="token keyword">public</span> <span class="token class-name">ArrayStack</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxSize<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maxSize <span class="token operator">=</span> maxSize<span class="token punctuation">;</span>        stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>maxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//栈满</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> top <span class="token operator">==</span> maxSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//栈空</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//入栈 push</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//先判断栈是否满</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"栈满"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        top<span class="token operator">++</span><span class="token punctuation">;</span>        stack<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//出栈 pop</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//先判断栈是否空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//抛出异常</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"栈空，没有数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> value <span class="token operator">=</span> stack<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>        top<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//遍历栈，遍历时需要从栈顶开始显示数据</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"栈空，没有数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//需要从栈顶开始显示数据</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> top<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"stack[%d]=%d\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>stack<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>用数组模拟栈，创建栈的时候就要声明大小，不是很方便，下面用单链表来模拟栈</p></blockquote><h3 id="单链表模拟栈"><a href="#单链表模拟栈" class="headerlink" title="单链表模拟栈"></a>单链表模拟栈</h3><p>思路分析：</p><ol><li><p>定义一个 <code>top 节点作为辅助指针</code>，用来表示链表最后入栈的元素</p></li><li><p>入栈时：</p><p>1）如果链表为空，就直接将入栈的节点作为第一个节点，并且将top指向该节点；</p><p>​    <code>top = node;</code></p><p>2）如果链表不为空，就将入栈的节点的next域指向链表的top指针指向的节点，然后再将top指针指向该节点；</p><p>​    <code>node.setNext(top);</code></p><p>​    <code>top = node;</code></p></li><li><p>出栈时：top指针指向的节点就是最后入栈的节点，也是最先出栈的节点，所以直接取出，然后将top指针后移到下一个节点即可</p><p><code>top.getData()</code></p><p><code>top = top.getNext()</code></p></li><li><p>遍历时：定义一个 <code>temp 节点作为辅助指针</code> ，从 top 开始遍历即可。</p></li></ol><p>代码实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token comment">/** * @author xhc * @date 2021/5/26 10:26 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedListStackDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">LinkedListStack</span> linkedListStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedListStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> key<span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> loop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//判断是否退出菜单</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show: 表示显示栈"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"exit: 退出程序"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"push: 表示添加数据栈（入栈）"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"pop: 表示从栈取出数据（出栈）"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入你的选择"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            key <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">"show"</span><span class="token operator">:</span>                    linkedListStack<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"push"</span><span class="token operator">:</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> value <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    linkedListStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"pop"</span><span class="token operator">:</span>                    <span class="token keyword">try</span><span class="token punctuation">{</span>                        <span class="token keyword">int</span> res <span class="token operator">=</span> linkedListStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"出栈的数据是%d\n"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"exit"</span><span class="token operator">:</span>                    scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    loop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token operator">:</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序退出了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">LinkedListStack</span><span class="token punctuation">{</span>    <span class="token class-name">Node</span> top <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">//栈空</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> top <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//入栈 push</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>top <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            top <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            node<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>top<span class="token punctuation">)</span><span class="token punctuation">;</span>            top <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//出栈 pop</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//先判断栈是否空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//抛出异常</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"栈空，没有数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> value <span class="token operator">=</span> top<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        top <span class="token operator">=</span> top<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//遍历栈，遍历时需要从栈顶开始显示数据</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"栈空，没有数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Node</span> temp <span class="token operator">=</span> top<span class="token punctuation">;</span>        <span class="token comment">//需要从栈顶开始显示数据</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span> next<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNext</span><span class="token punctuation">(</span><span class="token class-name">Node</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="栈实现综合计算器（中缀表达式）"><a href="#栈实现综合计算器（中缀表达式）" class="headerlink" title="栈实现综合计算器（中缀表达式）"></a>栈实现综合计算器（中缀表达式）</h2><blockquote><p>使用栈来实现综合计算器</p></blockquote><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><ol><li><p>创建两个栈，一个为<code>数栈</code>，用来存放数字；另外一个为<code>符号栈</code>，用来存放符号</p></li><li><p>通过一个 <code>index 值</code>（索引），来遍历我们的表达式</p></li><li><p>如果我们<code>发现是一个数字</code>，就直接入数栈</p></li><li><p>如果发现<code>扫描到是一个符号</code>,  就分如下情况</p><p>3.1 如果发现当前的符号栈为空，就直接入栈</p><p>3.2 如果符号栈有操作符，就进行比较，<font color="red"><strong>如果当前的操作符的优先级小于或者等于栈中的操作符</strong></font>， 就需要从数栈中pop出两个数，在从符号栈中pop出一个符号，进行运算，将得到结果，入数栈，然后将当前的操作符入符号栈，<font color="red"> <strong>如果当前的操作符的优先级大于栈中的操作符</strong></font>， 就直接入符号栈</p></li><li><p><strong>当表达式扫描完毕，就顺序的从数栈和符号栈中pop出相应的数和符号，并运行</strong></p></li><li><p><strong>最后在数栈只有一个数字，就是表达式的结果</strong></p></li></ol><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author xhc * @date 2021/5/27 10:38 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> expression <span class="token operator">=</span> <span class="token string">"7*2*2-5+1-5+3-4"</span><span class="token punctuation">;</span>        <span class="token comment">//创建两个栈，一个数栈，一个符号栈</span>        <span class="token class-name">ArrayStack2</span> numStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayStack2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ArrayStack2</span> operStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayStack2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//定义相关的变量</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//用于扫描</span>        <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> oper <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> ch <span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">;</span> <span class="token comment">//将每次扫描得到char保存到 ch</span>        <span class="token class-name">String</span> keepNum<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment">//用于拼接多位数</span>        <span class="token comment">//用 while 循环 扫描 expression</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//依次得到 expression 的每一个字符</span>            ch <span class="token operator">=</span> expression<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//判断ch是什么，然后做相应的处理</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>operStack<span class="token punctuation">.</span><span class="token function">isOper</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果是运算符</span>                <span class="token comment">//判断当前的符号栈是否为空</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>operStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment">//如果符号栈有操作符，就进行比较，如果当前的操作符的优先级小于或者等于栈中的操作符，就需要从数栈中pop出两个数</span>                    <span class="token comment">//在符号栈中pop出一个符号，进行运算，将得到结果，入数栈，然后当前的操作符入符号栈</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>operStack<span class="token punctuation">.</span><span class="token function">priority</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> operStack<span class="token punctuation">.</span><span class="token function">priority</span><span class="token punctuation">(</span>operStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        num1 <span class="token operator">=</span> numStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        num2 <span class="token operator">=</span> numStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        oper <span class="token operator">=</span> operStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        res <span class="token operator">=</span> numStack<span class="token punctuation">.</span><span class="token function">cal</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">,</span>oper<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//把运算结果入数栈</span>                        numStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//然后吧当前的操作符入符号栈</span>                        operStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token comment">//如果当前的操作符的优先级大于栈中的操作符</span>                        operStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment">//如果为空直接入符号栈</span>                    operStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">//如果是数，则直接入数栈</span>                <span class="token comment">//numStack.push(ch - 48);</span>                <span class="token comment">//分析思路</span>                <span class="token comment">//1.当处理多位数时，不能发现是一个数就立即入栈，因为他可能是多位数</span>                <span class="token comment">//2.在处理数时，需要向expression的表达式的index后看一位，如果是数就继续扫描，如果是符号就入栈</span>                <span class="token comment">//3.我们需要定义一个字符变量，用于拼接</span>                <span class="token comment">//处理多位数</span>                keepNum <span class="token operator">+=</span> ch<span class="token punctuation">;</span>                <span class="token comment">//如果ch已经是expression的最后一位，就直接入栈</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> expression<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    numStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>keepNum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment">//判断下一个字符是不是数字，如果是数字，就继续扫描，如果是运算符，则入栈</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>operStack<span class="token punctuation">.</span><span class="token function">isOper</span><span class="token punctuation">(</span>expression<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment">//如果后一位是运算符 则入栈</span>                        numStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>keepNum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//重要：keepNum清空</span>                        keepNum <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment">//index + 1 ，并判断是否扫描到expression最后</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> expression<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">//当表达式扫描完毕，就顺序的从 数栈和符号栈 中pop出相应的数和符号，并运行</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//如果符号栈为空，则计算到最后的结果，数栈中只有一个数字</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>operStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            num1 <span class="token operator">=</span> numStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            num2 <span class="token operator">=</span> numStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            oper <span class="token operator">=</span> operStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res <span class="token operator">=</span> numStack<span class="token punctuation">.</span><span class="token function">cal</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">,</span>oper<span class="token punctuation">)</span><span class="token punctuation">;</span>            numStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//将数栈最后的数，pop出就是结果</span>        <span class="token keyword">int</span> res2 <span class="token operator">=</span> numStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"表达式"</span> <span class="token operator">+</span> expression <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> res2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//先创建一个栈</span><span class="token keyword">class</span> <span class="token class-name">ArrayStack2</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxSize<span class="token punctuation">;</span> <span class="token comment">//栈的大小</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stack<span class="token punctuation">;</span> <span class="token comment">//数组，数组模拟栈，数据就放在该数组</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//top表示栈顶，初始化为-1</span>    <span class="token comment">//构造器</span>    <span class="token keyword">public</span> <span class="token class-name">ArrayStack2</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxSize<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maxSize <span class="token operator">=</span> maxSize<span class="token punctuation">;</span>        stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>maxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//栈满</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> top <span class="token operator">==</span> maxSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//栈空</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//入栈 push</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//先判断栈是否满</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"栈满"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        top<span class="token operator">++</span><span class="token punctuation">;</span>        stack<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//出栈 pop</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//先判断栈是否空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//抛出异常</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"栈空，没有数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> value <span class="token operator">=</span> stack<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>        top<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//增加一个方法，得到栈顶的值，不出栈</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> stack<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//遍历栈，遍历时需要从栈顶开始显示数据</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"栈空，没有数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//需要从栈顶开始显示数据</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> top<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"stack[%d]=%d\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>stack<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//返回运算符的优先级，优先级是程序员来确定，优先级使用数字表示</span>    <span class="token comment">//数字越大，则优先级越高</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">priority</span><span class="token punctuation">(</span><span class="token keyword">int</span> oper<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oper <span class="token operator">==</span> <span class="token string">'*'</span> <span class="token operator">||</span> oper <span class="token operator">==</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oper <span class="token operator">==</span> <span class="token string">'+'</span> <span class="token operator">||</span> oper <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//假定目前的表达式只有 + ，-， *， /</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//判断是不是一个运算符</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isOper</span><span class="token punctuation">(</span><span class="token keyword">char</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> val <span class="token operator">==</span> <span class="token string">'+'</span> <span class="token operator">||</span> val <span class="token operator">==</span> <span class="token string">'-'</span> <span class="token operator">||</span> val <span class="token operator">==</span> <span class="token string">'*'</span> <span class="token operator">||</span> val <span class="token operator">==</span> <span class="token string">'/'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//计算方法</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span><span class="token keyword">int</span> num2<span class="token punctuation">,</span><span class="token keyword">int</span> oper<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//res用于存放计算的结果</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>oper<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">'+'</span><span class="token operator">:</span>                res <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'-'</span><span class="token operator">:</span>                res <span class="token operator">=</span> num2 <span class="token operator">-</span> num1<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'*'</span><span class="token operator">:</span>                res <span class="token operator">=</span> num1 <span class="token operator">*</span> num2<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'/'</span><span class="token operator">:</span>                res <span class="token operator">=</span> num2 <span class="token operator">/</span> num1<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>多位数的处理思路是：</p><ol><li>当处理多位数时，不能发现是一个数就立即入栈，因为他可能是多位数</li><li>在处理数时，需要向expression的表达式的index后看一位，如果是数就继续扫描，如果是符号就入栈</li><li>我们需要定义一个字符变量，用于拼接</li></ol></blockquote><h2 id="逆波兰计算器"><a href="#逆波兰计算器" class="headerlink" title="逆波兰计算器"></a>逆波兰计算器</h2><blockquote><ol><li><p>输入一个逆波兰表达式(后缀表达式)，使用栈(Stack), 计算其结果 </p></li><li><p>支持小括号和多位数整数，因为这里我们主要讲的是数据结构，因此计算器进行简化，只支持对整数的计算</p></li></ol></blockquote><h3 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h3><blockquote><p>例如: (3+4)×5-6 对应的后缀表达式就是 3 4 + 5 × 6 - , 针对后缀表达式求值步骤如下:</p><ol><li>先将”3 4 + 5 * 6 - “ =&gt; 放到 <code>ArrayList</code>中</li><li>对ArrayList 从左至右扫描，将 3 和 4 压入堆栈； </li><li>遇到+运算符，因此弹出 4 和 3（4 为栈顶元素，3 为次顶元素），计算出 3+4 的值，得 7，再将 7 入栈； </li><li>将 5 入栈； </li><li>接下来是×运算符，因此弹出 5 和 7，计算出 7×5=35，将 35 入栈； </li><li>将 6 入栈； </li><li>最后是-运算符，计算出 35-6 的值，即 29，由此得出最终结果</li></ol></blockquote><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Stack</span><span class="token punctuation">;</span><span class="token comment">/** * @author xhc * @date 2021/5/28 10:09 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PolandNotation</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">/**        //先定义一个逆波兰表达式        //1.为了方便，逆波兰表达式的数字和符号使用空格隔开       // String suffixExpression = "30 4 + 5 * 6 -";       String suffixExpression = "4 5 * 8 - 60 + 8 2 / +";        //思路        //1.先将"3 4 + 5 * 6 - " =&gt; 放到 ArrayList中        //2.将ArrayList 传递给一个方法，遍历ArrayList 配合栈 完成计算        List&lt;String&gt; rpnList = getListString(suffixExpression);        System.out.println("rpnList="+rpnList);        int res = calculate(rpnList);        System.out.println("计算的结果是=" + res);         */</span>    <span class="token punctuation">}</span>    <span class="token comment">//完成对逆波兰表达式的运算</span>    <span class="token comment">/**     * 1)从左至右扫描，将3和4压入堆栈     * 2）遇到+运算符，因此弹出4和3（4为栈顶元素，3为次顶元素），计算出3+4的值，得7，再将7入栈，     * 3）将5入栈     * 4）接下来是x运算符，因此弹出5和7，计算出7*5=35，将35入栈     * 5）将6入栈     * 6）最后是 - 运算符，计算出35-6的值，即29，由此得出最终结果     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> ls<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//创建一个栈</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//遍历 ls</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> item<span class="token operator">:</span> ls<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//这里是用正则表达式来取数</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">"\\d+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//匹配的是多位数</span>                <span class="token comment">//入栈</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment">//pop出两个数，并运算，再入栈</span>                <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    res <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    res <span class="token operator">=</span> num1 <span class="token operator">-</span> num2<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    res <span class="token operator">=</span> num1 <span class="token operator">*</span> num2<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    res <span class="token operator">=</span> num1 <span class="token operator">/</span> num2<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"运算符有误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment">//把res 入栈</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token operator">+</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">//最后留在stack中的数据是运算结果</span>        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//编写一个类 可以返回一个运算符 对应的优先级</span><span class="token keyword">class</span> <span class="token class-name">Operation</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> ADD <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> SUB <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> MUL <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> DIV <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment">//写一个方法，返回对应的优先级数字</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">String</span> operation<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>operation<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">"+"</span><span class="token operator">:</span>                result <span class="token operator">=</span> ADD<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"-"</span><span class="token operator">:</span>                result <span class="token operator">=</span> SUB<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"*"</span><span class="token operator">:</span>                result <span class="token operator">=</span> MUL<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"/"</span><span class="token operator">:</span>                result <span class="token operator">=</span> DIV<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不存在该运算符"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="中缀表达式转换为后缀表达式"><a href="#中缀表达式转换为后缀表达式" class="headerlink" title="中缀表达式转换为后缀表达式"></a>中缀表达式转换为后缀表达式</h2><blockquote><p>大家看到，后缀表达式适合计算式进行运算，但是人却不太容易写出来，尤其是表达式很长的情况下，因此在开发中，我们需要将 中缀表达式转成后缀表达式。 </p></blockquote><h3 id="思路分析-2"><a href="#思路分析-2" class="headerlink" title="思路分析"></a>思路分析</h3><ol><li><p>初始化两个栈：<code>运算符栈 s1</code> 和<code>储存中间结果的栈 s2</code>； </p></li><li><p>从<code>左至右扫描</code>中缀表达式； </p></li><li><p>遇到操作数时，将其压 s2； </p></li><li><p>遇到运算符时，比较其与 s1 栈顶运算符的优先级： </p><p>1）如果 <code>s1 为空</code>，或栈顶运算符为<code>左括号“(”</code>，则<code>直接将此运算符入栈</code>； </p><p>2）否则，若<code>优先级比栈顶运算符的高</code>，也将运算符<code>压入 s1</code>； </p><p>3）否则，将 <code>s1 栈顶的运算符弹出并压入到 s2 中</code>，<strong>再次转到(4-1)与 s1 中新的栈顶运算符相比较；</strong> </p></li><li><p>遇到<code>括号</code>时： </p><p>1）<code>如果是左括号“(”，则直接压入 s1</code> </p><p>2）<strong>如果是右括号“)”，则依次弹出 s1 栈顶的运算符，并压入 s2，直到遇到左括号为止，此时将这一对括号丢弃</strong> </p></li><li><p>重复步骤 2 至 5，直到表达式的最右边 </p></li><li><p><strong>将 s1 中剩余的运算符依次弹出并压入 s2</strong> </p></li><li><p><strong>依次弹出 s2 中的元素并输出，结果的逆序即为中缀表达式对应的后缀表达式</strong></p></li></ol><h3 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h3><p>将中缀表达式“<code>1+((2+3)×4)-5</code>”转换为后缀表达式的过程如下</p><blockquote><table><thead><tr><th>扫描到的元素</th><th>s2（栈底 -&gt; 栈顶）</th><th>s1（栈底 -&gt; 栈顶）</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>空</td><td>数字，直接入栈</td></tr><tr><td>+</td><td>1</td><td>+</td><td>s1为空，运算符直接入栈</td></tr><tr><td>(</td><td>1</td><td>+ (</td><td>左括号，直接入栈</td></tr><tr><td>(</td><td>1</td><td>+ ( (</td><td>同上</td></tr><tr><td>2</td><td>1 2</td><td>+ ( (</td><td>数字</td></tr><tr><td>+</td><td>1 2</td><td>+ ( ( +</td><td>s1栈顶为左括号，运算符直接入栈</td></tr><tr><td>3</td><td>1 2 3</td><td>+ ( ( +</td><td>数字</td></tr><tr><td>)</td><td>1 2 3 +</td><td>+ (</td><td>右括号，弹出运算符直至遇到左括号</td></tr><tr><td>X</td><td>1 2 3 +</td><td>+ ( X</td><td>s1栈顶为左括号，运算符直接入栈</td></tr><tr><td>4</td><td>1 2 3 + 4</td><td>+ ( X</td><td>数字</td></tr><tr><td>)</td><td>1 2 3 + 4 X</td><td>+</td><td>右括号，弹出运算符直至遇到左括号</td></tr><tr><td>-</td><td>1 2 3 + 4 X +</td><td>-</td><td>- 与 + 优先级相同，因此弹出 +，再压入 -</td></tr><tr><td>5</td><td>1 2 3 + 4 X + 5</td><td>-</td><td>数字</td></tr><tr><td>到达最右端</td><td><font color="red">1 2 3 + 4 X + 5 -</font></td><td>空</td><td>s1中剩余的运算符</td></tr></tbody></table></blockquote><p>因此结果为：”<code>1 2 3 + 4 X + 5 -</code>“</p><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Stack</span><span class="token punctuation">;</span><span class="token comment">/** * @author xhc * @date 2021/5/28 10:09 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PolandNotation</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//完成将一个中缀表达式转后缀表达式的功能</span>        <span class="token comment">//说明</span>        <span class="token comment">//1.1+((2+3)*4)-5 =&gt; 1 2 3 + 4 * + 5 -</span>        <span class="token comment">//2.因为直接对str 进行操作，不方便，因此先将“1+((2+3)*4)-5” =》 中缀的表达式对应的List</span>        <span class="token comment">//  即 “1+((2+3)*4)-5” =》ArrayList [1,+,(,(,2,+,3,),*,4,),-,5]</span>        <span class="token comment">//3.将得到的中缀表达式对应的List =》 后缀表达式对应的list</span>        <span class="token comment">//  即ArrayList [1,+,(,(,2,+,3,),*,4,),-,5] =》 即ArrayList [1,2,3,+,4,*,+,5,-]</span>        <span class="token class-name">String</span> expression <span class="token operator">=</span> <span class="token string">"1+((2+3)*4)-5"</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> infixExpressionList <span class="token operator">=</span> <span class="token function">toInfixExpressionList</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"中缀表达式对应的List"</span><span class="token operator">+</span>infixExpressionList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> parseSuffixExpressionList <span class="token operator">=</span> <span class="token function">parseSuffixExpressionList</span><span class="token punctuation">(</span>infixExpressionList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后缀表达式对应的List"</span><span class="token operator">+</span>parseSuffixExpressionList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"expression="</span><span class="token operator">+</span><span class="token function">calculate</span><span class="token punctuation">(</span>parseSuffixExpressionList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**        //先定义一个逆波兰表达式        //1.为了方便，逆波兰表达式的数字和符号使用空格隔开       // String suffixExpression = "30 4 + 5 * 6 -";       String suffixExpression = "4 5 * 8 - 60 + 8 2 / +";        //思路        //1.先将"3 4 + 5 * 6 - " =&gt; 放到 ArrayList中        //2.将ArrayList 传递给一个方法，遍历ArrayList 配合栈 完成计算        List&lt;String&gt; rpnList = getListString(suffixExpression);        System.out.println("rpnList="+rpnList);        int res = calculate(rpnList);        System.out.println("计算的结果是=" + res);         */</span>    <span class="token punctuation">}</span>    <span class="token comment">//  将得到的中缀表达式对应的List =》 后缀表达式对应的list</span>    <span class="token comment">//  即ArrayList [1,+,(,(,2,+,3,),*,4,),-,5] =》 即ArrayList [1,2,3,+,4,*,+,5,-]</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">parseSuffixExpressionList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> ls<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//定义两个栈</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//符号栈</span>        <span class="token comment">//说明：因为s2这个栈，在整个转换过程中，没有pop操作，而且后面我们还需要逆序输出</span>        <span class="token comment">//因此比较麻烦，这里我们就不用Stack&lt;String&gt; 直接使用List&lt;String&gt;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//遍历 ls</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> item <span class="token operator">:</span> ls<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//如果是一个数，就加入s2</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">"\\d+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                s2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                s1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//如果是右括号“）”，则依次弹出s1栈顶的运算符，并压入s2，直到遇到左括号为止，此时将这一对括号丢弃</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>s1<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    s2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                s1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//!!!将（ 弹出s1栈，消除小括号</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment">//当item的优先级小于等于 s1 栈顶运算符，将 s1 栈顶的运算弹出并加入到s2中，再次转到（4.1）与s1中新的栈顶运算符相比较</span>                <span class="token comment">//问题：我们缺少一个比较优先级高低的方法</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Operation</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token class-name">Operation</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    s2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment">//还需要将item压入栈</span>                s1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">//将 s1 中剩余的运算符依次弹出并加入 s2</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            s2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> s2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//将中缀表达式转成对应的List</span>    <span class="token keyword">public</span>  <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">toInfixExpressionList</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//定义一个List，存放中缀表达式 对应的内容</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> ls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//这是一个指针，用于遍历 中缀表达式字符串</span>        <span class="token class-name">String</span> str<span class="token punctuation">;</span> <span class="token comment">//对多位数的拼接</span>        <span class="token keyword">char</span> c<span class="token punctuation">;</span><span class="token comment">//每遍历到一个字符，就放入到c</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            <span class="token comment">//如果c是一个非数字，就加入到 ls</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">48</span> <span class="token operator">||</span> <span class="token punctuation">(</span>c<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">57</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ls<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//如果是一个数，需要考虑多位数</span>                str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment">//先将str 置成 ""</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>c<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span><span class="token number">48</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>c<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">57</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    str <span class="token operator">+=</span> c<span class="token punctuation">;</span> <span class="token comment">//拼接</span>                    i<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                ls<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ls<span class="token punctuation">;</span><span class="token comment">//返回</span>    <span class="token punctuation">}</span>    <span class="token comment">//将一个逆波兰表达式，依次将数据和运算符放入到 ArrayList 中</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getListString</span><span class="token punctuation">(</span><span class="token class-name">String</span> suffixExpression<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//将 suffixExpression 分割</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> suffixExpression<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> ele <span class="token operator">:</span> split<span class="token punctuation">)</span><span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//完成对逆波兰表达式的运算</span>    <span class="token comment">/**     * 1)从左至右扫描，将3和4压入堆栈     * 2）遇到+运算符，因此弹出4和3（4为栈顶元素，3为次顶元素），计算出3+4的值，得7，再将7入栈，     * 3）将5入栈     * 4）接下来是x运算符，因此弹出5和7，计算出7*5=35，将35入栈     * 5）将6入栈     * 6）最后是 - 运算符，计算出35-6的值，即29，由此得出最终结果     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> ls<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//创建一个栈</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//遍历 ls</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> item<span class="token operator">:</span> ls<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//这里是用正则表达式来取数</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">"\\d+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//匹配的是多位数</span>                <span class="token comment">//入栈</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment">//pop出两个数，并运算，再入栈</span>                <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    res <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    res <span class="token operator">=</span> num1 <span class="token operator">-</span> num2<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    res <span class="token operator">=</span> num1 <span class="token operator">*</span> num2<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    res <span class="token operator">=</span> num1 <span class="token operator">/</span> num2<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"运算符有误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment">//把res 入栈</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token operator">+</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">//最后留在stack中的数据是运算结果</span>        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//编写一个类 可以返回一个运算符 对应的优先级</span><span class="token keyword">class</span> <span class="token class-name">Operation</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> ADD <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> SUB <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> MUL <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> DIV <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment">//写一个方法，返回对应的优先级数字</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">String</span> operation<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>operation<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">"+"</span><span class="token operator">:</span>                result <span class="token operator">=</span> ADD<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"-"</span><span class="token operator">:</span>                result <span class="token operator">=</span> SUB<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"*"</span><span class="token operator">:</span>                result <span class="token operator">=</span> MUL<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"/"</span><span class="token operator">:</span>                result <span class="token operator">=</span> DIV<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不存在该运算符"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：这里的实现中，将存放中间的s2定义成一个list，因为如果是栈的话，根据后进先出的特点，输出来的结果还得经过逆序转换才能得到正确的结果，所以这里将s2定义为list，得到的结果就是正确结果，无需进行逆序。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;栈&quot;&gt;&lt;a href=&quot;#栈&quot; class=&quot;headerlink&quot; title=&quot;栈&quot;&gt;&lt;/a&gt;栈&lt;/h1&gt;&lt;h2 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h2&gt;&lt;u</summary>
      
    
    
    
    <category term="笔记" scheme="http://mjean.life/categories/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="数据结构和算法" scheme="http://mjean.life/categories/%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数据结构" scheme="http://mjean.life/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法" scheme="http://mjean.life/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据结构：稀疏数组、队列、链表</title>
    <link href="http://mjean.life/posts/cc9b6bbf.html"/>
    <id>http://mjean.life/posts/cc9b6bbf.html</id>
    <published>2021-06-10T03:11:34.000Z</published>
    <updated>2022-04-18T12:48:45.833Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构介绍"><a href="#数据结构介绍" class="headerlink" title="数据结构介绍"></a>数据结构介绍</h1><p><strong>数据结构</strong>是一门研究组织数据方式的学科。</p><p><strong>数据结构</strong>包括：<code>线性结构</code>和<code>非线性结构</code>。</p><h2 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a>线性结构</h2><ol><li><p>线性结构作为最常用的数据结构，其特点是<code>数据元素之间存在一对一</code>的线性关系。</p></li><li><p>线性结构有两种不同的存储结构，即<code>顺序存储结构(数组)和链式存储结构(链表)</code>。<strong>顺序存储的线性表称为顺序表</strong>，<strong>顺序表中的<code>存储元素是连续</code>的。</strong></p></li><li><p>链式存储的线性表称为链表，<strong>链表中的<code>存储元素不一定是连续</code>的</strong>，元素节点中存放数据元素以及相邻元素的地址信息 。</p></li><li><p>线性结构常见的有：<code>数组</code>、<code>队列</code>、<code>链表</code>和<code>栈</code></p></li></ol><h2 id="非线性结构"><a href="#非线性结构" class="headerlink" title="非线性结构"></a>非线性结构</h2><p>非线性结构包括：<code>二维数组</code>，<code>多维数组</code>，<code>广义表</code>，<code>树结构</code>，<code>图结构</code>。</p><h1 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h1><h2 id="实例引入"><a href="#实例引入" class="headerlink" title="实例引入"></a>实例引入</h2><p>在五子棋程序中，一般有存盘退出和续上盘的功能。</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/datastructure_algorithm/ds1.png"></p><p><strong>分析问题：</strong>因为该二维数组的很多值是<code>默认值 0</code>, 因此记录了很多没有意义的数据，所以可以使用<code>稀疏数组</code>来节省空间。</p><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>当一个数组中大部分元素为０，或者为同一个值的数组时，可以使用稀疏数组来保存该数组。</p><p>稀疏数组的处理方法是: </p><ol><li>记录数组<code>一共有几行几列，有多少个不同</code>的值</li><li>把具有不同值的元素的行列及值记录在一个小规模的数组中，从而<code>缩小程序</code>的规模</li></ol><p>稀疏数组举例说明</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/datastructure_algorithm/ds2.png"></p><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><ol><li><p>使用稀疏数组，来保留类似前面的二维数组(棋盘、地图等等)</p></li><li><p>把稀疏数组存盘，并且可以从新恢复原来的二维数组数</p></li><li><p>整体思路分析</p><blockquote><p>二维数组 转 稀疏数组的思路</p><ol><li><p>遍历 原始的二维数组，得到有效数据的个数 sum</p></li><li><p>根据sum 就可以创建 稀疏数组 sparseArr  int[sum + 1] [3]</p></li><li><p>将二维数组的有效数据数据存入到 稀疏数组</p></li></ol><p>稀疏数组转原始的二维数组的思路</p><ol><li><p>先读取稀疏数组的第一行，根据第一行的数据，创建原始的二维数组，比如上面的 chessArr2 = int [11][11]</p></li><li><p>在读取稀疏数组后几行的数据，并赋给 原始的二维数组 即可.</p></li></ol></blockquote></li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileWriter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token comment">/** * @author xhc * @date 2021/5/15 11:37 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SparseArray</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//创建一个原始的二维数组 11*11</span>        <span class="token comment">// 0：表示没有棋子，1：表示黑子，2：表示蓝子</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chessArr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        chessArr1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        chessArr1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment">//输出原始的二维数组</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原始的二维数组"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> row <span class="token operator">:</span> chessArr1<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> data <span class="token operator">:</span> row<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//将二维数组 转 稀疏数组</span>        <span class="token comment">// 1 先遍历二维数组 ，得到非零数据的个数</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">11</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">11</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>chessArr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    sum<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sum="</span><span class="token operator">+</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2 创建对应的稀疏数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sparseArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>sum <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//给稀疏数组赋值</span>        sparseArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>        sparseArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>        sparseArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">;</span>        <span class="token comment">//存放稀疏数组的文件</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:\\array.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//文件写入流</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">FileWriter</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>sum<span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//遍历二维数组，把非0的值放到 spareArr 中</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//count 用于记录第几个非 0 数据</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">11</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">11</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>chessArr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                    sparseArr<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                    out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    sparseArr<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>                    out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    sparseArr<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> chessArr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chessArr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 输出稀疏数组的形式</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"得到的稀疏数组为~~~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> sparseArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t%d\t%d\t\n"</span><span class="token punctuation">,</span>sparseArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>sparseArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>sparseArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将稀疏数组 =》原始的二维数组</span>        <span class="token comment">// 1 先读取稀疏数组的第一行，根据第一行的数据，创建原始的二维数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chessArr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>sparseArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>sparseArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 2 读取稀疏数组的几行数据，赋值给二维数组</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> sparseArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            chessArr2<span class="token punctuation">[</span>sparseArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>sparseArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> sparseArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 输出恢复后的二维数组</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"恢复后的二维数组"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> row <span class="token operator">:</span> chessArr2<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> data <span class="token operator">:</span> row<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><h2 id="队列介绍"><a href="#队列介绍" class="headerlink" title="队列介绍"></a>队列介绍</h2><ol><li><p>队列是一个有序列表，可以用数组或是链表来实现。</p></li><li><p>遵循先入先出的原则。即：先存入队列的数据，要先取出。后存入的要后取出。</p></li><li><p>示意图：(使用数组模拟队列示意图)</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/datastructure_algorithm/ds3.png"></p></li></ol><h2 id="数组模拟队列"><a href="#数组模拟队列" class="headerlink" title="数组模拟队列"></a>数组模拟队列</h2><p>队列本身是有序列表，若使用数组的结构来存储队列的数据，则队列数组的声明如下图, 其中 <code>maxSize</code> 是该队列的最大容量。</p><p>因为队列的输出、输入是分别从前后端来处理，因此需要两个变量 <code>front</code> 及 <code>rear</code> 分别记录队列前后端的下标， <code>front</code> 会随着数据输出而改变，而 <code>rear</code> 则是随着数据输入而改变。</p><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>当我们将数据存入队列时称为<code>”addQueue”</code>，<code>addQueue</code> 的处理需要有两个步骤：</p><ol><li>将尾指针往后移：rear+1 , 当 <code>front == rear</code> 【空】</li><li>若尾指针 rear 小于队列的最大下标 maxSize-1，则将数据存入 rear 所指的数组元素中，否则无法存入数据。 <code>rear == maxSize - 1</code>【满】</li></ol><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token comment">/** * @author xhc * @date 2021/5/19 10:22 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayQueueDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//测试</span>        <span class="token comment">//创建一个队列</span>        <span class="token class-name">ArrayQueue</span> arrayQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayQueue</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> key <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span><span class="token comment">//接收用户输入</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> loop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment">//输出一个菜单</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s(show): 显示队列"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"e(exit): 退出程序"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a(add): 添加数据到队列"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"g(get): 从队列取出数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"h(head): 查看队列头的数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            key <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//接收一个字符</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">'s'</span><span class="token operator">:</span>                    arrayQueue<span class="token punctuation">.</span><span class="token function">showQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'a'</span><span class="token operator">:</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入一个数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> value <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    arrayQueue<span class="token punctuation">.</span><span class="token function">addQueue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'g'</span><span class="token operator">:</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token keyword">int</span> res <span class="token operator">=</span> arrayQueue<span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"取出的数据是%d\n"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'h'</span><span class="token operator">:</span>                    <span class="token keyword">try</span><span class="token punctuation">{</span>                        <span class="token keyword">int</span> res <span class="token operator">=</span> arrayQueue<span class="token punctuation">.</span><span class="token function">headQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"队列头的数据是%d\n"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'e'</span><span class="token operator">:</span>                    scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    loop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token operator">:</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序退出~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//使用数组模拟队列-编写一个ArrayQueue类</span><span class="token keyword">class</span> <span class="token class-name">ArrayQueue</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxSize<span class="token punctuation">;</span> <span class="token comment">//表示数组的最大容量</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> front<span class="token punctuation">;</span> <span class="token comment">//队列头</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> rear<span class="token punctuation">;</span> <span class="token comment">//队列尾</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span> <span class="token comment">//该数组用于存放数据，模拟队列</span>    <span class="token comment">//创建队列的构造器</span>    <span class="token keyword">public</span> <span class="token class-name">ArrayQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> arrMaxSize<span class="token punctuation">)</span><span class="token punctuation">{</span>        maxSize <span class="token operator">=</span> arrMaxSize<span class="token punctuation">;</span>        arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>maxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>        front <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//指向队列头部</span>        rear <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">//指向队列尾部</span>    <span class="token punctuation">}</span>    <span class="token comment">//判断队列是否满</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> rear <span class="token operator">==</span> maxSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//判断队列是否为空</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> front <span class="token operator">==</span> rear<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//添加数据到队列</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//判断队列是否满</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"队列满，不能加入数据~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        rear<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//让 rear 后移</span>        arr<span class="token punctuation">[</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//获取队列数据，出队列</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//判断队列是否空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//抛出异常</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"队列空，不能取数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        front<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//让 front 后移</span>        <span class="token keyword">return</span> arr<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//显示队列的所有数据</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//遍历</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"队列为空，没有数据~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"arr[%d]=%d\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//显示队列的头数据，注意不是取出数据</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">headQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//判断</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"队列空，不能取数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> arr<span class="token punctuation">[</span>front <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="问题分析并优化"><a href="#问题分析并优化" class="headerlink" title="问题分析并优化"></a>问题分析并优化</h3><blockquote><p>问题：目前数组使用一次就不能用， 没有达到复用的效果</p></blockquote><p>优化：将这个数组使用算法，改进成一个<strong>环形的队列</strong>。 <code>取模：%</code></p><h2 id="数组模拟环形队列"><a href="#数组模拟环形队列" class="headerlink" title="数组模拟环形队列"></a>数组模拟环形队列</h2><p>对前面的数组模拟队列的优化，充分利用数组. 因此将数组看做是一个环形的。(<code>取模的方式来实现</code>) </p><h3 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h3><ol><li>对<code>front</code>变量的含义做一个调整：<code>front</code>就指向队列的第一个元素，也就是说<code>arr[front]</code> 就是队列的第一个元素 <code>front的初始值为0</code></li><li>对<code>rear</code>变量的含义做一个调整：<code>rear</code>指向队列的最后一个元素的后一个位置，因为希望空出一个空间（rear指向的空间）做约定（该约定用来判断队列是不是满了）<code>rear 的初始值是0</code></li><li>当队列满时，条件是 <code>(rear + 1) % maxSize == front</code> 【满】</li><li>对队列为空的条件， <code>rear == front</code> 【空】</li><li>. 当我们这样分析， 队列中有效的数据的个数  <code>(rear + maxSize - front) % maxSize</code>  </li><li>我们就可以在原来的队列上修改得到，一个环形队列</li></ol><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token comment">/** * @author xhc * @date 2021/5/19 11:38 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CircleArrayQueueDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试数组模拟环形队列的案列~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CircleArrayQueue</span> circleArrayQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CircleArrayQueue</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> key <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span><span class="token comment">//接收用户输入</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> loop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment">//输出一个菜单</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s(show): 显示队列"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"e(exit): 退出程序"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a(add): 添加数据到队列"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"g(get): 从队列取出数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"h(head): 查看队列头的数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            key <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//接收一个字符</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">'s'</span><span class="token operator">:</span>                    circleArrayQueue<span class="token punctuation">.</span><span class="token function">showQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'a'</span><span class="token operator">:</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入一个数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> value <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    circleArrayQueue<span class="token punctuation">.</span><span class="token function">addQueue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'g'</span><span class="token operator">:</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token keyword">int</span> res <span class="token operator">=</span> circleArrayQueue<span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"取出的数据是%d\n"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'h'</span><span class="token operator">:</span>                    <span class="token keyword">try</span><span class="token punctuation">{</span>                        <span class="token keyword">int</span> res <span class="token operator">=</span> circleArrayQueue<span class="token punctuation">.</span><span class="token function">headQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"队列头的数据是%d\n"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'e'</span><span class="token operator">:</span>                    scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    loop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token operator">:</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序退出~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">CircleArrayQueue</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxSize<span class="token punctuation">;</span> <span class="token comment">//表示数组的最大容量</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> front<span class="token punctuation">;</span> <span class="token comment">//队列头</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> rear<span class="token punctuation">;</span> <span class="token comment">//队列尾的下一个位置</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span> <span class="token comment">//该数组用于存放数据，模拟队列</span>    <span class="token keyword">public</span> <span class="token class-name">CircleArrayQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> arrMaxSize<span class="token punctuation">)</span><span class="token punctuation">{</span>        maxSize <span class="token operator">=</span> arrMaxSize<span class="token punctuation">;</span>        arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>maxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//判断队列是否满</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> maxSize <span class="token operator">==</span> front<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//判断队列是否为空</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> rear <span class="token operator">==</span> front<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//添加数据到队列</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//判断队列是否满</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"队列满，不能加入数据~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 直接将数据加入</span>        arr<span class="token punctuation">[</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token comment">//将 rear 后移，这里考虑到取模</span>        rear <span class="token operator">=</span> <span class="token punctuation">(</span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> maxSize<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//获取队列数据，出队列</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//判断队列是否空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//抛出异常</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"队列空，不能取数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> value <span class="token operator">=</span> arr<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>        front <span class="token operator">=</span> <span class="token punctuation">(</span>front <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> maxSize<span class="token punctuation">;</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//显示队列的所有数据</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//遍历</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"队列为空，没有数据~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 从front开始遍历，遍历多少个元素</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> front<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> front <span class="token operator">+</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"arr[%d]=%d\n"</span><span class="token punctuation">,</span>i <span class="token operator">%</span> maxSize<span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i <span class="token operator">%</span> maxSize<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 求出当前队列有效数据的个数</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>rear <span class="token operator">+</span> maxSize <span class="token operator">-</span> front<span class="token punctuation">)</span> <span class="token operator">%</span> maxSize<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//显示队列的头数据，注意不是取出数据</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">headQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//判断</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"队列空，不能取数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> arr<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="链表介绍"><a href="#链表介绍" class="headerlink" title="链表介绍"></a>链表介绍</h2><p>链表是有序的列表，但是它在内存中是存储如下 (单链表)</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/datastructure_algorithm/ds4.png"></p><ol><li><p>链表是以节点的方式来存储,是链式存储 </p></li><li><p>每个节点包含 <code>data 域</code>， <code>next 域</code>：指向下一个节点.</p></li><li><p>如图：发现链表的各个节点不一定是连续存储. </p></li><li><p>链表分带头节点的链表和没有头节点的链表，根据实际的需求来确定 </p><p>单链表(带头结点) 逻辑结构示意图如下</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/datastructure_algorithm/ds5.png"></p></li></ol><h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><h3 id="实例引入-1"><a href="#实例引入-1" class="headerlink" title="实例引入"></a>实例引入</h3><p>使用带 <code>head 头节点</code>的单向链表实现 ——水浒英雄排行榜管理完成对英雄人物的增删改查操作。</p><h3 id="链表的创建"><a href="#链表的创建" class="headerlink" title="链表的创建"></a>链表的创建</h3><blockquote><p>首先要先创建链表的节点</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/datastructure_algorithm/ds6.png"></p></blockquote><ol><li><p>第一种方法，在添加英雄时，直接添加到链表的尾部</p><blockquote><p>思路分析示意图：</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/datastructure_algorithm/ds7.png"></p><p>思路：</p><ol><li>先创建一个<code>head 头节点</code>， 作用就是表示单链表的头</li><li>后面我们每添加一个节点，就直接加入到 链表的最后</li><li>遍历：通过一个辅助变量遍历，帮助遍历整个链表</li></ol></blockquote></li><li><p>第二种方式在添加英雄时，根据排名将英雄插入到指定位置(如果有这个排名，则添加失败，并给出提示)</p><blockquote><p>思路分析示意图</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/datastructure_algorithm/ds8.png"></p><p>思路：</p><ol><li><p>首先找到新添加的节点的位置, 是通过辅助变量(指针), 通过遍历来搞定</p></li><li><p><code>新的节点.next = temp.next</code></p></li><li><p>将<code>temp.next = 新的节点</code></p></li></ol></blockquote></li></ol><h3 id="修改节点"><a href="#修改节点" class="headerlink" title="修改节点"></a>修改节点</h3><p>思路：先通过遍历根据编号找到该节点，后更新节点内容</p><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/datastructure_algorithm/ds9.png"></p><p>思路：</p><ol><li><p>我们先找到 需要删除的这个节点的<code>前一个节点 temp</code></p></li><li><p><code>temp.next = temp.next.next</code></p></li><li><p>被删除的节点，将不会有其它引用指向，会被垃圾回收机制回收</p></li></ol><h3 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Stack</span><span class="token punctuation">;</span><span class="token comment">/** * @author xhc * @date 2021/5/20 10:33 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleLinkedListDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//进行测试</span>        <span class="token comment">//先创建节点</span>        <span class="token class-name">HeroNode</span> hero1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"宋江"</span><span class="token punctuation">,</span> <span class="token string">"及时雨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HeroNode</span> hero2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"卢俊义"</span><span class="token punctuation">,</span> <span class="token string">"玉麒麟"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HeroNode</span> hero3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"吴用"</span><span class="token punctuation">,</span> <span class="token string">"智多星"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HeroNode</span> hero4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"林冲"</span><span class="token punctuation">,</span> <span class="token string">"豹子头"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HeroNode</span> hero5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"关胜"</span><span class="token punctuation">,</span> <span class="token string">"大刀"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HeroNode</span> hero6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">"秦明"</span><span class="token punctuation">,</span> <span class="token string">"霹雳火"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HeroNode</span> hero7 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">"呼延灼"</span><span class="token punctuation">,</span> <span class="token string">"双鞭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HeroNode</span> hero8 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">"华荣"</span><span class="token punctuation">,</span> <span class="token string">"小李广"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建要给的链表</span>        <span class="token class-name">SingleLinkedList</span> singleLinkedList1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SingleLinkedList</span> singleLinkedList2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SingleLinkedList</span> combineList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//加入</span>        singleLinkedList1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>hero1<span class="token punctuation">)</span><span class="token punctuation">;</span>        singleLinkedList1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>hero3<span class="token punctuation">)</span><span class="token punctuation">;</span>        singleLinkedList1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>hero6<span class="token punctuation">)</span><span class="token punctuation">;</span>        singleLinkedList1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>hero7<span class="token punctuation">)</span><span class="token punctuation">;</span>        singleLinkedList2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>hero2<span class="token punctuation">)</span><span class="token punctuation">;</span>        singleLinkedList2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>hero4<span class="token punctuation">)</span><span class="token punctuation">;</span>        singleLinkedList2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>hero5<span class="token punctuation">)</span><span class="token punctuation">;</span>        singleLinkedList2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>hero8<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//显示两个有序的链表</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"链表1~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        singleLinkedList1<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"链表2~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        singleLinkedList2<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//测试合并链表功能</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"合并后的链表~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        combineList<span class="token punctuation">.</span><span class="token function">setHead</span><span class="token punctuation">(</span><span class="token function">combine</span><span class="token punctuation">(</span>singleLinkedList1<span class="token punctuation">.</span><span class="token function">getHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>singleLinkedList2<span class="token punctuation">.</span><span class="token function">getHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        combineList<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**        //测试一下反转功能        System.out.println("原来链表的情况~~");        singleLinkedList.list();        //逆序打印单链表        System.out.println("逆序打印~~");        reversePrint(singleLinkedList.getHead());        System.out.println("反转后~~");        reverseList(singleLinkedList.getHead());        singleLinkedList.list();         */</span>        <span class="token comment">/**        //加入 按照编号的顺序        singleLinkedList.addByOrder(hero1);        singleLinkedList.addByOrder(hero3);        singleLinkedList.addByOrder(hero4);        singleLinkedList.addByOrder(hero2);        //显示        singleLinkedList.list();        //测试修改节点的代码        HeroNode newHeroNode = new HeroNode(2, "小卢", "玉麒麟~~");        singleLinkedList.update(newHeroNode);        System.out.println("修改后的链表情况~~");        singleLinkedList.list();        //删除一个节点        singleLinkedList.del(1);        singleLinkedList.del(4);        System.out.println("删除后的链表情况~~");        singleLinkedList.list();        //测试求单链表有效个数的方法        System.out.println("有效节点的个数="+getLength(singleLinkedList.getHead()));        //测试是都得到了倒数第k个节点        HeroNode res = findLastIndexNode(singleLinkedList.getHead(), 2);        System.out.println("res="+res);*/</span>    <span class="token punctuation">}</span>    <span class="token comment">//合并两个有序的链表，合并后链表依然有序</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HeroNode</span> <span class="token function">combine</span><span class="token punctuation">(</span><span class="token class-name">HeroNode</span> head1<span class="token punctuation">,</span><span class="token class-name">HeroNode</span> head2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//如果两个链表均为空，则无需合并，直接返回</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head1<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> head2<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">HeroNode</span> combineHead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//如果链表1为空，则合并后的链表指向链表2</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head1<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            combineHead<span class="token punctuation">.</span>next <span class="token operator">=</span> head2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">return</span> combineHead<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>           <span class="token comment">// 将合并后的链表指向head1</span>            combineHead<span class="token punctuation">.</span>next <span class="token operator">=</span> head1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token comment">//temp辅助变量</span>            <span class="token class-name">HeroNode</span> temp <span class="token operator">=</span> combineHead<span class="token punctuation">;</span>            <span class="token class-name">HeroNode</span> cur2 <span class="token operator">=</span> head2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token comment">//next用来存放当前节点的下一个节点</span>            <span class="token class-name">HeroNode</span> next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>cur2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//合并后的链表遍历完后，可以直接将链表2剩下的节点连接至合并后的链表的末尾</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    temp<span class="token punctuation">.</span>next <span class="token operator">=</span> cur2<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment">//在合并链表中，找到第一个大于链表2的节点编号的节点</span>                <span class="token comment">//因为是单链表，找到的节点是位于添加位置的前一个节点，否则无法加入</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>cur2<span class="token punctuation">.</span>no <span class="token operator">&lt;=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">.</span>no<span class="token punctuation">)</span><span class="token punctuation">{</span>                    next <span class="token operator">=</span> cur2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                    cur2<span class="token punctuation">.</span>next <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                    temp<span class="token punctuation">.</span>next <span class="token operator">=</span> cur2<span class="token punctuation">;</span>                    cur2 <span class="token operator">=</span> next<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> combineHead<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//从尾到头遍历链表</span>    <span class="token comment">//可以利用栈，将各个节点压入到栈中，然后利用栈的先进后出的特点，实现逆序打印的效果</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reversePrint</span><span class="token punctuation">(</span><span class="token class-name">HeroNode</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">//空链表，不能打印</span>        <span class="token punctuation">}</span>        <span class="token comment">//创建一个栈，将各个节点压入栈</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HeroNode</span><span class="token punctuation">&gt;</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HeroNode</span> cur <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token comment">//将链表的所有节点压入栈</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">// cur后移，这样就可以压入下一个结点</span>        <span class="token punctuation">}</span>        <span class="token comment">//将栈中的节点进行打印，pop出栈</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//stack的特点是先进后出</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//将单链表反转</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token class-name">HeroNode</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//如果当前链表为空，或者只有一个节点，无需反转，直接返回</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//定义一个辅助的指针，帮助我们遍历原来的链表</span>        <span class="token class-name">HeroNode</span> cur <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token class-name">HeroNode</span> next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//指向当前节点【cur】的下一个结点</span>        <span class="token class-name">HeroNode</span> reverseHead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//遍历原来的链表，没遍历一个节点，就将其取出，并放在新的链表reverseHead 的最前端</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">//先暂时保存当前节点的下一个结点，因为后面需要使用</span>            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> reverseHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">//将cur的下一个结点指向链表的最前端</span>            reverseHead<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">;</span> <span class="token comment">//将cur 连接到新的链表上</span>            cur <span class="token operator">=</span> next<span class="token punctuation">;</span> <span class="token comment">//让cur后移</span>        <span class="token punctuation">}</span>        <span class="token comment">//将 head.next 指向 reverseHead.next 实现单链表的反转</span>        head<span class="token punctuation">.</span>next <span class="token operator">=</span> reverseHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//查找单链表中的倒数第k个节点</span>    <span class="token comment">//思路</span>    <span class="token comment">//1.编写一个方法，接收head节点，同时接收一个index</span>    <span class="token comment">//2.index 表示是倒数第index节点</span>    <span class="token comment">//3.先把链表从头到尾遍历，得到链表的总的长度getLength</span>    <span class="token comment">//4.得到 size 后，我们从链表的第一个开始遍历（size - index）个，就可以得到</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HeroNode</span> <span class="token function">findLastIndexNode</span><span class="token punctuation">(</span><span class="token class-name">HeroNode</span> head<span class="token punctuation">,</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//判断链表是否为空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//没有找到</span>        <span class="token punctuation">}</span>        <span class="token comment">//第一个遍历得到链表的长度(节点个数)</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token function">getLength</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//第二次遍历 size-index 位置，就是我们倒数的第k个节点</span>        <span class="token comment">//先做一个 index 的校验</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;=</span><span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">&gt;</span> size<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//定义辅助变量，for 循环定位到倒数的index</span>        <span class="token class-name">HeroNode</span> cur <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size <span class="token operator">-</span> index<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> cur<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//方法：获取到单链表的节点的个数（如果是带头结点的链表，需求不统计头结点）</span>    <span class="token comment">/**     *     * @param head 链表的头结点     * @return 返回的就是有效节点的个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token class-name">HeroNode</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//空链表</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//定义一个辅助变量</span>        <span class="token class-name">HeroNode</span> cur <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            length<span class="token operator">++</span><span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">//遍历</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> length<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//定义 SingleLinkedList 管理我们的英雄</span><span class="token keyword">class</span> <span class="token class-name">SingleLinkedList</span><span class="token punctuation">{</span>    <span class="token comment">//先初始化一个头结点，头结点不要动，不存房具体的数据</span>    <span class="token keyword">private</span> <span class="token class-name">HeroNode</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//返回头结点</span>    <span class="token keyword">public</span> <span class="token class-name">HeroNode</span> <span class="token function">getHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHead</span><span class="token punctuation">(</span><span class="token class-name">HeroNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//添加节点到单向链表</span>    <span class="token comment">//思路，当不考虑编号顺序时</span>    <span class="token comment">//1.找到当前链表的最后节点</span>    <span class="token comment">//2.将最后一个节点的next指向新的节点</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">HeroNode</span> heroNode<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//因为head节点不能动，因此我们需要一个辅助遍历temp</span>        <span class="token class-name">HeroNode</span> temp <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token comment">//遍历链表，找到最后</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//找到链表的最后</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//如果没有找到最后，就将temp后移</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//当退出 while 循环时，temp 就指向了链表的最后</span>        <span class="token comment">//将最后一个节点的 next 指向新的节点</span>        temp<span class="token punctuation">.</span>next <span class="token operator">=</span> heroNode<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//第二种方式在添加英雄时，根据排名将英雄插入到指定位置</span>    <span class="token comment">//（如果有这个排名，则添加失败，并给出提示）</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addByOrder</span><span class="token punctuation">(</span><span class="token class-name">HeroNode</span> heroNode<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//因为头结点不能动，因此我们仍然通过一个辅助指针（变量）来帮助找到添加的位置</span>        <span class="token comment">//因为单链表，因为我们找的 temp 是位于 添加位置的前一个节点，否则插入不了</span>        <span class="token class-name">HeroNode</span> temp <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// flag 标志添加的编号是否存在，默认为false</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next <span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next<span class="token punctuation">.</span>no <span class="token operator">&gt;</span> heroNode<span class="token punctuation">.</span>no<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//位置找到，就在temp的后面插入</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next<span class="token punctuation">.</span>no <span class="token operator">==</span> heroNode<span class="token punctuation">.</span>no<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//说明希望房添加的 HeroNode 的编号已然存在</span>                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//说明编号存在</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">//后移，遍历当前链表</span>        <span class="token punctuation">}</span>        <span class="token comment">//判断flag的值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//不能添加，说明编号存在</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"准备插入的英雄的编号"</span><span class="token operator">+</span>heroNode<span class="token punctuation">.</span>no<span class="token operator">+</span><span class="token string">"已经存在，不能加入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">//插入到链表中，temp的后面</span>            heroNode<span class="token punctuation">.</span>next <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            temp<span class="token punctuation">.</span>next <span class="token operator">=</span> heroNode<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//修改节点的信息，根据no编号来修改，即 no 编号不能改</span>    <span class="token comment">//说明</span>    <span class="token comment">//1.根据newHeroNode 的 no 来修改即可</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">HeroNode</span> newHeroNode<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//判断是否为空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"链表为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//找到需要修改的节点，根据no编号</span>        <span class="token comment">//定义一个辅助变量</span>        <span class="token class-name">HeroNode</span> temp <span class="token operator">=</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//表示是否找到该节点</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//已经遍历完链表</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>no <span class="token operator">==</span> newHeroNode<span class="token punctuation">.</span>no<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//找到</span>                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//根据flag 判断是否找到要修改的节点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>            temp<span class="token punctuation">.</span>name <span class="token operator">=</span> newHeroNode<span class="token punctuation">.</span>name<span class="token punctuation">;</span>            temp<span class="token punctuation">.</span>nickName <span class="token operator">=</span> newHeroNode<span class="token punctuation">.</span>nickName<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//没有找到</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"没有找到编号%d的节点，不能修改\n"</span><span class="token punctuation">,</span> newHeroNode<span class="token punctuation">.</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//删除节点</span>    <span class="token comment">//思路</span>    <span class="token comment">//1.head 不能动，因此我们需要一个辅助节点，找到待删除节点的前一个节点</span>    <span class="token comment">//2.说明我们在比较时，是temp.next.no 和 删除的节点的no比较</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">HeroNode</span> temp <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//标志是否找到待删除的节点</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//已经到链表的最后</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next<span class="token punctuation">.</span>no <span class="token operator">==</span> no<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//找到的待删除节点的前一个节点temp</span>                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">//temp后移，遍历</span>        <span class="token punctuation">}</span>        <span class="token comment">//判断flag</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//可以删除</span>            temp<span class="token punctuation">.</span>next <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"要删除的节点不存在%d\n"</span><span class="token punctuation">,</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//显示链表（遍历）</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//判断链表是否为空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"链表为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//因为头结点，不能动，因此我们需要一个辅助变量来遍历</span>        <span class="token class-name">HeroNode</span> temp <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//判断是否到链表最后</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//输出节点的信息</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//将temp后移</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//定义 HeroNode ，每个 HeroNode 对象就是一个节点</span><span class="token keyword">class</span> <span class="token class-name">HeroNode</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> no<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> nickName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">HeroNode</span> next<span class="token punctuation">;</span> <span class="token comment">// 指向下一个结点</span>    <span class="token comment">//构造器</span>    <span class="token keyword">public</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">,</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token class-name">String</span> nickName<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>no <span class="token operator">=</span> no<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nickName <span class="token operator">=</span> nickName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//为了显示方法，我们重写 toString</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"HeroNode{"</span> <span class="token operator">+</span>                <span class="token string">"no="</span> <span class="token operator">+</span> no <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", nickName='"</span> <span class="token operator">+</span> nickName <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="单链表相关问题"><a href="#单链表相关问题" class="headerlink" title="单链表相关问题"></a>单链表相关问题</h3><h4 id="求单链表中有效节点的个数"><a href="#求单链表中有效节点的个数" class="headerlink" title="求单链表中有效节点的个数"></a>求单链表中有效节点的个数</h4><blockquote><p>思路：定义一个辅助指针遍历链表，定义一个变量result，每遍历一个节点就result++</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//方法：获取到单链表的节点的个数（如果是带头结点的链表，需求不统计头结点）</span>    <span class="token comment">/**     *     * @param head 链表的头结点     * @return 返回的就是有效节点的个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token class-name">HeroNode</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//空链表</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//定义一个辅助变量</span>        <span class="token class-name">HeroNode</span> cur <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            length<span class="token operator">++</span><span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">//遍历</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> length<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查找单链表中的倒数第k个节点"><a href="#查找单链表中的倒数第k个节点" class="headerlink" title="查找单链表中的倒数第k个节点"></a>查找单链表中的倒数第k个节点</h4><blockquote><p>思路：</p><ol><li>编写一个方法，接收<code>head节点</code>，同时接受一个<code>index</code></li><li>index表示是<code>倒数第index个节点</code></li><li>先把链表从头到尾遍历，得到链表的总长度getLength（这一步可以另写一个求链表总长度的方法，方便使用）</li><li>得到size之后，我们从链表的第一个节点（非head）开始遍历<code>（size-index）</code>个，就可以得到</li><li>如果找到了，则返回该节点，否则返回null</li></ol></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//查找单链表中的倒数第k个节点</span>    <span class="token comment">//思路</span>    <span class="token comment">//1.编写一个方法，接收head节点，同时接收一个index</span>    <span class="token comment">//2.index 表示是倒数第index节点</span>    <span class="token comment">//3.先把链表从头到尾遍历，得到链表的总的长度getLength</span>    <span class="token comment">//4.得到 size 后，我们从链表的第一个开始遍历（size - index）个，就可以得到</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HeroNode</span> <span class="token function">findLastIndexNode</span><span class="token punctuation">(</span><span class="token class-name">HeroNode</span> head<span class="token punctuation">,</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//判断链表是否为空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//没有找到</span>        <span class="token punctuation">}</span>        <span class="token comment">//第一个遍历得到链表的长度(节点个数)</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token function">getLength</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//第二次遍历 size-index 位置，就是我们倒数的第k个节点</span>        <span class="token comment">//先做一个 index 的校验</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;=</span><span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">&gt;</span> size<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//定义辅助变量，for 循环定位到倒数的index</span>        <span class="token class-name">HeroNode</span> cur <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size <span class="token operator">-</span> index<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> cur<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="从尾到头打印单链表（反向遍历）"><a href="#从尾到头打印单链表（反向遍历）" class="headerlink" title="从尾到头打印单链表（反向遍历）"></a>从尾到头打印单链表（反向遍历）</h4><blockquote><p>思路：</p><ol><li>方式1：先将单链表进行反转操作，然后再遍历即可，但是这样做的问题会破坏原来的单链表的结构，<strong>不建议</strong></li><li>方式2：<strong>利用栈数据结构，将各个节点压入到栈中，利用栈的先进后出的特点实现了逆序打印的效果</strong></li></ol></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//从尾到头遍历链表</span>    <span class="token comment">//可以利用栈，将各个节点压入到栈中，然后利用栈的先进后出的特点，实现逆序打印的效果</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reversePrint</span><span class="token punctuation">(</span><span class="token class-name">HeroNode</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">//空链表，不能打印</span>        <span class="token punctuation">}</span>        <span class="token comment">//创建一个栈，将各个节点压入栈</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HeroNode</span><span class="token punctuation">&gt;</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HeroNode</span> cur <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token comment">//将链表的所有节点压入栈</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">// cur后移，这样就可以压入下一个结点</span>        <span class="token punctuation">}</span>        <span class="token comment">//将栈中的节点进行打印，pop出栈</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//stack的特点是先进后出</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="合并两个有序的单链表，合并之后的链表依然有序"><a href="#合并两个有序的单链表，合并之后的链表依然有序" class="headerlink" title="合并两个有序的单链表，合并之后的链表依然有序"></a>合并两个有序的单链表，合并之后的链表依然有序</h4><blockquote><p>可以将一条单链表作为主链，通过遍历另外一条链表，每遍历一个节点就将该节点插入到主链中</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//合并两个有序的链表，合并后链表依然有序</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HeroNode</span> <span class="token function">combine</span><span class="token punctuation">(</span><span class="token class-name">HeroNode</span> head1<span class="token punctuation">,</span><span class="token class-name">HeroNode</span> head2<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment">//如果两个链表均为空，则无需合并，直接返回</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>head1<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> head2<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token class-name">HeroNode</span> combineHead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//如果链表1为空，则合并后的链表指向链表2</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>head1<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           combineHead<span class="token punctuation">.</span>next <span class="token operator">=</span> head2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>           <span class="token keyword">return</span> combineHead<span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>          <span class="token comment">// 将合并后的链表指向head1</span>           combineHead<span class="token punctuation">.</span>next <span class="token operator">=</span> head1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>           <span class="token comment">//temp辅助变量</span>           <span class="token class-name">HeroNode</span> temp <span class="token operator">=</span> combineHead<span class="token punctuation">;</span>           <span class="token class-name">HeroNode</span> cur2 <span class="token operator">=</span> head2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>           <span class="token comment">//next用来存放当前节点的下一个节点</span>           <span class="token class-name">HeroNode</span> next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>           <span class="token keyword">while</span> <span class="token punctuation">(</span>cur2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token comment">//合并后的链表遍历完后，可以直接将链表2剩下的节点连接至合并后的链表的末尾</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                   temp<span class="token punctuation">.</span>next <span class="token operator">=</span> cur2<span class="token punctuation">;</span>                   <span class="token keyword">break</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               <span class="token comment">//在合并链表中，找到第一个大于链表2的节点编号的节点</span>               <span class="token comment">//因为是单链表，找到的节点是位于添加位置的前一个节点，否则无法加入</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>cur2<span class="token punctuation">.</span>no <span class="token operator">&lt;=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">.</span>no<span class="token punctuation">)</span><span class="token punctuation">{</span>                   next <span class="token operator">=</span> cur2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                   cur2<span class="token punctuation">.</span>next <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                   temp<span class="token punctuation">.</span>next <span class="token operator">=</span> cur2<span class="token punctuation">;</span>                   cur2 <span class="token operator">=</span> next<span class="token punctuation">;</span>               <span class="token punctuation">}</span>               temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token keyword">return</span> combineHead<span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="单链表的反转"><a href="#单链表的反转" class="headerlink" title="单链表的反转"></a>单链表的反转</h4><blockquote><p>思路：</p><ol><li>定义一个节点，用于做反转后的链表的头节点；</li><li>定义一个辅助节点，用于遍历；</li><li>定义一个节点，用来保存当前节点的下一个节点；</li><li>每遍历到一个节点，就将该节点放到新的链表的最前面；</li><li>遍历完后，将原来链表的头节点的next指向新链表的next即可</li></ol></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//将单链表反转</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token class-name">HeroNode</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//如果当前链表为空，或者只有一个节点，无需反转，直接返回</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//定义一个辅助的指针，帮助我们遍历原来的链表</span>        <span class="token class-name">HeroNode</span> cur <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token class-name">HeroNode</span> next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//指向当前节点【cur】的下一个结点</span>        <span class="token class-name">HeroNode</span> reverseHead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//遍历原来的链表，没遍历一个节点，就将其取出，并放在新的链表reverseHead 的最前端</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">//先暂时保存当前节点的下一个结点，因为后面需要使用</span>            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> reverseHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">//将cur的下一个结点指向链表的最前端</span>            reverseHead<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">;</span> <span class="token comment">//将cur 连接到新的链表上</span>            cur <span class="token operator">=</span> next<span class="token punctuation">;</span> <span class="token comment">//让cur后移</span>        <span class="token punctuation">}</span>        <span class="token comment">//将 head.next 指向 reverseHead.next 实现单链表的反转</span>        head<span class="token punctuation">.</span>next <span class="token operator">=</span> reverseHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><h3 id="实例引入-2"><a href="#实例引入-2" class="headerlink" title="实例引入"></a>实例引入</h3><p>管理单向链表的缺点分析: </p><ol><li>单向链表，查找的方向只能是一个方向，而双向链表可以向前或者向后查找。 </li><li>单向链表不能自我删除，需要靠辅助节点，而双向链表，则可以自我删除，所以前面我们<font color="red"><strong>单链表删除节点时，总是找到 temp,temp 是待删除节点的前一个节点。</strong> </font></li></ol><h3 id="双向链表的增删改查"><a href="#双向链表的增删改查" class="headerlink" title="双向链表的增删改查"></a>双向链表的增删改查</h3><p>思路分析：</p><ol><li><p>遍历和单链表一样，只是可以向前，也可以向后查找</p></li><li><p>添加 (默认添加到双向链表的最后</p><p>1）先找到双向链表的最后这个节点 </p><p>2）<code>temp.next = newHeroNode</code> </p><p>3）<code>newHeroNode.pre = temp;</code> </p></li><li><p>修改思路和原来的单向链表一样. </p></li><li><p>删除 </p><p>1）因为是双向链表，因此，我们可以实现<code>自我删除</code>某个节点 </p><p>2）直接找到要删除的这个节点，比如 temp </p><p>3）<code>temp.pre.next = temp.next</code> </p><p>4）<code>temp.next.pre = temp.pre;</code></p></li></ol><h3 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author xhc * @date 2021/5/22 10:03 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DoubleLinkedListDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//测试</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"双向链表的测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//先创建节点</span>        <span class="token class-name">HeroNode2</span> hero1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"宋江"</span><span class="token punctuation">,</span> <span class="token string">"及时雨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HeroNode2</span> hero2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode2</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"卢俊义"</span><span class="token punctuation">,</span> <span class="token string">"玉麒麟"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HeroNode2</span> hero3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode2</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"吴用"</span><span class="token punctuation">,</span> <span class="token string">"智多星"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HeroNode2</span> hero4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode2</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"林冲"</span><span class="token punctuation">,</span> <span class="token string">"豹子头"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建一个双向链表</span>        <span class="token class-name">DoubleLinkedList</span> doubleLinkedList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DoubleLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**        doubleLinkedList.add(hero1);        doubleLinkedList.add(hero2);        doubleLinkedList.add(hero3);        doubleLinkedList.add(hero4);        doubleLinkedList.list();        //修改        HeroNode2 newHeroNode = new HeroNode2(4, "公孙胜", "入云龙");        doubleLinkedList.update(newHeroNode);        System.out.println("修改后的链表情况");        doubleLinkedList.list();        //删除        doubleLinkedList.del(3);        System.out.println("删除后的链表情况");        doubleLinkedList.list();         */</span>        <span class="token comment">//测试根据排名添加</span>        <span class="token class-name">HeroNode2</span> hero5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode2</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"关胜"</span><span class="token punctuation">,</span> <span class="token string">"大刀"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HeroNode2</span> hero8 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode2</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">"华荣"</span><span class="token punctuation">,</span> <span class="token string">"小李广"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HeroNode2</span> hero6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode2</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">"秦明"</span><span class="token punctuation">,</span> <span class="token string">"霹雳火"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HeroNode2</span> hero7 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode2</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">"呼延灼"</span><span class="token punctuation">,</span> <span class="token string">"双鞭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试根据排名添加"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        doubleLinkedList<span class="token punctuation">.</span><span class="token function">addByOrder</span><span class="token punctuation">(</span>hero5<span class="token punctuation">)</span><span class="token punctuation">;</span>        doubleLinkedList<span class="token punctuation">.</span><span class="token function">addByOrder</span><span class="token punctuation">(</span>hero8<span class="token punctuation">)</span><span class="token punctuation">;</span>        doubleLinkedList<span class="token punctuation">.</span><span class="token function">addByOrder</span><span class="token punctuation">(</span>hero6<span class="token punctuation">)</span><span class="token punctuation">;</span>        doubleLinkedList<span class="token punctuation">.</span><span class="token function">addByOrder</span><span class="token punctuation">(</span>hero7<span class="token punctuation">)</span><span class="token punctuation">;</span>        doubleLinkedList<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">DoubleLinkedList</span><span class="token punctuation">{</span>    <span class="token comment">//先初始化一个头结点，头结点不要动，不存房具体的数据</span>    <span class="token keyword">private</span> <span class="token class-name">HeroNode2</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode2</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//返回头结点</span>    <span class="token keyword">public</span> <span class="token class-name">HeroNode2</span> <span class="token function">getHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHead</span><span class="token punctuation">(</span><span class="token class-name">HeroNode2</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//修改一个节点的内容，可以看到双向链表的节点内容修改和单向链表的一样</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">HeroNode2</span> newHeroNode<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//判断是否为空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"链表为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//找到需要修改的节点，根据no编号</span>        <span class="token comment">//定义一个辅助变量</span>        <span class="token class-name">HeroNode2</span> temp <span class="token operator">=</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//表示是否找到该节点</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//已经遍历完链表</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>no <span class="token operator">==</span> newHeroNode<span class="token punctuation">.</span>no<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//找到</span>                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//根据flag 判断是否找到要修改的节点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>            temp<span class="token punctuation">.</span>name <span class="token operator">=</span> newHeroNode<span class="token punctuation">.</span>name<span class="token punctuation">;</span>            temp<span class="token punctuation">.</span>nickName <span class="token operator">=</span> newHeroNode<span class="token punctuation">.</span>nickName<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//没有找到</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"没有找到编号%d的节点，不能修改\n"</span><span class="token punctuation">,</span> newHeroNode<span class="token punctuation">.</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//添加一个节点到双向链表的最后</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">HeroNode2</span> heroNode<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//因为head节点不能动，因此我们需要一个辅助遍历temp</span>        <span class="token class-name">HeroNode2</span> temp <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token comment">//遍历链表，找到最后</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//找到链表的最后</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//如果没有找到最后，就将temp后移</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//当退出 while 循环时，temp 就指向了链表的最后</span>        <span class="token comment">//形成一个双向链表</span>        temp<span class="token punctuation">.</span>next <span class="token operator">=</span> heroNode<span class="token punctuation">;</span>        heroNode<span class="token punctuation">.</span>pre <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//根据排名添加</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addByOrder</span><span class="token punctuation">(</span><span class="token class-name">HeroNode2</span> heroNode<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//因为头结点不能动，因此我们仍然通过一个辅助指针（变量）来帮助找到添加的位置</span>        <span class="token class-name">HeroNode2</span> temp <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// flag 标志添加的编号是否存在，默认为false</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next <span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next<span class="token punctuation">.</span>no <span class="token operator">&gt;</span> heroNode<span class="token punctuation">.</span>no<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//位置找到，就在temp的后面插入</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next<span class="token punctuation">.</span>no <span class="token operator">==</span> heroNode<span class="token punctuation">.</span>no<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//说明希望房添加的 HeroNode 的编号已然存在</span>                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//说明编号存在</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">//后移，遍历当前链表</span>        <span class="token punctuation">}</span>        <span class="token comment">//判断flag的值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//不能添加，说明编号存在</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"准备插入的英雄的编号"</span><span class="token operator">+</span>heroNode<span class="token punctuation">.</span>no<span class="token operator">+</span><span class="token string">"已经存在，不能加入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">//插入到链表中，temp的后面</span>            heroNode<span class="token punctuation">.</span>next <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            temp<span class="token punctuation">.</span>next <span class="token operator">=</span> heroNode<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>heroNode<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                heroNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>pre <span class="token operator">=</span> heroNode<span class="token punctuation">;</span>                heroNode<span class="token punctuation">.</span>pre <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                heroNode<span class="token punctuation">.</span>pre <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//从双向链表中删除一个节点</span>    <span class="token comment">//说明</span>    <span class="token comment">//1.对于双向链表，我们可以直接找到要删除的这个节点</span>    <span class="token comment">//2.找到后，自我删除即可</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//判断当前链表是否为空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"链表为空，无法删除"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">HeroNode2</span> temp <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">//辅助变量</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//标志是否找到待删除的节点</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//已经到链表的最后</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>no <span class="token operator">==</span> no<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//找到的待删除节点的前一个节点temp</span>                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">//temp后移，遍历</span>        <span class="token punctuation">}</span>        <span class="token comment">//判断flag</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//可以删除</span>            temp<span class="token punctuation">.</span>pre<span class="token punctuation">.</span>next <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token comment">//这里代码有问题</span>            <span class="token comment">//如果是最后一个节点，就不需要执行下面这句话，否则会出现空指针异常</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                temp<span class="token punctuation">.</span>next<span class="token punctuation">.</span>pre <span class="token operator">=</span> temp<span class="token punctuation">.</span>pre<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"要删除的节点不存在%d\n"</span><span class="token punctuation">,</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//遍历双向链表的方法</span>    <span class="token comment">//显示链表（遍历）</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//判断链表是否为空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"链表为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//因为头结点，不能动，因此我们需要一个辅助变量来遍历</span>        <span class="token class-name">HeroNode2</span> temp <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//判断是否到链表最后</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//输出节点的信息</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//将temp后移</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//定义 HeroNode ，每个 HeroNode 对象就是一个节点</span><span class="token keyword">class</span> <span class="token class-name">HeroNode2</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> no<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> nickName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">HeroNode2</span> next<span class="token punctuation">;</span> <span class="token comment">// 指向下一个结点</span>    <span class="token keyword">public</span> <span class="token class-name">HeroNode2</span> pre<span class="token punctuation">;</span> <span class="token comment">//指向前一个节点</span>    <span class="token comment">//构造器</span>    <span class="token keyword">public</span> <span class="token class-name">HeroNode2</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">,</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token class-name">String</span> nickName<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>no <span class="token operator">=</span> no<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nickName <span class="token operator">=</span> nickName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//为了显示方法，我们重写 toString</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"HeroNode{"</span> <span class="token operator">+</span>                <span class="token string">"no="</span> <span class="token operator">+</span> no <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", nickName='"</span> <span class="token operator">+</span> nickName <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="单向环形链表"><a href="#单向环形链表" class="headerlink" title="单向环形链表"></a>单向环形链表</h2><h3 id="Josephu（约瑟夫-约瑟夫环）问题介绍"><a href="#Josephu（约瑟夫-约瑟夫环）问题介绍" class="headerlink" title="Josephu（约瑟夫/约瑟夫环）问题介绍"></a>Josephu（约瑟夫/约瑟夫环）问题介绍</h3><blockquote><p>Josephu 问题为：设编号为 1，2，… n 的 n 个人围坐一圈，约定编号为 k（1&lt;=k&lt;=n）的人从 1 开始报数，数到 m 的那个人出列，它的下一位又从 1 开始报数，数到 m 的那个人又出列，依次类推，直到所有人出列为止，由此产生一个出队编号的序列。</p></blockquote><h3 id="构建单向环形链表"><a href="#构建单向环形链表" class="headerlink" title="构建单向环形链表"></a>构建单向环形链表</h3><p>示意图如下：</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/datastructure_algorithm/ds10.png"></p><p><strong>构建单向环形链表思路：</strong></p><ol><li><p>先创建第一个节点, 让 first 指向该节点，并形成环形</p></li><li><p>后面当我们每创建一个新的节点，就把该节点，加入到已有的环形链表中即可.</p></li></ol><p><strong>遍历</strong>环形链表</p><ol><li><p>先让一个辅助指针(变量) curBoy，指向first节点</p></li><li><p>然后通过一个while循环遍历该环形链表即可。当 <code>curBoy.next == first</code> 结束。</p></li></ol><h3 id="Josephu问题"><a href="#Josephu问题" class="headerlink" title="Josephu问题"></a>Josephu问题</h3><blockquote><p>根据用户的输入，生成一个小孩出圈的顺序</p></blockquote><p>示意图如下：</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/datastructure_algorithm/ds11.png"></p><p>思路：</p><ol><li><p>需求创建一个辅助指针(变量) <code>helper</code> , 事先应该指向环形链表的最后一个节点.</p></li><li><p>报数前，先让 <code>first</code> 和 <code>helper</code> 移动 <code>k - 1</code>次</p></li><li><p>当小孩报数时，让first 和 helper 指针<code>同时的移动 m - 1 次</code></p></li><li><p>这时就可以将<code>first 指向的小孩节点 出圈</code></p><p><code>first = first .next</code> </p><p><code>helper.next = first</code> </p><p>原来first 指向的节点就没有任何引用，就会被回收</p></li></ol><h3 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author xhc * @date 2021/5/25 9:46 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Josephu</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//测试 看看构建环形链表，和遍历是否ok</span>        <span class="token class-name">CircleSingleLinkedList</span> circleSingleLinkedList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CircleSingleLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        circleSingleLinkedList<span class="token punctuation">.</span><span class="token function">addBoy</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        circleSingleLinkedList<span class="token punctuation">.</span><span class="token function">showBoy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//测试 小孩出圈是否正确</span>        circleSingleLinkedList<span class="token punctuation">.</span><span class="token function">countBoy</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//创建一个环形的单向链表</span><span class="token keyword">class</span> <span class="token class-name">CircleSingleLinkedList</span><span class="token punctuation">{</span>    <span class="token comment">//创建一个first节点，当前没有编号</span>    <span class="token keyword">private</span> <span class="token class-name">Boy</span> first <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">//添加小孩节点，构建成一个环形的链表</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addBoy</span><span class="token punctuation">(</span><span class="token keyword">int</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//nums做一个数据校验</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"nums的值不正确"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Boy</span> curBoy <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//辅助指针，帮助构建环形链表</span>        <span class="token comment">//使用for循环来创建环形链表</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> nums<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//根据编号，创建小孩节点</span>            <span class="token class-name">Boy</span> boy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boy</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//如果是第一个小孩</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                first <span class="token operator">=</span> boy<span class="token punctuation">;</span>                first<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//构成环</span>                curBoy <span class="token operator">=</span> first<span class="token punctuation">;</span> <span class="token comment">//让curBoy指向第一个小孩</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                curBoy<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>boy<span class="token punctuation">)</span><span class="token punctuation">;</span>                boy<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>                curBoy <span class="token operator">=</span> boy<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//遍历当前的环形链表</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showBoy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//判断链表是否为空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没有任何小孩~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//因为fiest不能动，因此我们仍然使用一个辅助指针完成遍历</span>        <span class="token class-name">Boy</span> curBoy <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"小孩的编号 %d \n"</span><span class="token punctuation">,</span>curBoy<span class="token punctuation">.</span><span class="token function">getNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>curBoy<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> first<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//说明已经遍历完毕</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            curBoy <span class="token operator">=</span> curBoy<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//后移</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//根据用户的输入，计算出小孩出圈的顺序</span>    <span class="token comment">/**     *     * @param startNo 表示从第几个小孩开始数数     * @param countNum 表示数几下     * @param nums 表示最初有多少个小孩在圈中     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">countBoy</span><span class="token punctuation">(</span><span class="token keyword">int</span> startNo<span class="token punctuation">,</span><span class="token keyword">int</span> countNum<span class="token punctuation">,</span><span class="token keyword">int</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//先对数据进行检验</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> startNo <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> startNo <span class="token operator">&gt;</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"参数输入有误，请重新输入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//创建一个辅助指针，帮助完成小孩出圈</span>        <span class="token class-name">Boy</span> helper <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token comment">//需求创建一个辅助指针（变量）helper,事先应该指向环形链表的最后这个节点</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>helper<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> first<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//说明helper指向最后一个小孩节点</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            helper <span class="token operator">=</span> helper<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//小孩报数前，先让first 和 helper 移动 k-1次</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> startNo <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            first <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            helper <span class="token operator">=</span> helper<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//当小孩报数时，让first 和 helper 指针同时 移动 m-1 次，然后出圈</span>        <span class="token comment">//这里是一个循环操作，直到圈中只有一个节点</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>helper <span class="token operator">==</span> first<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//说明圈中只有一个节点</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//让 first 和 helper 指针同时移动 countNum - 1</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> countNum <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                first <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                helper <span class="token operator">=</span> helper<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//这时first指向的节点，就是要出圈的小孩节点</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"小孩%d出圈\n"</span><span class="token punctuation">,</span>first<span class="token punctuation">.</span><span class="token function">getNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//这时将first指向的小孩节点出圈</span>            first <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            helper<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"最后留在圈中的小孩编号%d\n"</span><span class="token punctuation">,</span>first<span class="token punctuation">.</span><span class="token function">getNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//创建一个Boy类，表示一个节点</span><span class="token keyword">class</span> <span class="token class-name">Boy</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> no<span class="token punctuation">;</span> <span class="token comment">//编号</span>    <span class="token keyword">private</span> <span class="token class-name">Boy</span> next<span class="token punctuation">;</span> <span class="token comment">//指向下一个节点，默认null</span>    <span class="token keyword">public</span> <span class="token class-name">Boy</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>no <span class="token operator">=</span> no<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> no<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNo</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>no <span class="token operator">=</span> no<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Boy</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNext</span><span class="token punctuation">(</span><span class="token class-name">Boy</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据结构介绍&quot;&gt;&lt;a href=&quot;#数据结构介绍&quot; class=&quot;headerlink&quot; title=&quot;数据结构介绍&quot;&gt;&lt;/a&gt;数据结构介绍&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;数据结构&lt;/strong&gt;是一门研究组织数据方式的学科。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据</summary>
      
    
    
    
    <category term="笔记" scheme="http://mjean.life/categories/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="数据结构和算法" scheme="http://mjean.life/categories/%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数据结构" scheme="http://mjean.life/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法" scheme="http://mjean.life/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>项目总结：guli-college</title>
    <link href="http://mjean.life/posts/196bb79f.html"/>
    <id>http://mjean.life/posts/196bb79f.html</id>
    <published>2021-06-02T08:33:34.000Z</published>
    <updated>2022-04-18T12:48:45.796Z</updated>
    
    <content type="html"><![CDATA[<h1 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h1><p>在线教育项目采用B2C商业模式，使用微服务架构，项目采用前后端分离开发</p><h1 id="项目的功能点"><a href="#项目的功能点" class="headerlink" title="项目的功能点"></a>项目的功能点</h1><h2 id="后台管理系统功能"><a href="#后台管理系统功能" class="headerlink" title="后台管理系统功能"></a>后台管理系统功能</h2><h3 id="登录功能（SpringSecurity框架）"><a href="#登录功能（SpringSecurity框架）" class="headerlink" title="登录功能（SpringSecurity框架）"></a>登录功能（SpringSecurity框架）</h3><h3 id="权限管理模块"><a href="#权限管理模块" class="headerlink" title="权限管理模块"></a>权限管理模块</h3><ol><li><p>菜单管理：列表、添加、修改、删除</p></li><li><p>角色管理</p></li></ol><ul><li>列表、添加、修改、删除、批量删除</li><li>为角色分配菜单</li></ul><ol start="3"><li>用户管理</li></ol><ul><li>列表、添加、修改、删除、批量删除</li><li>为用户分配角色</li></ul><ol start="4"><li><p>权限管理表和关系*</p><blockquote><p>使用五张表：用户表、角色表、菜单表、用户角色中间表、角色菜单中间表</p></blockquote></li></ol><h3 id="讲师管理模块"><a href="#讲师管理模块" class="headerlink" title="讲师管理模块"></a>讲师管理模块</h3><p>​    多条件查询分页列表、添加、修改、删除</p><h3 id="课程分类模块"><a href="#课程分类模块" class="headerlink" title="课程分类模块"></a>课程分类模块</h3><ol><li><p>添加课程分类</p><p>读取Excel里面课程分类数据，添加到数据库中</p></li><li><p>课程分类列表</p><p>使用树形结构显示课程分类列表</p></li></ol><h3 id="课程管理模块"><a href="#课程管理模块" class="headerlink" title="课程管理模块"></a>课程管理模块</h3><ol><li><p>课程列表功能</p></li><li><p>添加课程</p></li><li><p>添加小节上传课程视频</p></li></ol><blockquote><p>课程发布流程：第一步填写课程基本信息，第二步添加课程大纲（章节和小节），第三步课程信息确认，最终课程发布</p><p><strong>课程如何判断是否已经被发布了？</strong>使用status字段</p><p><strong>课程添加过程中，中途把课程停止添加，重新去添加新的课程，如何找到之前没有发布完成课程，继续进行发布？</strong> 到课程列表中根据课程状态查询未发布的课程，点击课程右边超链接把课程继续发布完成</p></blockquote><h3 id="统计分析模块"><a href="#统计分析模块" class="headerlink" title="统计分析模块"></a>统计分析模块</h3><ul><li>生成统计数据</li><li>统计数据图表显示</li></ul><h3 id="幻灯片管理模块"><a href="#幻灯片管理模块" class="headerlink" title="幻灯片管理模块"></a>幻灯片管理模块</h3><p>​    添加和删除</p><hr><h2 id="前台系统功能"><a href="#前台系统功能" class="headerlink" title="前台系统功能"></a>前台系统功能</h2><h3 id="首页数据显示"><a href="#首页数据显示" class="headerlink" title="首页数据显示"></a>首页数据显示</h3><ul><li>显示幻灯片功能</li><li>显示热门课程</li><li>显示名师</li></ul><h3 id="注册功能"><a href="#注册功能" class="headerlink" title="注册功能"></a>注册功能</h3><p>​    获取手机验证码</p><h3 id="登录功能"><a href="#登录功能" class="headerlink" title="登录功能"></a>登录功能</h3><ul><li><p><strong>普通登录和退出</strong></p></li><li><p><strong>SSO（单点登录）</strong></p><ul><li><p>SSO（单点登录）是怎么实现的？</p><blockquote><p>使用的是token的方式，用户登录成功后，根据相关的信息生成token，然后返回给cookie，他每次访问的时候都会从请求头中获取token的值，并解析获取用户信息，判断是否已经登录。                 </p></blockquote></li><li><p>使用什么方式生成Token的？</p><blockquote><p>使用Jwt生成token字符串</p><p>补充：1、token是按照一定规则生成的字符串，包含用户信息；2、Jwt是一种通用的规则</p></blockquote></li><li><p>Jwt有几部分组成，分别为什么？</p><blockquote><p>三部分组成，分别为：jwt头信息、有效载荷，包含主体信息（用户信息）、签名哈希（防伪标志）</p></blockquote></li></ul></li><li><p><strong>登录实现流程</strong></p><blockquote><p> 登录调用登录接口返回token字符串，把返回token字符串放到cookie里面，创建前端拦截器进行判断，如果cookie里面包含token字符串，把token字符串放到header里面。调用接口根据token获取用户信息，把用户信息放到cookie里面，进行显示</p></blockquote></li><li><p><strong>微信扫描登录</strong></p><p><strong>OAuth2</strong></p><blockquote><p>是针对特定问题的一种解决方案</p><p>主要解决两个问题：开放系统间授权，分布式访问问题</p></blockquote><p><strong>如何获取扫描人信息过程？</strong></p><blockquote><p>扫描二维码之后，微信接口返回code值（临时票据），拿着code值请求微信固定地址，得到两个值：access_token（访问凭证）和openid（微信唯一标识）,然后拿着这两个值再去请求微信固定的地址，得到微信扫码人的信息（比如昵称，头像等等）</p></blockquote></li></ul><h3 id="名师列表功能"><a href="#名师列表功能" class="headerlink" title="名师列表功能"></a>名师列表功能</h3><pre><code> 分页显示名师信息</code></pre><h3 id="名师详情功能"><a href="#名师详情功能" class="headerlink" title="名师详情功能"></a>名师详情功能</h3><pre><code> 点击名师跳转到名师详情及其所教的课程</code></pre><h3 id="课程列表功能"><a href="#课程列表功能" class="headerlink" title="课程列表功能"></a>课程列表功能</h3><ul><li>根据课程分类分页查询课程</li><li>根据销量，价格等排序课程</li><li>课程列表分页显示</li></ul><h3 id="课程详情页"><a href="#课程详情页" class="headerlink" title="课程详情页"></a>课程详情页</h3><ul><li><p>课程信息显示（包含课程基本信息，分类，讲师，课程大纲）</p></li><li><p>判断课程是否需要购买</p></li><li><p>课程评论</p></li></ul><h3 id="课程视频在线播放"><a href="#课程视频在线播放" class="headerlink" title="课程视频在线播放"></a>课程视频在线播放</h3><pre><code> 阿里云视频点播、阿里云播放器</code></pre><h3 id="课程支付功能（微信支付）"><a href="#课程支付功能（微信支付）" class="headerlink" title="课程支付功能（微信支付）"></a>课程支付功能（微信支付）</h3><ul><li><p>生成课程订单</p></li><li><p>生成微信支付二维码</p></li><li><p>微信最终支付</p></li></ul><p> <strong>微信支付实现流程</strong></p><blockquote><ol><li>如果课程是收费课程，点击立即购买，生成课程订单</li><li>点击订单页面去支付，生成微信支付二维码</li><li>使用微信扫描支付二维码实现支付</li><li>支付之后，每隔3秒查询支付状态（是否支付成功），如果没有支付成功则等待，如果支付成功之后，更新订单状态（已经支付状态），向支付记录表添加支付成功记录</li></ol></blockquote><hr><h1 id="项目的技术点"><a href="#项目的技术点" class="headerlink" title="项目的技术点"></a>项目的技术点</h1><h2 id="前后端分离开发"><a href="#前后端分离开发" class="headerlink" title="前后端分离开发"></a>前后端分离开发</h2><p>后端写接口，前端调后端接口得到数据并显示</p><h2 id="项目使用的前端技术"><a href="#项目使用的前端技术" class="headerlink" title="项目使用的前端技术"></a>项目使用的前端技术</h2><h3 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h3><ul><li><p>基本语法</p></li><li><p>常见指令 ： v-bind（单向绑定） 、v-model （双向绑定）、v-if 、v-for 、v-html</p></li><li><p>绑定事件： v-on-click 、 @click</p></li><li><p>生命周期：created()：页面渲染之前  、mounted()：页面渲染之后</p></li><li><p>ES6规范</p></li></ul><h3 id="Element-ui"><a href="#Element-ui" class="headerlink" title="Element-ui"></a>Element-ui</h3><h3 id="Nodejs"><a href="#Nodejs" class="headerlink" title="Nodejs"></a>Nodejs</h3><p>是JavaScript运行环境，不需要浏览器就能直接运行js代码，模拟服务器效果</p><h3 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h3><ul><li><p>包管理工具，类似于Maven</p></li><li><p>npm命令： npm init 初始化、 npm install 依赖名称</p></li></ul><h3 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h3><p>转码器，可以把ES6代码转换成ES5代码</p><h3 id="前端模块化"><a href="#前端模块化" class="headerlink" title="前端模块化"></a>前端模块化</h3><p>通过一个页面或者一个js文件，调用另外一个js文件里面的方法</p><blockquote><p>问题：ES6的模块化无法在Node.js中执行，需要用Babel编辑成ES5后再执行</p></blockquote><h3 id="后台系统使用-vue-admin-template"><a href="#后台系统使用-vue-admin-template" class="headerlink" title="后台系统使用 vue-admin-template"></a>后台系统使用 vue-admin-template</h3><p>基于vue+Element-ui,默认端口 9528</p><h3 id="前台系统使用-Nuxt"><a href="#前台系统使用-Nuxt" class="headerlink" title="前台系统使用 Nuxt"></a>前台系统使用 Nuxt</h3><p>基于vue，默认端口 3000；服务器渲染技术</p><h3 id="Echarts"><a href="#Echarts" class="headerlink" title="Echarts"></a>Echarts</h3><p>图表工具</p><hr><blockquote><p>你能做全栈吗？（不要直接回答能或不能）</p><p>说：项目中有80%的后端都是我写的，前端都是cv的，对于前端技术有所了解</p></blockquote><hr><h2 id="项目使用的后端技术【1】"><a href="#项目使用的后端技术【1】" class="headerlink" title="项目使用的后端技术【1】"></a>项目使用的后端技术【1】</h2><h3 id="项目采用微服务架构"><a href="#项目采用微服务架构" class="headerlink" title="项目采用微服务架构"></a>项目采用微服务架构</h3><p>将项目拆分为独立的模块，每个模块都有其端口号，模块与模块之间没有关系，是通过远程调用实现</p><h3 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h3><blockquote><p>SpringBoot本质是就是Spring，是快速构建Spring工程的脚手架</p></blockquote><ul><li>细节：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动类包扫描机制：从外往里扫，也可以设置扫描规则 @ComponentScan("包路径")</span><span class="token comment"># 配置类</span><span class="token comment"># SpringBoot配置文件类型：properties、yaml</span><span class="token comment"># 配置文件加载顺序：</span><span class="token comment"># 1.先bootstrap</span><span class="token comment"># 2.再properties或yaml</span><span class="token comment"># 3.再对应的环境如：dev、test、prod</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h3><ol><li><p>是很多框架总称，使用这些框架来实现微服务架构，是基于SpringBoot实现的</p></li><li><p>组成的框架有：</p><p>服务注册——Netflix Eureka<font color="red">（nacos）</font></p><p>服务调用——Netflix Feign<font color="red">（nacos）</font></p><p>熔断器——Netflix Hystrix</p><p>服务网关——Spring Cloud GateWay</p><p>配置中心——Spring Cloud Config<font color="red">（nacos）</font></p><p>消息总线——Spring Cloud Bus<font color="red">（nacos）</font>                       </p></li><li><p>项目中，使用阿里巴巴Nacos，替代SpringCloud一些组件</p></li><li><p>Nacos</p></li></ol><ul><li><p>使用Nacos作为注册中心</p></li><li><p>使用Nacos作为配置中心</p></li></ul><ol start="5"><li><p>Feign</p><p>服务调用，一个微服务调用另外一个微服务，实现远程调用</p></li><li><p>熔断器</p></li><li><p>Gateway网关（SpringCloud之前zuul网关，目前Gateway网关）</p></li><li><p>版本:H版</p></li></ol><h3 id="MyBatisPlus"><a href="#MyBatisPlus" class="headerlink" title="MyBatisPlus"></a>MyBatisPlus</h3><ol><li><p>MyBatisPlus就是对MyBatis做增强</p></li><li><p>自动填充(@TableField)</p></li><li><p>乐观锁</p></li><li><p>逻辑删除(@TableLogic)</p></li><li><p>代码生成器</p></li></ol><h3 id="EasyExcel"><a href="#EasyExcel" class="headerlink" title="EasyExcel"></a>EasyExcel</h3><ul><li>阿里巴巴提供操作excel工具，代码简洁，效率很高</li></ul><p><strong>为什么效率高？</strong></p><blockquote><p>EasyExcel对poi进行封装，采用SAX方式解析</p><p>Dom：一次将所有数据放进内存中来</p></blockquote><ul><li>项目应用在添加课程分类，读取excel数据</li></ul><hr><h2 id="项目使用的后端技术【2】"><a href="#项目使用的后端技术【2】" class="headerlink" title="项目使用的后端技术【2】"></a>项目使用的后端技术【2】</h2><h3 id="Spring-Security"><a href="#Spring-Security" class="headerlink" title="Spring Security"></a>Spring Security</h3><ol><li><p>在项目整合框架实现权限管理功能</p></li><li><p>SpringSecurity框架组成：认证和授权</p></li><li><p>SpringSecurity登录认证过程</p><blockquote><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/project/guli/guli2.png">          </p></blockquote></li><li><p>SpringSecurity代码执行过程</p><blockquote><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/project/guli/guli1.png"></p></blockquote></li></ol><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><ul><li><p>首页数据通过Redis进行缓存</p></li><li><p>Redis数据类型:Set、List、Hash、String、Zset</p></li><li><p>使用Redis作为缓存，不太重要或者不经常改变数据适合放到Redis作为缓存 （如首页）</p></li></ul><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><ul><li><p>反向代理服务器</p></li><li><p>请求转发，负载均衡，动静分离</p></li></ul><h3 id="OAuth2-JWT"><a href="#OAuth2-JWT" class="headerlink" title="OAuth2+JWT"></a>OAuth2+JWT</h3><ol><li><p>OAuth2是针对特定问题的一种解决方案</p></li><li><p>JWT是一种通用的规则，包含三部分：jwt头信息、有效载荷，包含主体信息（用户信息）、签名哈希（防伪标志）</p></li></ol><h3 id="HttpClient"><a href="#HttpClient" class="headerlink" title="HttpClient"></a>HttpClient</h3><ol><li><p>发送请求和返回响应的工具，不需要浏览器就能完成请求和响应的过程</p></li><li><p>应用场景：微信登录获取扫码人信息，微信支付查询支付状态</p></li></ol><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>Cookie特点：</p><ol><li><p>客户端技术，存储在浏览器中</p></li><li><p>每次发送请求带着cookie值进行发送</p></li><li><p>cookie有默认会话级别，关闭浏览器cookie默认不存在了，但是可以设置cookie有效时长</p></li></ol><h3 id="微信登录、微信支付"><a href="#微信登录、微信支付" class="headerlink" title="微信登录、微信支付"></a>微信登录、微信支付</h3><p> 可看上文描述</p><h3 id="阿里云OSS"><a href="#阿里云OSS" class="headerlink" title="阿里云OSS"></a>阿里云OSS</h3><ol><li><p>作为文件存储服务器</p></li><li><p>添加讲师的时候上传讲师头像功能中用到</p></li></ol><h3 id="阿里云视频点播"><a href="#阿里云视频点播" class="headerlink" title="阿里云视频点播"></a>阿里云视频点播</h3><ul><li><p>视频的上传、删除、播放</p></li><li><p>整合阿里云视频播放器进行视频播放</p></li><li><p>使用视频播放凭证播放</p></li></ul><h3 id="官方106三网短信"><a href="#官方106三网短信" class="headerlink" title="官方106三网短信"></a>官方106三网短信</h3><p>注册时候，发送手机验证码，存储到redis中并且设置过期时间，用于校验</p><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>代码提交到远程Git仓库</p><h3 id="Docker-Jenkins"><a href="#Docker-Jenkins" class="headerlink" title="Docker+Jenkins"></a>Docker+Jenkins</h3><ul><li><p>手动打包运行</p></li><li><p>idea打包</p></li><li><p>jenkins自动化部署过程</p></li></ul><hr><h1 id="项目遇到的问题"><a href="#项目遇到的问题" class="headerlink" title="项目遇到的问题"></a>项目遇到的问题</h1><h2 id="1、前端问题-路由切换问题"><a href="#1、前端问题-路由切换问题" class="headerlink" title="1、前端问题-路由切换问题"></a>1、前端问题-路由切换问题</h2><blockquote><p>多次路由跳转到同一个vue页面，页面中created()方法只会执行一次</p></blockquote><p>（2）解决方案：使用vue监听(watch)</p><h2 id="2、前端问题-ES6模块化运行问题"><a href="#2、前端问题-ES6模块化运行问题" class="headerlink" title="2、前端问题-ES6模块化运行问题"></a>2、前端问题-ES6模块化运行问题</h2><blockquote><p>Nodejs不能直接运行ES6模块化代码，需要使用Babel把ES6模块化代码转换ES5代码 执行</p></blockquote><h2 id="3、mp生成19位id值"><a href="#3、mp生成19位id值" class="headerlink" title="3、mp生成19位id值"></a>3、mp生成19位id值</h2><blockquote><p>mp生成id值是19位，JavaScript处理数字类型值时候，只会处理到16位</p></blockquote><p>解决方案：将Long类型改为String类型</p><h2 id="4、跨域问题"><a href="#4、跨域问题" class="headerlink" title="4、跨域问题"></a>4、跨域问题</h2><blockquote><p>访问协议，ip地址，端口号，这三个如果有任何一个不一样，就会产生跨域问题</p></blockquote><p>跨域解决方案：</p><ul><li><p>在Controller添加注解@CrossOrigin</p></li><li><p>通过Gateway网关解决，写一个配置类</p></li><li><p>注意：上面的方案不能一同使用</p></li></ul><h2 id="5、413问题"><a href="#5、413问题" class="headerlink" title="5、413问题"></a>5、413问题</h2><blockquote><p>上传视频时候，因为Nginx有上传文件大小限制，如果超过Nginx大小，出现413</p></blockquote><ul><li><p>413原因：请求体过大</p></li><li><p>解决方案：在Nginx配置客户端提交文件大小</p></li></ul><h2 id="6、Maven加载问题"><a href="#6、Maven加载问题" class="headerlink" title="6、Maven加载问题"></a>6、Maven加载问题</h2><blockquote><p>maven加载项目时候，默认不会加载src-java文件夹里面xml类型文件的</p></blockquote><p>解决方案：</p><ul><li><p>直接复制xml文件到target目录</p></li><li><p>通过配置实现</p></li></ul><h1 id="项目面试总结"><a href="#项目面试总结" class="headerlink" title="项目面试总结"></a>项目面试总结</h1><h2 id="1、项目描述"><a href="#1、项目描述" class="headerlink" title="1、项目描述"></a>1、项目描述</h2><h3 id="1-对项目总体介绍"><a href="#1-对项目总体介绍" class="headerlink" title="1. 对项目总体介绍"></a>1. 对项目总体介绍</h3><p>在线教育项目采用B2C商业模式，使用微服务架构，项目采用前后端分离开发。</p><h3 id="2-项目功能模块"><a href="#2-项目功能模块" class="headerlink" title="2.项目功能模块"></a>2.项目功能模块</h3><blockquote><p>自己负责的部分根据实际</p></blockquote><p>在线教育项目分为前台系统和后台系统</p><p>前台系统包含：首页数据显示，课程列表和详情，课程支付，课程视频播放，微信登录，微信支付等等。</p><p>后台系统包含：权限管理、讲师管理、课程分类管理、课程管理、统计分析等等</p><h3 id="3-项目涉及技术"><a href="#3-项目涉及技术" class="headerlink" title="3.项目涉及技术"></a>3.项目涉及技术</h3><p>前端技术包含：vue、element-ui、nuxt、babel等等</p><p>后端技术包含：SpringBoot、SpringCloud、EasyExcel等等</p><p>第三方技术包含：阿里云OSS，视频点播，短信服务等等</p><blockquote><p>在线教育计费案例：</p><p>小A是一名杭州的创业者，带领团队研发了一个在线教育平台。他希望把视频托管在阿里云上，<font color="red">存量视频大约1000个，占用存储空间近1T，每月预计新增视频100个，并新增存储约100G，课程视频的时长集中在20-40分钟，并且按照不同课程进行分类管理。</font>为了保障各端的观看效果，计划为用户提供“标清480P”和“高清720P”两种清晰度。目前已有用户400人左右，每日平均视频观看次数1000次，在移动端和PC端观看次数比例大致为3:1</p></blockquote><h2 id="2、这是一个项目还是一个产品"><a href="#2、这是一个项目还是一个产品" class="headerlink" title="2、这是一个项目还是一个产品"></a>2、这是一个项目还是一个产品</h2><p>这是一个产品，项目是从0开始搭建的</p><h2 id="3、测试要求"><a href="#3、测试要求" class="headerlink" title="3、测试要求"></a>3、测试要求</h2><p>首页和视频详情页QPS单机QPS要求 2000+</p><blockquote><p>经常用每秒查询率来衡量域名系统服务器的机器的性能，其即为QPS</p><p>QPS = 并发量 / 平均响应时间</p></blockquote><h2 id="4、企业中的项目（产品）开发流程"><a href="#4、企业中的项目（产品）开发流程" class="headerlink" title="4、企业中的项目（产品）开发流程"></a>4、企业中的项目（产品）开发流程</h2><p>一个中大型项目的开发流程</p><blockquote><p>1、需求调研（产品经理）</p><p>2、需求评审（产品/设计/前端/后端/测试/运营）</p><p>3、立项（项目经理、品管）</p><p>4、UI设计</p><p>5、开发</p><ul><li>架构、数据库设计、API文档、MOCK数据、开发、单元测试</li><li>前端</li><li>后端</li></ul><p>6、前端后端联调</p><p>7、项目提测：黑盒白盒、压力测试（qps）  loadrunner</p><p>8、bug修改</p><p>9、回归测试</p><p>10、运维和部署上线</p><p>11、灰度发布</p><p>12、全量发布</p><p>13、维护和运营</p></blockquote><h2 id="5、系统中都有那些角色？数据库是怎么设计的？"><a href="#5、系统中都有那些角色？数据库是怎么设计的？" class="headerlink" title="5、系统中都有那些角色？数据库是怎么设计的？"></a>5、系统中都有那些角色？数据库是怎么设计的？</h2><p>前台：会员（学员）</p><p>后台：系统管理员、运营人员</p><p>后台分库，每个微服务一个独立的数据库，使用了分布式id生成器</p><h2 id="6、视频点播是怎么实现的（流媒体你们是怎么实现的）"><a href="#6、视频点播是怎么实现的（流媒体你们是怎么实现的）" class="headerlink" title="6、视频点播是怎么实现的（流媒体你们是怎么实现的）"></a>6、视频点播是怎么实现的（流媒体你们是怎么实现的）</h2><p>我们直接接入了阿里云的云视频点播。云平台上的功能包括视频上传、转码、加密、智能审核、监控统计等。</p><p>还包括视频播放功能，阿里云还提供了一个视频播放器。</p><h2 id="7、前后端联调经常遇到的问题："><a href="#7、前后端联调经常遇到的问题：" class="headerlink" title="7、前后端联调经常遇到的问题："></a>7、前后端联调经常遇到的问题：</h2><p>   1、请求方式post、get</p><p>   2、json、x-wwww-form-urlencoded混乱的错误</p><p>   3、后台必要的参数，前端省略了</p><p>   4、数据类型不匹配</p><p>   5、空指针异常</p><p>   6、分布式系统中分布式id生成器生成的id 长度过大（19个字符长度的整数），js无法解析（js智能解析16个长度：2的53次幂）</p><p>​     id策略改成 ID_WORKER_STR</p><h2 id="8、前后端分离项目中的跨域问题是如何解决的"><a href="#8、前后端分离项目中的跨域问题是如何解决的" class="headerlink" title="8、前后端分离项目中的跨域问题是如何解决的"></a>8、前后端分离项目中的跨域问题是如何解决的</h2><p>后端服务器配置：我们的项目中是通过Spring注解解决跨域的 @CrossOrigin</p><p>也可以使用nginx反向代理、httpClient、网关</p><h3 id="9、说说你做了哪个部分、遇到了什么问题、怎么解决的"><a href="#9、说说你做了哪个部分、遇到了什么问题、怎么解决的" class="headerlink" title="9、说说你做了哪个部分、遇到了什么问题、怎么解决的"></a>9、说说你做了哪个部分、遇到了什么问题、怎么解决的</h3><blockquote><p>问题1：</p><p>分布式id生成器在前端无法处理，总是在后三位进行四舍五入。</p><p>分布式id生成器生成的id是19个字符的长度，前端javascript脚本对整数的处理能力只有2的53次方，也就是最多只能处理16个字符</p><p>解决的方案是把id在程序中设置成了字符串的性质</p><p>问题2：</p><p>项目迁移到Spring-Cloud的时候，经过网关时，前端传递的cookie后端一只获取不了，看了cloud中zuul的源码，发现向下游传递数据的时候，zull默认过滤了敏感信息，将cookie过滤掉了</p></blockquote><h3 id="10、分布式系统的id生成策略"><a href="#10、分布式系统的id生成策略" class="headerlink" title="10、分布式系统的id生成策略"></a>10、分布式系统的id生成策略</h3><p><a href="https://www.cnblogs.com/haoxinyue/p/5208136.html">https://www.cnblogs.com/haoxinyue/p/5208136.html</a></p><h2 id="11、项目组有多少人，人员如何组成？"><a href="#11、项目组有多少人，人员如何组成？" class="headerlink" title="11、项目组有多少人，人员如何组成？"></a>11、项目组有多少人，人员如何组成？</h2><blockquote><p>不要太教条，说说人一任职务</p></blockquote><h3 id="12、分布式系统的CAP原理"><a href="#12、分布式系统的CAP原理" class="headerlink" title="12、分布式系统的CAP原理"></a>12、分布式系统的CAP原理</h3><p><strong>CAP定理：</strong></p><blockquote><p>指的是在一个分布式系统中，Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性），三者不可同时获得。</p><p> 一致性（C）：在分布式系统中的所有数据备份，在同一时刻是否同样的值。（所有节点在同一时间的数据完全一致，越多节点，数据同步越耗时）</p><p>可用性（A）：负载过大后，集群整体是否还能响应客户端的读写请求。（服务一直可用，而且是正常响应时间）</p><p>分区容错性（P）：分区容错性，就是高可用性，一个节点崩了，并不影响其它的节点（100个节点，挂了几个，不影响服务，越多机器越好）</p></blockquote><ul><li><p><strong>CA 满足的情况下，P不能满足的原因：</strong></p><blockquote><p>数据同步(C)需要时间，也要正常的时间内响应(A)，那么机器数量就要少，所以P就不满足</p></blockquote></li><li><p><strong>CP 满足的情况下，A不能满足的原因：</strong></p><blockquote><p>数据同步(C)需要时间, 机器数量也多(P)，但是同步数据需要时间，所以不能再正常时间内响应，所以A就不满足</p></blockquote></li><li><p><strong>AP 满足的情况下，C不能满足的原因：</strong></p><blockquote><p>机器数量也多(P)，正常的时间内响应(A)，那么数据就不能及时同步到其他节点，所以C不满足</p></blockquote></li></ul><p><strong>注册中心选择的原则：</strong></p><blockquote><p>Zookeeper：CP设计，保证了一致性，集群搭建的时候，某个节点失效，则会进行选举行的leader，或者半数以上节点不可用，则无法提供服务，因此可用性没法满足</p><p>Eureka：AP原则，无主从节点，一个节点挂了，自动切换其他节点可以使用，去中心化</p><p><strong>结论：</strong></p><ol><li>分布式系统中P,肯定要满足，所以我们只能在一致性和可用性之间进行权衡</li><li>如果要求一致性，则选择zookeeper，如金融行业</li><li>如果要求可用性，则Eureka，如教育、电商系统</li><li>没有最好的选择，最好的选择是根据业务场景来进行架构设计</li></ol></blockquote><h2 id="13、前端渲染和后端渲染有什么区别"><a href="#13、前端渲染和后端渲染有什么区别" class="headerlink" title="13、前端渲染和后端渲染有什么区别"></a>13、<strong>前端渲染和后端渲染有什么区别</strong></h2><p>前端渲染是返回json给前端，通过javascript将数据绑定到页面上</p><p>后端渲染是在服务器端将页面生成直接发送给服务器，有利于SEO的优化</p><h2 id="14、能画一下系统架构图吗"><a href="#14、能画一下系统架构图吗" class="headerlink" title="14、能画一下系统架构图吗"></a><strong>14、能画一下系统架构图吗</strong></h2><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/project/guli/guli3.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;项目介绍&quot;&gt;&lt;a href=&quot;#项目介绍&quot; class=&quot;headerlink&quot; title=&quot;项目介绍&quot;&gt;&lt;/a&gt;项目介绍&lt;/h1&gt;&lt;p&gt;在线教育项目采用B2C商业模式，使用微服务架构，项目采用前后端分离开发&lt;/p&gt;
&lt;h1 id=&quot;项目的功能点&quot;&gt;&lt;a hre</summary>
      
    
    
    
    <category term="项目" scheme="http://mjean.life/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="guli-college" scheme="http://mjean.life/categories/%E9%A1%B9%E7%9B%AE/guli-college/"/>
    
    
    <category term="项目总结" scheme="http://mjean.life/tags/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>博客与博主</title>
    <link href="http://mjean.life/posts/1.html"/>
    <id>http://mjean.life/posts/1.html</id>
    <published>2021-05-27T13:00:00.000Z</published>
    <updated>2021-09-07T14:52:39.538Z</updated>
    
    <content type="html"><![CDATA[<p>相遇皆是缘分</p><h3 id="为什么建博客？"><a href="#为什么建博客？" class="headerlink" title="为什么建博客？"></a>为什么建博客？</h3><p>肿么说了! 纯属个人兴趣，好玩，唉，就是玩!嘻嘻! 会有些成就感吧,拥有一个自己的博客写一些自己感兴趣的事或物,不是一件很酷的事嘛!</p><h3 id="展望博客"><a href="#展望博客" class="headerlink" title="展望博客"></a>展望博客</h3><p>我会整理一些个人所学的知识（学前端的，也会捣鼓捣鼓一些其它的专业的知识）或生活方面有兴趣的事发到博客上供大家观摩</p><h3 id="关于博主"><a href="#关于博主" class="headerlink" title="关于博主"></a>关于博主</h3><p>有位可爱的（小）朋友，给我取名叫 “仙气”，这是也是我博客上自居 “仙气” 的由来。喜欢自己所喜欢的，做自己想做的，追求自由与潇洒，多酷啊！ 想法是美好的，可现实… …   给大家推荐一首诗吧</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> 《自由与爱情》---作者:裴多菲​ 生命诚可贵​ 爱情价更高​ 若为自由故​ 二者皆可抛<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>溜溜球啦！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;相遇皆是缘分&lt;/p&gt;
&lt;h3 id=&quot;为什么建博客？&quot;&gt;&lt;a href=&quot;#为什么建博客？&quot; class=&quot;headerlink&quot; title=&quot;为什么建博客？&quot;&gt;&lt;/a&gt;为什么建博客？&lt;/h3&gt;&lt;p&gt;肿么说了! 纯属个人兴趣，好玩，唉，就是玩!嘻嘻! 会有些成就感吧,拥有</summary>
      
    
    
    
    <category term="生活" scheme="http://mjean.life/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="想法" scheme="http://mjean.life/tags/%E6%83%B3%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Nginx学习笔记</title>
    <link href="http://mjean.life/posts/f5398568.html"/>
    <id>http://mjean.life/posts/f5398568.html</id>
    <published>2021-04-16T08:01:36.000Z</published>
    <updated>2022-04-18T12:48:45.800Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx-简介"><a href="#Nginx-简介" class="headerlink" title="Nginx 简介"></a>Nginx 简介</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本次学习作者是通过尚硅谷的Nginx教程进行的，<a href="https://www.bilibili.com/video/BV1zJ411w7SV">链接</a></p><h2 id="什么是Nginx"><a href="#什么是Nginx" class="headerlink" title="什么是Nginx"></a>什么是Nginx</h2><p>Nginx (“engine x”)是一个高性能的HTTP和反向代理服务器，特点是占有内存少，并发能力强，事实上nginx的并发能力确实在同类型的网页服务器中表现较好。<br>Nginx专为性能优化而开发，性能是其最重要的考量，实现上非常注重效率，能经受高负载的考验，有报告表明能支持高达50000个并发连接数。</p><ul><li>正向代理</li><li>反向代理</li><li>动静分离</li></ul><h2 id="Nginx相关概念"><a href="#Nginx相关概念" class="headerlink" title="Nginx相关概念"></a>Nginx相关概念</h2><h3 id="正向和反向代理"><a href="#正向和反向代理" class="headerlink" title="正向和反向代理"></a>正向和反向代理</h3><p><strong>正向代理</strong>是一个位于客户端和目标服务器之间的代理服务器(中间服务器)。为了从原始服务器取得内容，客户端向代理服务器发送一个请求，并且指定目标服务器，之后代理向目标服务器转交并且将获得的内容返回给客户端。正向代理的情况下客户端必须要进行一些特别的设置才能使用。</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/nginx/nginx1.png"></p><p><strong>反向代理</strong>正好相反。对于客户端来说，反向代理就好像目标服务器。并且客户端不需要进行任何设置。客户端向反向代理发送请求，接着反向代理判断请求走向何处，并将请求转交给客户端，使得这些内容就好似他自己一样，一次客户端并不会感知到反向代理后面的服务，也因此不需要客户端做任何设置，只需要把反向代理服务器当成真正的服务器就好了。</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/nginx/nginx2.png"></p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p><strong>负载均衡</strong></p><p>客户端发送多个请求到服务器，服务器处理请求，有一些可能要与数据库进行交互，服务器处理完毕后，再将结果返回给客户端。</p><p>这种架构模式对于早期的系统相对单一，并发请求相对较少的情况下是比较适合的，成本也低。<strong>但是随着信息数量的不断增长，访问量和数据量的飞速增长，以及系统业务的复杂度增加，这种架构会造成服务器相应客户端的请求日益缓慢，并发量特别大的时候，还容易造成服务器直接崩溃</strong>。很明显这是由于服务器性能的瓶颈造成的问题，那么如何解决这种情况呢？</p><p>我们首先想到的可能是<strong>升级服务器的配置</strong>，比如提高 CPU 执行频率，加大内存等提高机器的物理性能来解决此问题，但是我们知道摩尔定律的日益失效，硬件的性能提升已经不能满足日益提升的需求了。最明显的一个例子，天猫双十一当天，某个热销商品的瞬时访问量是极其庞大的，那么类似上面的系统架构，将机器都增加到现有的顶级物理配置，都是不能够满足需求的。那么怎么办呢？</p><p>上面的分析我们去掉了增加服务器物理配置来解决问题的办法，也就是说纵向解决问题的办法行不通了，那么横向增加服务器的数量呢？这时候<strong>集群</strong>的概念产生了，单个服务器解决不了，我们增加服务器的数量，然后<strong>将请求分发到各个服务器上，将原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上，将负载分发到不同的服务器</strong>，也就是我们所说的<strong>负载均衡</strong></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/nginx/nginx3.png"></p><h3 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h3><p>为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度。降低原来单个服务器的压力。</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/nginx/nginx4.png"></p><h1 id="Nginx-安装"><a href="#Nginx-安装" class="headerlink" title="Nginx 安装"></a>Nginx 安装</h1><blockquote><p>下面的操作是以Centos7为例</p></blockquote><ol><li><p>使用远程连接工具连接Centos7操作系统</p></li><li><p>安装nginx相关依赖</p><ul><li><p>gcc</p></li><li><p>pcre</p></li><li><p>openssl</p></li><li><p>zlib</p><p>安装 nginx 需要先将官网下载的源码进行编译，编译依赖 gcc 环境，如果没有 gcc 环境，则需要安装：</p></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ yum <span class="token function">install</span> gcc-c++<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>PCRE(Perl Compatible Regular Expressions) 是一个Perl库，包括 perl 兼容的正则表达式库。nginx 的 http 模块使用 pcre 来解析正则表达式，所以需要在 linux 上安装 pcre 库，pcre-devel 是使用 pcre 开发的一个二次开发库。nginx也需要此库。命令：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ yum <span class="token function">install</span> -y pcre pcre-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> zlib 库提供了很多种压缩和解压缩的方式， nginx 使用 zlib 对 http 包的内容进行 gzip ，所以需要在 Centos 上安装 zlib 库。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ yum <span class="token function">install</span> -y zlib zlib-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 SSL 协议，并提供丰富的应用程序供测试或其它目的使用。<br>nginx 不仅支持 http 协议，还支持 https（即在ssl协议上传输http），所以需要在 Centos 安装 OpenSSL 库。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ yum <span class="token function">install</span> -y openssl openssl-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装Nginx</p></li></ol><ul><li>下载nginx，两种方式</li></ul><blockquote><p>a. 直接下载<code>.tar.gz</code>安装包，地址：<a href="https://nginx.org/en/download.html">https://nginx.org/en/download.html</a></p><p>b. <strong>使用<code>wget</code>命令下载（推荐）</strong>。确保系统已经安装了wget，如果没有安装，执行 <code>yum install wget</code> 安装。</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">wget</span> -c https://nginx.org/download/nginx-1.19.0.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>依然是直接命令：</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">tar</span> -zxvf nginx-1.19.0.tar.gz$ <span class="token builtin class-name">cd</span> nginx-1.19.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>配置：</p><p>在 nginx-1.12.0 版本中不需要去配置相关东西，默认就可以了。当然，如果你要自己配置目录也是可以的。</p><ul><li><p>使用默认配置</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ./configure<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>自定义配置（不推荐）</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ./configure <span class="token punctuation">\</span>--prefix<span class="token operator">=</span>/usr/local/nginx <span class="token punctuation">\</span>--conf-path<span class="token operator">=</span>/usr/local/nginx/conf/nginx.conf <span class="token punctuation">\</span>--pid-path<span class="token operator">=</span>/usr/local/nginx/conf/nginx.pid <span class="token punctuation">\</span>--lock-path<span class="token operator">=</span>/var/lock/nginx.lock <span class="token punctuation">\</span>--error-log-path<span class="token operator">=</span>/var/log/nginx/error.log <span class="token punctuation">\</span>--http-log-path<span class="token operator">=</span>/var/log/nginx/access.log <span class="token punctuation">\</span>--with-http_gzip_static_module <span class="token punctuation">\</span>--http-client-body-temp-path<span class="token operator">=</span>/var/temp/nginx/client <span class="token punctuation">\</span>--http-proxy-temp-path<span class="token operator">=</span>/var/temp/nginx/proxy <span class="token punctuation">\</span>--http-fastcgi-temp-path<span class="token operator">=</span>/var/temp/nginx/fastcgi <span class="token punctuation">\</span>--http-uwsgi-temp-path<span class="token operator">=</span>/var/temp/nginx/uwsgi <span class="token punctuation">\</span>--http-scgi-temp-path<span class="token operator">=</span>/var/temp/nginx/scgi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编辑安装</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><h1 id="Nginx常用的命令和配置文件"><a href="#Nginx常用的命令和配置文件" class="headerlink" title="Nginx常用的命令和配置文件"></a>Nginx常用的命令和配置文件</h1><h2 id="Nginx常用命令"><a href="#Nginx常用命令" class="headerlink" title="Nginx常用命令"></a>Nginx常用命令</h2><p><code>使用nginx操作命令前提条件:必须进入nginx的目录/usr/local/nginx/sbin</code></p><ol><li><p>查看版本号</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ./nginx -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动命令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ./nginx <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>关闭命令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ./nginx -s stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>重新加载命令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ./nginx -s reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看nginx进程(可在其他目录中使用)</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">ps</span> -ef<span class="token operator">|</span><span class="token function">grep</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>启动成功后，在浏览器可以看到这样的页面：</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/nginx/nginx5.png"></p><h2 id="nginx-conf-配置文件"><a href="#nginx-conf-配置文件" class="headerlink" title="nginx.conf 配置文件"></a>nginx.conf 配置文件</h2><p>nginx 安装目录下，其默认的配置文件都放在这个目录的 conf 目录下，而主配置文件 nginx.conf 也在其中，后续对 nginx 的使用基本上都是对此配置文件进行相应的修改</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/nginx/nginx6.png"></p><p>nginx.conf 结构</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/nginx/nginx7.png"></p><h3 id="全局块"><a href="#全局块" class="headerlink" title="全局块"></a>全局块</h3><p>从配置文件开始到 events 块之间的内容，<strong>主要会设置一些影响 nginx 服务器整体运行的配置指令</strong>，主要包括配置运行 Nginx 服务器的用户（组）、允许生成的 worker process 数，进程 PID 存放路径、日志存放路径和类型以及配置文件的引入等。</p><p>比如上面第一行配置的：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">worker_processes  1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这是 Nginx 服务器并发处理服务的关键配置，worker_processes 值越大，可以支持的并发处理量也越多，但是会受到硬件、软件等设备的制约</p><h3 id="events-块"><a href="#events-块" class="headerlink" title="events 块"></a>events 块</h3><p>events 块涉及的指令主要影响 Nginx 服务器与用户的网络连接，常用的设置包括是否开启对多 work process 下的网络连接进行序列化，是否允许同时接收多个网络连接，选取哪种事件驱动模型来处理连接请求，每个 word process 可以同时支持的最大连接数等。</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">events {    worker_connections  1024;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上述例子就表示每个 work process 支持的最大连接数为 1024. 这部分的配置对 Nginx 的性能影响较大，在实际中应该灵活配置。</p><h3 id="http-块"><a href="#http-块" class="headerlink" title="http 块"></a>http 块</h3><p>这算是 Nginx 服务器配置中最频繁的部分，代理、缓存和日志定义等绝大多数功能和第三方模块的配置都在这里。</p><p>需要注意的是：http 块也可以包括 <strong>http</strong> <strong>全局块</strong>、<strong>server</strong> <strong>块</strong>。</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">http {    include       mime.types;    default_type  application/octet-stream;    sendfile        on;    keepalive_timeout  65;    server {        listen       80;        server_name  localhost;        location / {            root   html;            index  index.html index.htm;        }        error_page   500 502 503 504  /50x.html;        location = /50x.html {            root   html;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="http全局块"><a href="#http全局块" class="headerlink" title="http全局块"></a>http全局块</h4><p>http 全局块配置的指令包括文件引入、MIME-TYPE 定义、日志自定义、连接超时时间、单链接请求数上限等。</p><p><strong>upstream</strong>（上游服务器设置，主要为反向代理、负载均衡相关配置，upstream 的指令用于设置一系列的后端服务器，设置反向代理及后端服务器的负载均衡</p><h4 id="server块"><a href="#server块" class="headerlink" title="server块"></a>server块</h4><p>这块和虚拟主机有密切关系，虚拟主机从用户角度看，和一台独立的硬件主机是完全一样的，该技术的产生是为了节省互联网服务器硬件成本。</p><p>每个 http 块可以包括多个 server 块，而每个 server 块就相当于一个虚拟主机。</p><p>而每个 server 块也分为全局 server 块，以及可以同时包含多个 locaton 块。</p><h5 id="全局-server-块"><a href="#全局-server-块" class="headerlink" title="全局 server 块"></a>全局 server 块</h5><p>最常见的配置是本虚拟机主机的监听配置和本虚拟主机的名称或 IP 配置。</p><h5 id="location块"><a href="#location块" class="headerlink" title="location块"></a>location块</h5><p>一个 server 块可以配置多个 location 块。</p><p>这块的主要作用是基于 Nginx 服务器接收到的请求字符串（例如 server_name/uri-string），对虚拟主机名称（也可以是 IP 别名）之外的字符串（例如 前面的 /uri-string）进行匹配，对特定的请求进行处理。地址定向、数据缓存和应答控制等功能，还有许多第三方模块的配置也在这里进行。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Nginx 配置文件主要分成四部分：main（全局设置）、server（主机设置）、upstream（上游服务器设置，主要为反向代理、负载均衡相关配置）和 location（URL匹配特定位置后的设置）。</p><p>main 部分设置的指令影响其他所有部分的设置；</p><p>server 部分的指令主要用于制定虚拟主机域名、IP 和端口号；</p><p>upstream 的指令用于设置一系列的后端服务器，设置反向代理及后端服务器的负载均衡；</p><p>location 部分用于匹配网页位置（比如，根目录“/”，“/images”，等等）。</p><p>他们之间的关系：server 继承 main，location 继承 server；upstream 既不会继承指令也不会被继承。</p><h1 id="Nginx-配置实例-反向代理"><a href="#Nginx-配置实例-反向代理" class="headerlink" title="Nginx 配置实例-反向代理"></a>Nginx 配置实例-反向代理</h1><h2 id="反向代理实例一"><a href="#反向代理实例一" class="headerlink" title="反向代理实例一"></a>反向代理实例一</h2><blockquote><p>实现效果：使用 nginx 反向代理，访问 <a href="http://www.123.com/">www.123.com</a> 直接跳转到 192.168.252.128:8080</p></blockquote><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><ol><li><p>启动一个 tomcat，浏览器地址栏输入 192.168.252.128:8080，出现如下界面</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/nginx/nginx8.png"></p></li><li><p>通过修改本地 host 文件，将 <a href="http://www.123.com/">www.123.com</a> 映射到 192.168.252.128</p><p>在<code>C:\Windows\System32\drivers\etc\hosts</code>文件末添加<code>192.168.252.128 www.123.com</code></p></li><li><p>修改nginx的配置文件，在nginx.conf 配置文件中增加如下配置</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/nginx/nginx9.png"></p><p>如上配置，我们监听 80 端口，访问域名为 <a href="http://www.123.com,不加端口号时默认为/">www.123.com，不加端口号时默认为</a> 80 端口，故 访问该域名时会跳转到 127.0.0.1:8080 路径上。在浏览器端输入 <a href="http://www.123.com/">www.123.com</a> 结果如下：</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/nginx/nginx10.png"></p></li></ol><h2 id="反向代理实例二"><a href="#反向代理实例二" class="headerlink" title="反向代理实例二"></a>反向代理实例二</h2><blockquote><p>实现效果：使用 nginx 反向代理，根据访问的路径跳转到不同端口的服务中 nginx 监听端口为 9001，</p><p>访问 <a href="http://192.168.252.128:9001/edu/%E7%9B%B4%E6%8E%A5%E8%B7%B3%E8%BD%AC%E5%88%B0">http://192.168.252.128:9001/edu/直接跳转到</a> 127.0.0.1:8080</p><p>访问 <a href="http://192.168.252.128:9001/vod/%E7%9B%B4%E6%8E%A5%E8%B7%B3%E8%BD%AC%E5%88%B0">http://192.168.252.128:9001/vod/直接跳转到</a> 127.0.0.1:8081</p></blockquote><h3 id="实现过程-1"><a href="#实现过程-1" class="headerlink" title="实现过程"></a>实现过程</h3><ol><li><p>第一步，准备两个 tomcat，一个 8080 端口，一个 8081 端口，并准备好测试的页面</p></li><li><p>修改nginx的配置文件，在nginx.conf 配置文件中增加如下配置</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/nginx/nginx11.png"></p></li><li><p>重启nginx服务器，使配置文件生效</p></li><li><p>最后测试结果如下：</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/nginx/nginx12.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/nginx/nginx13.png"></p></li></ol><h3 id="location-指令说明"><a href="#location-指令说明" class="headerlink" title="location 指令说明"></a>location 指令说明</h3><blockquote><p><a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#location">Nginx location doc</a></p></blockquote><p>该指令用于匹配 URL。</p><p>语法如下：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">location [ = | ~ | ~* | ^~ ] uri {}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>= ：用于不含正则表达式的 uri 前，要求请求字符串与 uri 严格匹配，如果匹配成功，就停止继续向下搜索并立即处理该请求。</li><li>~：用于表示 uri 包含正则表达式，并且区分大小写。</li><li>~*：用于表示 uri 包含正则表达式，并且不区分大小写。</li><li>^~：用于不含正则表达式的 uri 前，要求 Nginx 服务器找到标识 uri 和请求字符串匹配度最高的 location 后，立即使用此 location 处理请求，而不再使用 location 块中的正则 uri 和请求字符串做匹配。</li></ol><p><code>注意：如果 uri 包含正则表达式，则必须要有 ~ 或者 ~\* 标识。</code></p><h1 id="Nginx-配置实例-负载均衡"><a href="#Nginx-配置实例-负载均衡" class="headerlink" title="Nginx 配置实例-负载均衡"></a>Nginx 配置实例-负载均衡</h1><blockquote><p>浏览器地址栏输入地址<code>http://192.168.252.128/edu/a.html</code>，负载均衡效果，平均 8080 和 8081端口中</p></blockquote><h2 id="实现过程-2"><a href="#实现过程-2" class="headerlink" title="实现过程"></a>实现过程</h2><ol><li><p>准备两台 tomcat 服务器，一台 8080，一台 8081 </p></li><li><p>在两台 tomcat 里面 webapps 目录中，创建名称是 edu 文件夹，在 edu 文件夹中创建 页面 a.html，用于测试</p></li><li><p>在 nginx 的配置文件中进行负载均衡的配置</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/nginx/nginx14.png"></p></li></ol><h2 id="负载均衡分配策略"><a href="#负载均衡分配策略" class="headerlink" title="负载均衡分配策略"></a>负载均衡分配策略</h2><p>负载均衡（load balance）即是将负载分摊到不同的服务单元，既保证服务的可用性，又保证响应足够快，给用户很好的体验。</p><p>快速增长的访问量和数据流量催生了各式各样的负载均衡产品，很多专业的负载均衡硬件提供了很好的功能，但却价格不菲，这使得负载均衡软件大受欢迎，nginx 就是其中的一个，在 linux 下有 Nginx、 LVS、 Haproxy 等等服务可以提供负载均衡服务，而且 Nginx 提供了几种分配方式(策略)</p><h3 id="轮询"><a href="#轮询" class="headerlink" title="轮询"></a>轮询</h3><p>这是Ngnix负载均衡默认分配策略。每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器 down 掉，能自动剔除。</p><h3 id="加权"><a href="#加权" class="headerlink" title="加权"></a>加权</h3><p>weight 代表权重，默认为 1，权重越高被分配的客户端越多。指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。例如：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">upstream myserver{server 192.168.252.128:8080 weight=8;server 192.168.252.128:8081 weight=2;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ip-hash"><a href="#ip-hash" class="headerlink" title="ip_hash"></a>ip_hash</h3><p>每个请求按访问 ip 的 hash 结果分配，这样每个访客固定访问一个后端服务器，可以解决 session 的问题。 例如：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">upstream myserver{ip_hash;server 192.168.252.128:8080;server 192.168.252.128:8081;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="fair"><a href="#fair" class="headerlink" title="fair"></a>fair</h3><p>这是Ngnix负载均衡第三方分配策略。按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">upstream myserver{server 192.168.252.128:8080;server 192.168.252.128:8081;fair;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Nginx-配置实例-动静分离"><a href="#Nginx-配置实例-动静分离" class="headerlink" title="Nginx 配置实例-动静分离"></a>Nginx 配置实例-动静分离</h1><p><strong>Nginx 动静分离简单来说就是把动态跟静态请求分开，不能理解成只是单纯的把动态页面和 静态页面物理分离。</strong>严格意义上说应该是动态请求跟静态请求分开，可以理解成使用 Nginx  处理静态页面，Tomcat 处理动态页面。</p><p>动静分离从目前实现角度来讲大致分为两种：</p><ul><li>一种是纯粹把静态文件独立成单独的域名，放在独立的服务器上，也是目前主流推崇的方案；</li><li> 另外一种方法就是动态跟静态文件混合在一起发布，通过 nginx 来分开。 通过 location 指定不同的后缀名实现不同的请求转发。</li></ul><p>通过 expires 参数设置，可以使浏览器缓存过期时间，减少与服务器之前的请求和流量。具体 Expires 定义：是给一个资源设定一个过期时间，也就是说无需去服务端验证，直接通过浏览器自身确认是否过期即可， 所以不会产生额外的流量。此种方法非常适合不经常变动的资源。（如果经常更新的文件， 不建议使用 Expires 来缓存），假如将其设置为 3d，表示在这 3 天之内访问这个 URL，发送 一个请求，比对服务器该文件最后更新时间没有变化，则不会从服务器抓取，返回状态码 304，如果有修改，则直接从服务器重新下载，返回状态码 200。</p><h2 id="实现过程-3"><a href="#实现过程-3" class="headerlink" title="实现过程"></a>实现过程</h2><ol><li><p>在linux系统中准备静态资源，用于进行访问</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/nginx/nginx15.jpg"></p></li><li><p>修改nginx的配置文件，在nginx.conf 配置文件中增加如下配置</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/nginx/nginx16.jpg"></p></li><li><p>测试：</p><ul><li><p>浏览器中输入地址 <a href="http://192.168.252.128/image/zm.jpg">http://192.168.252.128/image/zm.jpg</a></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/nginx/nginx17.jpg"></p></li><li><p>浏览器中输入地址 <a href="http://192.168.252.128/image/">http://192.168.252.128/image/</a></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/nginx/nginx18.jpg"></p><p> 因为配置文件 autoindex on,可查阅<code>/image/</code>目录下的文件列表</p></li><li><p>浏览器中输入地址 <a href="http://192.168.252.128/www/a.html">http://192.168.252.128/www/a.html</a></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/nginx/nginx19.jpg"></p></li></ul></li></ol><h1 id="Nginx-配置高可用的集群（高可用主备模式）"><a href="#Nginx-配置高可用的集群（高可用主备模式）" class="headerlink" title="Nginx 配置高可用的集群（高可用主备模式）"></a>Nginx 配置高可用的集群（高可用主备模式）</h1><blockquote><p>为什么要配置nginx高可用？以防单一nginx挂了，另一个nginx能担当重任。</p></blockquote><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/nginx/nginx20.jpg"></p><h2 id="配置高可用的准备工作"><a href="#配置高可用的准备工作" class="headerlink" title="配置高可用的准备工作"></a>配置高可用的准备工作</h2><ul><li>需要两台服务器 192.168.17.129 和 192.168.17.131</li><li>在两台服务器安装 Nginx</li><li>在两台服务器安装 keepalived</li><li>需要虚拟ip</li></ul><h2 id="在两台服务器安装-keepalived"><a href="#在两台服务器安装-keepalived" class="headerlink" title="在两台服务器安装 keepalived"></a>在两台服务器安装 keepalived</h2><ul><li>使用 yum 命令进行安装<code>yum install keepalived –y</code></li><li>安装之后，在 etc 里面生成目录 keepalived，有文件 keepalived.conf</li></ul><h2 id="完成高可用配置-主从配置"><a href="#完成高可用配置-主从配置" class="headerlink" title="完成高可用配置(主从配置)"></a>完成高可用配置(主从配置)</h2><ol><li>修改 <code>/etc/keepalived/keepalived.conf</code> 配置文件</li></ol><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">global_defs {notification_email {acassen@firewall.locfailover@firewall.locsysadmin@firewall.loc}notification_email_from Alexandre.Cassen@firewall.locsmtp_server 192.168.17.129smtp_connect_timeout 30router_id LVS_DEVEL}vrrp_script chk_http_port {script "/usr/local/src/nginx_check.sh"interval 2 #（检测脚本执行的间隔）weight 2}vrrp_instance VI_1 {state BACKUP # 备份服务器上将 MASTER 改为 BACKUPinterface ens33 //网卡virtual_router_id 51 # 主、备机的 virtual_router_id 必须相同priority 90 # 主、备机取不同的优先级，主机值较大，备份机值较小advert_int 1authentication {auth_type PASSauth_pass 1111}virtual_ipaddress {192.168.17.50 // VRRP H 虚拟地址}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>在<code>/usr/local/src</code> 添加检测脚本</li></ol><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">#!/bin/bashA=`ps -C nginx – no-header |wc -l`if [ $A -eq 0 ];then/usr/local/nginx/sbin/nginxsleep 2if [ `ps -C nginx --no-header |wc -l` -eq 0 ];thenkillall keepalivedfifi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><p>把两台服务器上 Nginx 和 keepalived 启动</p><ul><li>启动 Nginx： ./nginx</li><li>启动 keepalived： systemctl start keepalived.service</li></ul></li><li><p>测试</p></li></ol><ul><li>在浏览器地址栏输入 虚拟 ip 地址 192.168.17.50</li><li>把主服务器（192.168.17.129） Nginx 和 keepalived 停止，再输入 192.168.17.50</li></ul><h1 id="Nginx-原理解析"><a href="#Nginx-原理解析" class="headerlink" title="Nginx 原理解析"></a>Nginx 原理解析</h1><h2 id="master-和-worker"><a href="#master-和-worker" class="headerlink" title="master 和 worker"></a>master 和 worker</h2><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/nginx/nginx21.jpg"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/nginx/nginx22.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/nginx/nginx23.png"></p><h2 id="一个master和多个woker有好处"><a href="#一个master和多个woker有好处" class="headerlink" title="一个master和多个woker有好处"></a>一个master和多个woker有好处</h2><p>首先，对于每个 worker 进程来说，独立的进程，不需要加锁，所以省掉了锁带来的开销，同时在编程以及问题查找时，也会方便很多。其次，采用独立的进程，可以让互相之间不会影响，一个进程退出后，其它进程还在工作，服务不会中断， master 进程则很快启动新的worker进程。当然， worker 进程的异常退出，肯定是程序有 bug 了，异常退出，会导致当前 worker 上的所有请求失败，不过不会影响到所有请求，所以降低了风险。</p><ol><li>可以使用 <code>./nginx –s reload</code> 热部署，利用nginx进行热部署操作</li><li>每个worker是独立的进程，如果有其中的一个worker出现问题，其他worker独立的，继续进行争抢，实现请求过程，不会造成服务中断</li></ol><h2 id="设置多少个worker合适"><a href="#设置多少个worker合适" class="headerlink" title="设置多少个worker合适"></a>设置多少个worker合适</h2><p>Nginx 同 redis 类似都采用了 <code>io 多路复用机制</code>，每个 worker 都是一个独立的进程，但每个进程里只有一个主线程，通过异步非阻塞的方式来处理请求， 即使是千上万个请求也不在话下。每个 worker 的线程可以把一个 cpu 的性能发挥到极致。</p><p><strong>所以 worker 数和服务器的cpu数相等是最为适宜的</strong>。设少了会浪费 cpu，设多了会造成 cpu 频繁切换上下文带来的损耗。</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">#设置 worker 数量。worker_processes 4#work 绑定 cpu(4 work 绑定 4cpu)。worker_cpu_affinity 0001 0010 0100 1000#work 绑定 cpu (4 work 绑定 8cpu 中的 4 个) 。worker_cpu_affinity 0000001 00000010 00000100 00001000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="连接数worker-connection"><a href="#连接数worker-connection" class="headerlink" title="连接数worker_connection"></a>连接数worker_connection</h2><p>这个值是表示每个 worker 进程所能建立连接的最大值，所以，一个 nginx 能建立的最大连接数，应该是 <code>worker_connections * worker_processes</code>。当然，这里说的是最大连接数，对于 HTTP请求本地资源来说，能够支持的最大并发数量是 <code>worker_connections * worker_processes</code>。</p><p>如果是支持 http1.1 的浏览器每次访问要占两个连接，所以普<strong>通的静态访问最大并发数</strong>是： <code>worker_connections * worker_processes /2</code>，而如果是 <strong>HTTP 作为反向代理</strong>来说，<strong>最大并发数量</strong>应该是 <code>worker_connections *worker_processes/4</code>。因为作为反向代理服务器，每个并发会建立与客户端的连接和与后端服务的连接，各会占用两个连接。</p><blockquote><p>第一个：发送请求，占用了worker 的几个连接数？</p><p>答案：2或者4个</p><p>第二个：nginx有一个master，有四个worker，每个worker支持最大的连接数1024，支持的最大并发数是多少？</p><ul><li><p>普通的静态访问最大并发数是： worker_connections * worker_processes /2，</p></li><li><p>而如果是HTTP作为反向代理来说，最大并发数量应该是worker_connections * worker_processes/4。</p></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Nginx-简介&quot;&gt;&lt;a href=&quot;#Nginx-简介&quot; class=&quot;headerlink&quot; title=&quot;Nginx 简介&quot;&gt;&lt;/a&gt;Nginx 简介&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="笔记" scheme="http://mjean.life/categories/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Nginx" scheme="http://mjean.life/categories/%E7%AC%94%E8%AE%B0/Nginx/"/>
    
    
    <category term="Nginx" scheme="http://mjean.life/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Redis学习笔记</title>
    <link href="http://mjean.life/posts/8eda3648.html"/>
    <id>http://mjean.life/posts/8eda3648.html</id>
    <published>2021-04-14T11:09:47.000Z</published>
    <updated>2022-04-18T12:48:45.836Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本次学习是从狂神的Redis教程视频中进行的，感谢狂神的分享。<a href="https://www.bilibili.com/video/BV1S54y1R7SB?from=search&amp;seid=807391385464464377">视频地址</a></p><h1 id="NoSQL概述"><a href="#NoSQL概述" class="headerlink" title="NoSQL概述"></a>NoSQL概述</h1><h2 id="为什么要用NoSQL"><a href="#为什么要用NoSQL" class="headerlink" title="为什么要用NoSQL"></a>为什么要用NoSQL</h2><blockquote><p>单机MySQL的年代！</p></blockquote><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis1.png"></p><p>90年代，一个基本的网站访问量一般不会太大，单个数据库完全足够！那个时候，更多的是去使用静态网页html~服务器根本没有太大的压力！</p><p>思考一下，这种情况下：整个网站的瓶颈是什么？</p><pre><code>1. 数据量如果太大，一个机器放不下2. 数据的索引(B+ Tree)，一个机器内存也放不下3. 访问量巨大(读写混合)，一个服务器承受不了</code></pre><p>只要开始出现以上的三种情况之一，就必须要升级！</p><blockquote><p>Memcached(缓存) + MySQL + 垂直拆分(读写分离)</p></blockquote><p>网站80%的情况都是在读，每次都是去查阅数据库的话就十分的麻烦！所以说我们希望减轻数据的压力，我们可以使用缓存来保证效率！</p><p>发展过程：优化数据结构和索引–&gt;文件缓存(IO)–&gt;Memcached(当时最热门的技术！)</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis2.png"></p><blockquote><p>分库分表 + 水平拆分 + MySQL集群</p></blockquote><p>技术和业务在发展的同时，对人的要求也越来越高！</p><p>本质：数据库(读，写)</p><p>早些年MyISAM：表锁，十分影响效率！高并发下就会出现严重的锁问题</p><p>转战Innodb：行锁，慢慢的就开始使用分库分表来解决写的压力！</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis3.png"></p><blockquote><p>如今的年代</p></blockquote><p>2010-2020 十年之间，世界已经发生了翻天覆地的变化；(定位，也是一种数据，音乐，热榜！)</p><p>MySQL 等关系型数据库就不够用了！数据量很大，变化很快~！</p><p>MySQL 有的使用它来存储一些比较大的文件，博客，图片！数据库表很大，效率低！如果有一种数据库来专门处理这种数据，</p><p>MySQL 压力就变得十分小(研究如何处理这些问题！)大数据的IO压力下，表几乎没法更改！</p><blockquote><p>目前一个基本的互联网项目！</p></blockquote><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis4.png"></p><blockquote><p>为什么要用NoSQL！</p></blockquote><p>用户的个人信息，社交网络，地理位置。用户自己产生的数据，用户日志等等爆发式增长！</p><p><strong>这时候我们就需要使用NoSQL数据库，NoSQL 可以很好的处理以上的情况！</strong></p><h2 id="什么是NoSQL"><a href="#什么是NoSQL" class="headerlink" title="什么是NoSQL"></a>什么是NoSQL</h2><blockquote><p>NoSQL</p></blockquote><p>NoSQL = Not Only SQL (不仅仅是SQL)</p><p>关系型数据库：表格，行，列</p><p>泛指非关系型数据库的，随着web2.0 互联网的诞生！传统的关系型数据库很难对付web2.0 时代！尤其是超大规模的高并发的社区！暴露出来很多难以克服的问题，NoSQL在当今大数据环境下发展的十分迅速，Redis是发展最快的，而且是我们当下必须要掌握的一个技术！</p><p>很多数据类型用户的个人信息，社交网络，地理位置。这些数据类型的存储不需要一个固定的格式！不需要多余的操作就可以横向扩展！Redis通过Map&lt;String,Object&gt;使用键值对来控制！</p><blockquote><p>NoSQL 特点</p></blockquote><p><strong>解耦！</strong></p><ol><li>方便扩展(数据之间没有关系，很好扩展！)</li><li>大数据量高性能(Redis 一秒8万次，读取11万，NoSQL的缓存记录级，是一种细粒度的缓存，性能会比较慢！)</li><li>数据类型是多样性的！(不需要事先设计数据库！随取随用！如果是数据量十分大的表，很多人就无法设计了！)</li><li>传统RDBMS 和 NoSQL</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">传统的RDBMS- 结构化组织- SQL- 数据和关系都存在单独的表中rowcol- 操作，数据定义语言- 严格的一致性- 基础的事务- <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">NoSQL- 不仅仅是数据- 没有固定的查询语言- 键值对存储，列存储，文档存储，图形数据库<span class="token punctuation">(</span>社交关系<span class="token punctuation">)</span>- 最终一致性- CAP定理和BASE- 高性能，高可用，高可扩- <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>了解：3V + 3高</p></blockquote><p><strong>大数据时代的3V：主要是描述问题的</strong></p><ol><li>海量Volume</li><li>多样Variety</li><li>实时Velocity</li></ol><p><strong>大数据时代的3高：主要是对程序的要求</strong></p><ol><li>高并发</li><li>高可扩</li><li>高性能</li></ol><p><strong>真正在公司中的实践：NoSQL + RDBMS 一起使用才是最强的，</strong>阿里巴巴的架构演进！</p><p><strong>技术没有高低之分，就看如何去用！</strong>(提升内功，思维的提高！)</p><h2 id="阿里巴巴演进分析"><a href="#阿里巴巴演进分析" class="headerlink" title="阿里巴巴演进分析"></a>阿里巴巴演进分析</h2><p>我们查看一下淘宝网站</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis5.png"></p><p>思考问题：这么多东西难道都是在一个数据库中的吗？</p><p>这显然是不可能的，是使用了多种数据库才实现的</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis6.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1.商品的基本信息</span>名称、价格、商家信息。关系型数据库就可以解决了！MySQL/Oracle<span class="token comment"># 2.商品的描述、评论(文字比较多)</span>文档型数据库中，MongoDB<span class="token comment"># 3.图片</span>分布式文件系统 FastDFS- 淘宝自己的  TFS- Google的   GFs- Hadoop    HDFS- 阿里云的    OSS<span class="token comment"># 4.商品的关键字(搜索)</span>- 搜索引擎solrelasticsearch- Isearch<span class="token comment"># 5.商品热门的波段信息</span>- 内存数据库- Redis、Tair、Memcache<span class="token comment"># 6.商品的交易，外部的支付接口</span>- 第三方应用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要知道，一个简单地网页背后的技术一定不是大家所想的那么简单！</p><p>大型互联网应用问题：</p><ul><li>数据类型太多了！</li><li>数据源繁多，经常重构！</li><li>数据要改造，大面积改造？</li></ul><p>解决方案：</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis7.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis8.png"></p><h2 id="NoSQL的四大分类"><a href="#NoSQL的四大分类" class="headerlink" title="NoSQL的四大分类"></a>NoSQL的四大分类</h2><p><strong>KV键值对：</strong></p><ul><li>新浪：Redis</li><li>美团：Redis + Tair</li><li>阿里、百度：Redis + Memcache</li></ul><p><strong>文档型数据库(bson格式和json一样)：</strong></p><ul><li><p>MongoDB(一般必须要掌握)</p><ul><li>MongoDB 是一个基于分布式文件存储的数据库，C++ 编写，主要用来处理大量的文档！</li><li>MongoDB 是一个介于关系型数据库和非关系型数据库中间的产品！MongoDB 是非关系型数据库中功能最丰富，最像关系型数据库的！</li></ul></li><li><p>ConthDB</p></li></ul><p><strong>列存储数据库：</strong></p><ul><li>HBase</li><li>分布式文件系统</li></ul><p><strong>图型关系数据库：</strong></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis9.png"></p><ul><li>他不是存放图形，存放的是关系，比如：社交网络，广告推荐！</li><li>Neo4j，InfoGrid；</li></ul><blockquote><p>四者对比！</p></blockquote><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis10.png"></p><h1 id="Redis入门"><a href="#Redis入门" class="headerlink" title="Redis入门"></a>Redis入门</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>Redis 是什么？</p></blockquote><p>Redis (Remote Dictionary Server )，即远程字典服务 !</p><p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，<strong>它可以用作数据库、缓存和消息中间件</strong>。 它支持多种类型的数据结构，如 <a href="http://www.redis.cn/topics/data-types-intro.html#strings">字符串(strings)</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#hashes">散列(hashes)</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#lists">列表(lists)</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#sets">集合(sets)</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#sorted-sets">有序集合(sorted sets)</a> 与范围查询， <a href="http://www.redis.cn/topics/data-types-intro.html#bitmaps">bitmaps</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#hyperloglogs">hyperloglogs</a> 和 <a href="http://www.redis.cn/commands/geoadd.html">地理空间(geospatial)</a> 索引半径查询。 Redis 内置了 <a href="http://www.redis.cn/topics/replication.html">复制(replication)</a>，<a href="http://www.redis.cn/commands/eval.html">LUA脚本(Lua scripting)</a>， <a href="http://www.redis.cn/topics/lru-cache.html">LRU驱动事件(LRU eviction)</a>，<a href="http://www.redis.cn/topics/transactions.html">事务(transactions)</a> 和不同级别的 <a href="http://www.redis.cn/topics/persistence.html">磁盘持久化(persistence)</a>， 并通过 <a href="http://www.redis.cn/topics/sentinel.html">Redis哨兵(Sentinel)</a>和自动 <a href="http://www.redis.cn/topics/cluster-tutorial.html">分区(Cluster)</a>提供高可用性(high availability)。</p><p>是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis11.png"></p><p>Redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。</p><p>免费和开源！是当下最热门的 NoSQL 技术之一！也被人们称之为结构化数据库！</p><blockquote><p>Redis 能干嘛？</p></blockquote><ol><li>内存存储、持久化，内存中是断电即失、所以说持久化很重要 (rdb、aof)</li><li>效率高，可以用于高速缓存</li><li>发布订阅系统</li><li>地图信息分析</li><li>计时器、计数器 (浏览量！)</li><li>……..</li></ol><blockquote><p>特性</p></blockquote><ol><li><p>多样的数据类型</p></li><li><p>持久化</p></li><li><p>集群</p></li><li><p>事务</p></li><li><p>……</p></li></ol><p>官网：<a href="https://redis.io/">https://redis.io/</a></p><p>中文网：<a href="http://www.redis.cn/">http://www.redis.cn/</a></p><p>下载地址：通过官网下载即可！</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis12.png"></p><h2 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h2><p><code>Redis 推荐都是在Linux服务器上搭建的，所以是基于Linux学习的！</code></p><ol><li><p>下载安装包 <code>redis-6.2.1.tar.gz</code></p></li><li><p>解压安装包 <code>tar -zxvf redis-6.2.1.tar.gz</code></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis13.png"></p></li><li><p>进入解压后的文件夹，可以看到 redis 的配置文件</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis14.png"></p></li><li><p>基本的环境安装</p><ul><li><p>查看gcc环境</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis15.png"></p><p>如果没有环境的话，使用 <code>yum install gcc-c++</code> 安装环境</p></li><li><p>使用 <code>make</code> 命令，下载需要的文件</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis16.png"></p><p>之后使用 <code>make instal</code>l 命令，确认所需要的文件已经安装成功</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis17.png"></p></li></ul></li><li><p>redis 的默认安装路径 <code>/usr/local/bin</code></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis18.png"></p></li><li><p>将 redis 的配置文件。复制到新建的目录下</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis19.png"></p></li><li><p>redis 默认不是后台启动的，修改配置文件， <code>vim redis.conf</code></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis20.png"></p></li><li><p>启动Redis 服务，测试</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis21.png"></p></li><li><p>查看 redis 服务是否开启</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis22.png"></p></li><li><p>关闭 Redis 服务</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis23.png"></p></li><li><p>再次查看 redis 服务是否开启</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis24.png"></p></li><li><p>后面会使用单机Redis集群进行测试</p></li></ol><h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><p><code>redis-benchmark</code> 是一个压力测试工具。官方自带的性能测试工具</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis25.png"></p><p>使用 <code>redis-benchmark -命令参数</code> 即可</p><p>图片来源于菜鸟教程</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis26.png"></p><p>简单测试一下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 测试： 100个并发连接  100000请求</span>redis-benchmark -h localhost -p <span class="token number">6379</span> -c <span class="token number">100</span> -n <span class="token number">100000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis27.png"></p><p>如何查看这些数据？</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis28.png"></p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="Redis默认有16个数据库"><a href="#Redis默认有16个数据库" class="headerlink" title="Redis默认有16个数据库"></a>Redis默认有16个数据库</h3><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis29.png"></p><p>默认使用的是第0个数据库</p><p>可以使用select 进行切换</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token keyword">select</span> <span class="token number">3</span>   <span class="token comment"># 切换数据库</span>OK<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> dbsize<span class="token comment"># 查看数据库大小</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis30.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:6379<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> keys *  <span class="token comment"># 查看数据库所有的key</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"name"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis31.png"></p><p>清楚当前数据库 <code>flushdb</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:6379<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> flushdbOK<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> keys *<span class="token punctuation">(</span>empty array<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis32.png"></p><p>清除全部的数据库<code>flushall</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> keys *<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"key:__rand_int__"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"mylist"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"name"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"counter:__rand_int__"</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"myhash"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token keyword">select</span> <span class="token number">3</span>OK<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> flushallOK<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token number">0</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> keys *<span class="token punctuation">(</span>empty array<span class="token punctuation">)</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis33.png"></p><h3 id="Redis是单线程的"><a href="#Redis是单线程的" class="headerlink" title="Redis是单线程的"></a>Redis是单线程的</h3><p>明白Redis是很快的,官方表示, Redis是基于内存操作, CPU不是Redis的性能瓶颈, Redis的瓶颈是根据机器的内存和网络带宽，既然可以使用单线程来实现,就使用单线程了!所以就使用了单线程了!</p><p>Redis是C语言写的,官方提供的数据为100000+ 的QPS ,完全不比同样是使用key-value的Memcache差!</p><p><strong>Redis为什么单线程还这么快?</strong></p><ol><li><p>误区1 :高性能的服务器一定是多线程的?</p></li><li><p>误区2 :多线程(CPU上下文会切换! )一定比单线程效率高!</p></li></ol><p>CPU&gt;内存&gt;硬盘的速度</p><p><strong>核心</strong>: <code>Redis是将所有的数据全部放在内存中的,所以说使用单线程去操作效率就是最高的,多线程(CPU上下文会切换:耗时的操作! ! ! ) , 对于内存系统来说,如果没有上下文切换,效率就是最高的!多次读写都是在一个CPU上的,在内存情况下,这个就是最佳的方案!</code></p><h1 id="五大数据类型"><a href="#五大数据类型" class="headerlink" title="五大数据类型"></a>五大数据类型</h1><blockquote><p>官方文档</p></blockquote><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis34.png"></p><p>全文翻译：</p><p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，<strong>它可以用作数据库、缓存和消息中间件</strong>。 它支持多种类型的数据结构，如 <a href="http://www.redis.cn/topics/data-types-intro.html#strings">字符串(strings)</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#hashes">散列(hashes)</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#lists">列表(lists)</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#sets">集合(sets)</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#sorted-sets">有序集合(sorted sets)</a> 与范围查询， <a href="http://www.redis.cn/topics/data-types-intro.html#bitmaps">bitmaps</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#hyperloglogs">hyperloglogs</a> 和 <a href="http://www.redis.cn/commands/geoadd.html">地理空间(geospatial)</a> 索引半径查询。 Redis 内置了 <a href="http://www.redis.cn/topics/replication.html">复制(replication)</a>，<a href="http://www.redis.cn/commands/eval.html">LUA脚本(Lua scripting)</a>， <a href="http://www.redis.cn/topics/lru-cache.html">LRU驱动事件(LRU eviction)</a>，<a href="http://www.redis.cn/topics/transactions.html">事务(transactions)</a> 和不同级别的 <a href="http://www.redis.cn/topics/persistence.html">磁盘持久化(persistence)</a>， 并通过 <a href="http://www.redis.cn/topics/sentinel.html">Redis哨兵(Sentinel)</a>和自动 <a href="http://www.redis.cn/topics/cluster-tutorial.html">分区(Cluster)</a>提供高可用性(high availability)。</p><h2 id="Redis-Key常用命令"><a href="#Redis-Key常用命令" class="headerlink" title="Redis-Key常用命令"></a>Redis-Key常用命令</h2><p><strong>Redis命令不区分大小写</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> keys *<span class="token punctuation">(</span>empty array<span class="token punctuation">)</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token function">clear</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> name xhc   <span class="token comment"># 设置k-v键值对</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> keys *<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"name"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> age <span class="token number">1</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> keys *<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"name"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"age"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> exists name<span class="token comment"># 判断key是否存在</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> exists name1<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> move name <span class="token number">1</span><span class="token comment">#移除key，1 表示当前库</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> keys *<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"age"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> name xhcOK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> keys *<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"name"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"age"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get name<span class="token string">"xhc"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> expire name <span class="token number">10</span><span class="token comment">#设置key的过期时间，单位是秒</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ttl name<span class="token comment">#查看key的过期时间 -2表示已经过期</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">6</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ttl name<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get name<span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">type</span> name<span class="token comment">#查看key的类型！！</span>string<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">type</span> agestring<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果遇到不会的命令，可以在官网查看帮助文档</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis35.png"></p><h2 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String(字符串)"></a>String(字符串)</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">##################################################################################################################</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> key1 v1<span class="token comment"># 设置键值对</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get key1<span class="token comment"># 获取值</span><span class="token string">"v1"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> keys *<span class="token comment"># 查看所有的key</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"key1"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> EXISTS key1<span class="token comment"># 判断key是否存在</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> APPEND key1 <span class="token string">"hello"</span><span class="token comment"># 向指定的key追加字符串，如果当前key不存在就相当于创建一个</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">7</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get key1<span class="token string">"v1hello"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> strlen key1<span class="token comment"># 获取字符串的长度</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">7</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> APPEND key1 <span class="token string">",xhc"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">11</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> strlen key1<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">11</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get key1<span class="token string">"v1hello,xhc"</span> <span class="token comment">##################################################################################################################</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> views <span class="token number">0</span><span class="token comment"># 初始化浏览量为0</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get views<span class="token string">"0"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> incr views<span class="token comment"># 自增1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> incr views<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get views<span class="token string">"2"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> decr views<span class="token comment"># 自减1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> decr views<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get views<span class="token string">"0"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> incrby views <span class="token number">10</span><span class="token comment"># 可以设置步长，指定增量！</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">10</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> incrby views <span class="token number">10</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">20</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> decrby views <span class="token number">5</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">15</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token comment">#################################################################################################################</span><span class="token comment"># 获取指定的范围的字符 range</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> key1 <span class="token string">"hello,xhc"</span><span class="token comment"># 设置key1的值</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get key1<span class="token string">"hello,xhc"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> getrange key1 <span class="token number">0</span> <span class="token number">3</span><span class="token comment"># 截取字符串，[0,3]</span><span class="token string">"hell"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> getrange key1 <span class="token number">0</span> -1<span class="token comment"># 获取全部的字符串</span><span class="token string">"hello,xhc"</span><span class="token comment"># 替换</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> key2 abcdefgOK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get key2<span class="token string">"abcdefg"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> setrange key2 <span class="token number">1</span> xx<span class="token comment"># 替换指定位置开始的字符串</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">7</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get key2<span class="token string">"axxdefg"</span><span class="token comment">#################################################################################################################</span><span class="token comment"># setex(set with expire) 设置k-v并设置过期时间</span><span class="token comment"># setnx(set if not exist) 当key不存在时再设置</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> setex key3 <span class="token number">30</span> <span class="token string">"hello"</span><span class="token comment"># 设置key3的值为 hello  30秒后过期</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ttl key3<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">26</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get key3<span class="token string">"hello"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> setnx mykey <span class="token string">"redis"</span><span class="token comment"># 如果mykey不存在，创建mykey</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> keys *<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"key2"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"key1"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"mykey"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ttl key3<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> -2<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> setnx mykey <span class="token string">"MongoDB"</span><span class="token comment"># 如果mykey存在，则创建失败</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get mykey<span class="token string">"redis"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token comment">#################################################################################################################</span><span class="token comment"># mset 批量设置多个值</span><span class="token comment"># mget 批量获取多个值</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> mset k1 v1 k2 v2 k3 v3<span class="token comment"># mset 批量设置多个值</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> keys *<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"k3"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"k2"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"k1"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> mget k1 k2 k3<span class="token comment"># 批量获取多个值</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"v1"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"v2"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"v3"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> msetnx k1 v1 k4 v4<span class="token comment"># msetnx 是一个原子性的操作，要么一起成功，要么一起失败！</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get k4<span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token comment"># 对象，如何存放在Redis中</span><span class="token comment"># 这里的key是一个巧妙的设计：user：{ud}:{filed},如此设计在Redis中是完全OK的</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> mset user:1:name zhangsan user:1:age <span class="token number">2</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> mget user:1:name user:1:age<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"zhangsan"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"2"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token comment">#################################################################################################################</span><span class="token comment"># getset 先get然后再set</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> getset db redis <span class="token comment"># 如果值不存在，则返回 nil</span><span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get db<span class="token string">"redis"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> getset db mongodb<span class="token comment"># 如果值存在，获取原来的值，并设置新的值</span><span class="token string">"redis"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get db<span class="token string">"mongodb"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>String的使用场景：value除了是字符串还可以使数字</p><ul><li>计数器</li><li>统计多单位的数量</li><li>粉丝数</li><li>对象缓存存储！</li></ul><h2 id="List-列表"><a href="#List-列表" class="headerlink" title="List(列表)"></a>List(列表)</h2><p>在Redis里面，我们可以把 <code>List</code> 玩成 栈、队列、阻塞队列</p><p><code>在Redis里关于List的命令都是L开头的</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#################################################################################################################</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> lpush list one<span class="token comment"># 将一个值或者多个值，插入到列表头部（左）</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> lpush list two<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> lpush list three<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> lrange list <span class="token number">0</span> -1<span class="token comment"># 获取list中的值</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"three"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"two"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"one"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> lrange list <span class="token number">0</span> <span class="token number">1</span><span class="token comment"># 通过区间获取具体的值</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"three"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"two"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> rpush list right<span class="token comment"># 将一个值或者多个值，插入到列表尾部（右）</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">4</span><span class="token comment">#################################################################################################################</span><span class="token comment"># LPOP 移除list的第一个元素</span><span class="token comment"># RPOP 移除list的最后一个元素</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> lrange list <span class="token number">0</span> -1<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"three"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"two"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"one"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"right"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> lpop list <span class="token comment"># 移除list的第一个元素</span><span class="token string">"three"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> rpop list<span class="token comment"># 移除list的最后一个元素</span><span class="token string">"right"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> lrange list <span class="token number">0</span> -1<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"two"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"one"</span><span class="token comment">#################################################################################################################</span><span class="token comment"># index 通过下标获取list中的某一个值</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> lrange list <span class="token number">0</span> -1<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"two"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"one"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> lindex list <span class="token number">1</span><span class="token comment"># 通过下标获取list中的某一个值</span><span class="token string">"one"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> lindex list <span class="token number">0</span><span class="token string">"two"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token comment">#################################################################################################################</span><span class="token comment"># Llen 获取列表的长度</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> lpush list one<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> lpush list two<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> lpush list three<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> llen list<span class="token comment"># 获取列表的长度</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token comment">#################################################################################################################</span><span class="token comment"># lrem 移除指定的值</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> lrange list <span class="token number">0</span> -1<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"three"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"three"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"two"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"one"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> lrem list <span class="token number">1</span> one<span class="token comment"># 移除list集合中指定个数的value，精确匹配</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> lrange list <span class="token number">0</span> -1<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"three"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"three"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"two"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> lrem list <span class="token number">1</span> three<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> lrange list <span class="token number">0</span> -1<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"three"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"two"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> lpush list three<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> lrem list <span class="token number">2</span> three<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> lrange list <span class="token number">0</span> -1<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"two"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token comment">#################################################################################################################</span><span class="token comment"># Ltrim 截取</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> rpush mylist <span class="token string">"hello"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> rpush mylist <span class="token string">"hello1"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> rpush mylist <span class="token string">"hello2"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> rpush mylist <span class="token string">"hello3"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">4</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ltrim mylist <span class="token number">1</span> <span class="token number">2</span><span class="token comment"># 通过下标截取指定区间的list，这个list已经改变了，list只剩下截取的元素了</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> lrange mylist <span class="token number">0</span> -1<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"hello1"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"hello2"</span><span class="token comment">#################################################################################################################</span><span class="token comment"># rpoplpush 移除列表的最后一个元素，并将它移动到新的列表中</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> rpush mylist <span class="token string">"hello"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> rpush mylist <span class="token string">"hello1"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> rpush mylist <span class="token string">"hello2"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> rpoplpush mylist myotherlist<span class="token comment"># 移除列表的最后一个元素，并将它移动到新的列表中</span><span class="token string">"hello2"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> lrange mylist <span class="token number">0</span> -1<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"hello"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"hello1"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> lrange myotherlist <span class="token number">0</span> -1<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"hello2"</span><span class="token comment">#################################################################################################################</span><span class="token comment"># lset 将列表指定下标的值替换为另一个值，更新操作</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> exists list<span class="token comment"># 判断这个列表是否存在</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> lset list <span class="token number">0</span> item<span class="token comment"># 如果不存在，执行lset命令 就会报错</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR no such key<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> lpush list value1<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> lrange list <span class="token number">0</span> <span class="token number">0</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"value1"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> lset list <span class="token number">0</span> item<span class="token comment"># 如果存在，更新当前下标的值</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> lrange list <span class="token number">0</span> <span class="token number">0</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"item"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> lset list <span class="token number">1</span> other<span class="token comment"># 如果不存在，就会报错</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR index out of range<span class="token comment">#################################################################################################################</span><span class="token comment"># linsert 将某个具体的value插入到列表中指定的某个元素的前面或者后面</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> rpush mylist <span class="token string">"hello"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> rpush mylist <span class="token string">"world"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> linsert mylist before <span class="token string">"world"</span> <span class="token string">"other"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> lrange mylist <span class="token number">0</span> -1<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"hello"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"other"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"world"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> linsert mylist after <span class="token string">"world"</span> <span class="token string">"new"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">4</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> lrange mylist <span class="token number">0</span> -1<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"hello"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"other"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"world"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"new"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>小结</p></blockquote><ul><li>他实际上是一个链表，before Node after，left right 都可以插入值</li><li>如果list不存在，创建新的链表</li><li>如果list存在，新增内容</li><li>如果移除了所有值，空链表，也代表不存在！</li><li>在两边插入或者改动值，效率最高！中间元素，相对来说效率会低一点~</li></ul><p>消息排队！消息队列(Lpush Rpop)，栈(Lpush Lpop)!</p><h2 id="Set-集合"><a href="#Set-集合" class="headerlink" title="Set(集合)"></a>Set(集合)</h2><p>set中的值不可以重复</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#################################################################################################################</span><span class="token comment"># sadd向set集合中添加元素</span><span class="token comment"># smembers查看set元素中的所有值</span><span class="token comment"># sismember判断某一个值是不是在set集合中</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> sadd myset <span class="token string">"hello"</span><span class="token comment"># 向set集合中添加元素</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> sadd myset <span class="token string">"xhc"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> sadd myset <span class="token string">"lovexhc"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> smembers myset<span class="token comment"># 查看set元素中的所有值</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"hello"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"xhc"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"lovexhc"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> sismember myset hello<span class="token comment"># 判断某一个值是不是在set集合中  1表示存在，0表示不存在</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> sismember myset world<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span> <span class="token comment">#################################################################################################################</span><span class="token comment"># scard获取set集合中的元素个数！</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> scard myset<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">4</span><span class="token comment">#################################################################################################################</span><span class="token comment"># srem移除set集合中的指定元素</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> srem myset <span class="token string">"hello"</span><span class="token comment"># 移除set集合中的指定元素</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> scard myset<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> smembers myset<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"xhc"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"lovexhc2"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"lovexhc"</span><span class="token comment">#################################################################################################################</span><span class="token comment"># srandmember 随机抽取元素</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> smembers myset<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"xhc"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"lovexhc2"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"lovexhc"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> srandmember myset<span class="token comment"># 随机抽选出一个元素</span><span class="token string">"xhc"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> srandmember myset<span class="token string">"lovexhc2"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> srandmember myset<span class="token string">"lovexhc"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> srandmember myset <span class="token number">2</span><span class="token comment"># 随机抽选出指定个数的元素</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"lovexhc"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"lovexhc2"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> srandmember myset <span class="token number">2</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"xhc"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"lovexhc"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> srandmember myset <span class="token string">"lovexhc2"</span><span class="token comment">#################################################################################################################</span><span class="token comment"># 随机删除元素（spop)，删除指定的元素</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> smembers myset<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"xhc"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"lovexhc2"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"lovexhc"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> spop myset<span class="token comment"># 随机删除set集合中的元素！</span><span class="token string">"xhc"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> spop myset<span class="token string">"lovexhc2"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> smembers myset<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"lovexhc"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token comment">#################################################################################################################</span><span class="token comment"># smove将一个指定的值，移动到另外一个set集合</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> sadd myset hello<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> sadd myset world<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> sadd myset xhc<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> sadd myset2 set2<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> smove myset myset2 xhc<span class="token comment"># 将一个指定的值，移动到另外一个set集合</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> smembers myset<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"world"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"hello"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> smembers myset2<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"xhc"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"set2"</span><span class="token comment">#################################################################################################################</span>微博，B站，共同关注！（并集）数字集合类：- 差集 SDIFF- 交集 SINTER- 并集 SUNION<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> sadd key1 a<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> sadd key1 b<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> sadd key1 c<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> sadd key2 c<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> sadd key2 d<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> sadd key2 e<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token function">sdiff</span> key1 key2<span class="token comment"># 差集</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"a"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"b"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> sinter key1 key2<span class="token comment"># 交集</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"c"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> sunion key1 key2<span class="token comment"># 并集</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"b"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"c"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"d"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"a"</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"e"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>微博 A用户将所有关注的人放在一个set集合中将它的粉丝也放在一个集合中！</p><p>共同关注</p><h2 id="Hash-哈希"><a href="#Hash-哈希" class="headerlink" title="Hash(哈希)"></a>Hash(哈希)</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#################################################################################################################</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> hset myhash field1 xhc<span class="token comment"># 向map集合中插入一个键值对 key-value</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> hget myhash field1<span class="token comment"># 从map集合获取一个值</span><span class="token string">"xhc"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> hmset myhash field1 hello field2 world<span class="token comment"># 向map集合中插入多个键值对 key-value</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> hmget myhash field1 field2<span class="token comment"># 从map集合获取多个值</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"hello"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"world"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> hgetall myhash<span class="token comment"># 获取map中全部值</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"field1"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"hello"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"field2"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"world"</span><span class="token comment">#################################################################################################################</span><span class="token comment"># hdel 删除</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> hdel myhash field1<span class="token comment"># 删除指定的键值对</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> hgetall myhash<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"field2"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"world"</span><span class="token comment">#################################################################################################################</span><span class="token comment"># hlen 获取map的长度</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> hmset myhash field1 hello field2 worldOK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> hgetall myhash<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"field2"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"world"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"field1"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"hello"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> hlen myhash<span class="token comment"># 获取map的长度</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span><span class="token comment">#################################################################################################################</span><span class="token comment"># hexists 判断map中key是否存在</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> hexists myhash field1<span class="token comment"># 判断hash中指定的字段是否存在</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> hexists myhash field3<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token comment">#################################################################################################################</span><span class="token comment"># hkeys 只获得所有的key</span><span class="token comment"># hvals 只获得所有的value</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> hkeys myhash<span class="token comment"># 只获得所有的key</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"field2"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"field1"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> hvals myhash<span class="token comment"># 只获得所有的value</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"world"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"hello"</span><span class="token comment">#################################################################################################################</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> hset myhash field3 <span class="token number">5</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> hincrby myhash field3 <span class="token number">1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">6</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> hincrby myhash field3 -1<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">5</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> hsetnx myhash field4 hello<span class="token comment"># 如果不存在则能设置</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> hsetnx myhash field4 world<span class="token comment"># 如果存在则不能设置</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>hash存放变更的数据，尤其是是用户信息之类的，经常变动的信息! hash 更适合于对象的存储，String更加适合字符串存储!</p><h2 id="Zset-有序集合"><a href="#Zset-有序集合" class="headerlink" title="Zset(有序集合)"></a>Zset(有序集合)</h2><p>在set的基础上,增加了一个值, set k1 v1 。 zset k1 score1 V1，通过score的大小来排序</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> zadd myset <span class="token number">1</span> one<span class="token comment"># 添加一个值</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> zadd myset <span class="token number">2</span> two <span class="token number">3</span> three<span class="token comment"># 添加多个值</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> zrange myset <span class="token number">0</span> -1<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"one"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"two"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"three"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token comment">#################################################################################################################</span><span class="token comment"># 排序如何实现</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> zadd salary <span class="token number">2500</span> xiaohong<span class="token comment"># 添加3个用户</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> zadd salary <span class="token number">5000</span> zhangsan<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> zadd salary <span class="token number">500</span> xhc<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> zrangebyscore salary -inf +inf<span class="token comment"># 显示全部的用户 从小到大排序</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"xhc"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"xiaohong"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"zhangsan"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> zrevrange salary <span class="token number">0</span> -1<span class="token comment"># 显示全部的用户 从打倒小排序</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"zhangsan"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"xhc"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> zrangebyscore salary -inf +inf withscores<span class="token comment"># 显示全部的用户，并且附带score</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"xhc"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"500"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"xiaohong"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"2500"</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"zhangsan"</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">"5000"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> zrangebyscore salary -inf  <span class="token number">2500</span> withscores<span class="token comment"># 显示工资小于2500员工的升序排序</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"xhc"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"500"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"xiaohong"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"2500"</span><span class="token comment">#################################################################################################################</span><span class="token comment"># zrem 移除Zset中的元素</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> zrange salary <span class="token number">0</span> -1<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"xhc"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"xiaohong"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"zhangsan"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> zrem salary xiaohong<span class="token comment"># 移除有序集合中的指定元素</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> zrange salary <span class="token number">0</span> -1<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"xhc"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"zhangsan"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> zcard salary<span class="token comment"># 获取有序集合中的个数</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span><span class="token comment">#################################################################################################################</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> zadd myset <span class="token number">1</span> hello<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> zadd myset <span class="token number">2</span> world <span class="token number">3</span> xhc<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> zcount myset <span class="token number">1</span> <span class="token number">3</span><span class="token comment"># 获取score在指定区间的成员数量</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> zcount myset <span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其余的一些API ，通过我们的学习，剩下的如果工作中有需要，这个时候可以去查查看官方文档!</p><p>案例思路: set排序存储班级成绩表,工资表排序!</p><p>普通消息  1，重要消息  2 ,带权重进行判断!</p><p>排行榜应用实现</p><h1 id="三种特殊数据类型"><a href="#三种特殊数据类型" class="headerlink" title="三种特殊数据类型"></a>三种特殊数据类型</h1><h2 id="Geospatial-地理位置"><a href="#Geospatial-地理位置" class="headerlink" title="Geospatial 地理位置"></a>Geospatial 地理位置</h2><p>日常生活中的，朋友圈的定位、附近的人、打车距离的计算。是如何实现的呢？</p><p>可以通过Redis的<code>Geospatial</code> 数据类型实现。Redis的Geo在Redis3.2版本就推出了!这个功能可以推算地理位置的信息，两地之间的距离、方圆几里的人!</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis36.png"></p><blockquote><p>geoadd 添加地理位置</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># geoadd 添加地理位置</span><span class="token comment"># 规则: 两级无法直接添加，我们一-般会下载城市数据，直接通过java程序一次性导入!</span><span class="token comment"># 有效的经度从-180度到180度。</span><span class="token comment"># 有效的纬度从-85.05112878度到85.05112878度。</span><span class="token comment"># 当坐标位置超出上述指定范围时，该命令将会返回一个错误。</span><span class="token comment"># 127.0.0.1:6379&gt; geoadd china:city 39.40 116.40 beijing</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR invalid longitude,latitude pair <span class="token number">39.400000</span>,116.400000<span class="token comment"># 将指定的地理空间位置（纬度、经度、名称）添加到指定的key中。这些数据将会存储到sorted set</span><span class="token comment"># 参数 key 值（纬度、经度、名称）</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> geoadd china:city <span class="token number">116.40</span> <span class="token number">39.90</span> beijing<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> geoadd china:city <span class="token number">121.47</span> <span class="token number">31.23</span> shanghai<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> geoadd china:city <span class="token number">106.50</span> <span class="token number">29.53</span> chongqin <span class="token number">114.05</span> <span class="token number">22.52</span> shengzhen<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span><span class="token punctuation">(</span><span class="token number">1</span>.78s<span class="token punctuation">)</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> geoadd china:city <span class="token number">120.16</span> <span class="token number">30.24</span> hangzhou <span class="token number">108.96</span> <span class="token number">34.26</span> xian<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>geopos 从<code>key</code>里返回所有给定位置元素的位置（经度和纬度）</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 获取指定的城市的经度和纬度!</span><span class="token comment"># 获得当前定位: 一定是一个坐标值!</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> geopos china:city beijing<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"116.39999896287918091"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"39.90000009167092543"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> geopos china:city beijing chongqin<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"116.39999896287918091"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"39.90000009167092543"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"106.49999767541885376"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"29.52999957900659211"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>geodist 返回两个给定位置之间的距离</p></blockquote><p>应用场景：微信中两个人的距离</p><p>单位：</p><ul><li>m 表示单位为米。</li><li>km 表示单位为千米。</li><li>mi 表示单位为英里。</li><li>ft 表示单位为英尺。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> geodist china:city beijing shanghai km<span class="token string">"1067.3788"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> geodist china:city beijing chongqin km<span class="token string">"1464.0708"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>georadius 以给定的经纬度为中心，找出某一半径内的元素</p></blockquote><p>应用场景：我附近的人 ( 获得所有附近的人的地址,定位! ) 通过半径来查询 !</p><p>获得指定数量的人,，200</p><p>所有数据应该都录入: china:city ，才会让结果更加正确!</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> georadius china:city <span class="token number">110</span> <span class="token number">30</span> <span class="token number">1000</span> km<span class="token comment"># 以110,30 这个经纬度为中心，寻找方圆1000km内的城市</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"chongqin"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"xian"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"shengzhen"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"hangzhou"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> georadius china:city <span class="token number">110</span> <span class="token number">30</span> <span class="token number">500</span> km<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"chongqin"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"xian"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> georadius china:city <span class="token number">110</span> <span class="token number">30</span> <span class="token number">500</span> km withdist<span class="token comment"># 显示到中心的距离</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"chongqin"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"341.9374"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"xian"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"483.8340"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> georadius china:city <span class="token number">110</span> <span class="token number">30</span> <span class="token number">500</span> km withcoord<span class="token comment"># 显示他人的定位信息</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"chongqin"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"106.49999767541885376"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"29.52999957900659211"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"xian"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"108.96000176668167114"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"34.25999964418929977"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> georadius china:city <span class="token number">110</span> <span class="token number">30</span> <span class="token number">500</span> km withdist withcoord count <span class="token number">1</span><span class="token comment"># 指定显示的数量</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"chongqin"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"341.9374"</span>   <span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"106.49999767541885376"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"29.52999957900659211"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> georadius china:city <span class="token number">110</span> <span class="token number">30</span> <span class="token number">500</span> km withdist withcoord count <span class="token number">2</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"chongqin"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"341.9374"</span>   <span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"106.49999767541885376"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"29.52999957900659211"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"xian"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"483.8340"</span>   <span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"108.96000176668167114"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"34.25999964418929977"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>georadiusbymember 找出位于指定范围内的元素，中心点是由给定的位置元素决定的</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 找出位于指定元素周围的其他元素</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> georadiusbymember china:city beijing <span class="token number">1000</span> km<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"beijing"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"xian"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> georadiusbymember china:city shanghai <span class="token number">400</span> km<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"hangzhou"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"shanghai"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>geohash 返回一个或多个位置元素的geohash表示</p></blockquote><p>该命令将返回11个字符的geohash字符串</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> geohash china:city beijing chongqin<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"wx4fbxxfke0"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"wm5xzrybty0"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>geo 底层的实现原理其实就是Zset！我们可以使用Zset命令来操作geo</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> zrange china:city <span class="token number">0</span> -1<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"chongqin"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"xian"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"shengzhen"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"hangzhou"</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"shanghai"</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">"beijing"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> zrem china:city beijing<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> zrange china:city <span class="token number">0</span> -1<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"chongqin"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"xian"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"shengzhen"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"hangzhou"</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"shanghai"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Hyperloglog"><a href="#Hyperloglog" class="headerlink" title="Hyperloglog"></a>Hyperloglog</h2><blockquote><p>基数是什么</p></blockquote><p>A{1,3,5,7,8,7}</p><p>B{1,3,5,7,8}</p><p>基数(不重复的元素) =5, 可以接受误差!</p><blockquote><p>简介</p></blockquote><p>Redis 2.8.9版本就更新了Hyperloglog 数据结构!</p><p>Redis Hyperloglog基数统计的算法!</p><p>优点:占用的内存是固定，2^64不同的元素的基数,只需要废12KB内存!如果要从内存角度来比较的话Hyperloglog 首选!</p><p><strong>网页的 UV 网站访问量 (一个人访问一个网站多次,但是还是算作一个人! )</strong></p><p>传统的方式，set 保存用户的id ，然后就可以统计set中的元素数量作为标准判断!</p><p>这个方式如果保存大量的用户id ，就会比较麻烦 ! 浪费内存。我们的目的是为了计数，而不是保存用户id ;</p><p>0.81%错误率!统计UV任务,可以忽略不计的!</p><blockquote><p>测试使用</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> pfadd mykey a b c d e f g h i j<span class="token comment"># 创建第一组数据 mykey</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> pfcount mykey<span class="token comment"># 统计mykey 元素的基数数量</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">10</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> pfadd mykey2 i j z x c <span class="token function">v</span> b n m<span class="token comment"># 创建第一组数据 mykey2</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> pfcount mykey2<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">9</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> pfmerge mykey3 mykey mykey2<span class="token comment"># 合并mykey mykey2 -&gt; mykey3 并集</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> pfcount mykey3<span class="token comment"># 查看mykey3的基数数量</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">15</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果允许容错，那么一定可以使用Hyperloglog !</p><p>如果不允许容错，就使用set或者自己的数据类型即可!</p><h2 id="Bitmaps"><a href="#Bitmaps" class="headerlink" title="Bitmaps"></a>Bitmaps</h2><blockquote><p>位存储</p></blockquote><p>统计用户信息。活跃、不活跃 ! 登录、末登录 ! 两个状态的,都可以使用Bitmaps !</p><p>Bitmaps位图，数据结构！操作二进制位来进行记录，就只有0和1两个状态！</p><p>记录365天的打卡信息 需要 365 bit 。1字节= 8bit 46 个字节左右!</p><blockquote><p>测试</p></blockquote><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis37.png"></p><p>使用bitmap来记录周一到周日的打卡!</p><p>周一(0) : 1 周二(1) : 0 周三(2) : 0 周四(3) : 1 ………</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> setbit sign <span class="token number">0</span> <span class="token number">1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> setbit sign <span class="token number">1</span> <span class="token number">0</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> setbit sign <span class="token number">2</span> <span class="token number">0</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> setbit sign <span class="token number">3</span> <span class="token number">1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> setbit sign <span class="token number">4</span> <span class="token number">1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> setbit sign <span class="token number">5</span> <span class="token number">0</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> setbit sign <span class="token number">6</span> <span class="token number">0</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看某一天是否有打卡</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> getbit sign <span class="token number">3</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> getbit sign <span class="token number">6</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>统计操作，统计打卡的天数</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> bitcount sign <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>Redis事务本质:一组命令的集合!一个事务中的所有命令都会被序列化，在事务执行过程的中，会按照顺序执行!</p><p>一次性、 顺序性、排他性 ! 执行一系列的命令 !</p><blockquote><p>——————— 队列 set命令 set命令 set命令 执行—————————</p></blockquote><p><code>Redis事务没有没有隔离级别的概念 !</code></p><p><code>所有的命令在事务中,并没有直接被执行!只有发起执行命令的时候才会执行! Exec</code></p><p><code>Redis单条命令式保存原子性的,但是事务不保证原子性!</code></p><p>redis的事务：</p><ul><li>开启事务（multi）</li><li>命令入队（……其他命令）</li><li>执行事务（exec）</li></ul><blockquote><p>正常执行事务</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> multi<span class="token comment"># 开启事务</span>OK<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> k1 v1QUEUED<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> k2 v2QUEUED<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> get k2QUEUED<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> k3 v3QUEUED<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token builtin class-name">exec</span><span class="token comment"># 执行事务</span><span class="token number">1</span><span class="token punctuation">)</span> OK<span class="token number">2</span><span class="token punctuation">)</span> OK<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"v2"</span><span class="token number">4</span><span class="token punctuation">)</span> OK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>取消事务</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> multi<span class="token comment"># 开启事务</span>OK<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> k1 v1QUEUED<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> k2 v2QUEUED<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> k4 v4QUEUED<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> discard<span class="token comment"># 取消事务</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get k4<span class="token comment"># 事务队列中的命令都不会被执行</span><span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>编译型异常（代码有问题！命令有错误！），事务中所有的命令都不会被执行！</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> multiOK<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> k1 v1QUEUED<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> k2 v2QUEUED<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> k3 v3QUEUED<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> getset k3<span class="token comment"># 错误的命令</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR wrong number of arguments <span class="token keyword">for</span> <span class="token string">'getset'</span> <span class="token builtin class-name">command</span><span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> k4 v4QUEUED<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> k5 v5QUEUED<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token builtin class-name">exec</span><span class="token comment"># 执行事务报错</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> EXECABORT Transaction discarded because of previous errors.<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get k5<span class="token comment"># 所有的命令都不会被执行</span><span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>运行时报错（1/0），如果事务队列中存在语法性错误 , 那么执行命令的时候 , 其他命令是可以正常执行的 , 错误命令抛出异常 !</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> k1 <span class="token string">"v1"</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> multiOK<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> incr k1<span class="token comment"># 执行的时候会失败</span>QUEUED<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> k2 v2QUEUED<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> k3 v3QUEUED<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> get k3QUEUED<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token builtin class-name">exec</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR value is not an integer or out of range<span class="token comment"># 虽然第一条命令报错了，但是依旧正常执行成功了</span><span class="token number">2</span><span class="token punctuation">)</span> OK<span class="token number">3</span><span class="token punctuation">)</span> OK<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"v3"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get k2<span class="token string">"v2"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get k3<span class="token string">"v3"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>监控！Watch</p></blockquote><p><strong>悲观锁：</strong></p><ul><li>很悲观，认为什么时候都会出问题，无论做什么都会加锁！</li></ul><p><strong>乐观锁：</strong></p><ul><li>很乐观，认为什么时候都不会出问题，所以不会上锁!更新数据的时候去判断一下，在此期间是否有人修改过这个数据。<ul><li>获取version</li><li>更新的时候比较version</li></ul></li></ul><blockquote><p>Redis 监控测试</p></blockquote><p>正常执行成功：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> money <span class="token number">100</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> out <span class="token number">0</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token function">watch</span> money<span class="token comment"># 监控 money 对象，获取 money 的值</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> multi<span class="token comment"># 事务正常结束，执行期间数据没有发生变动。这个时候就正常执行成功</span>OK<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> decrby money <span class="token number">20</span>QUEUED<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> incrby out <span class="token number">20</span>QUEUED<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token builtin class-name">exec</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">80</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试多线程修改值。使用watch可以当做redis的乐观锁操作！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token function">watch</span> money        <span class="token comment"># 监控 money</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> multiOK<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> decrby money <span class="token number">10</span>QUEUED<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> incrby out <span class="token number">10</span>QUEUED<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token builtin class-name">exec</span><span class="token comment"># 在执行之前，另外一个线程。修改了money的值。这个时候，就会导致事务执行失败</span><span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果修改失败， 重新监控即可。在此之前要解除监控</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis38.png"></p><blockquote><p>小结</p></blockquote><ol><li><p>multi ：开启Redis的事务,置客户端为事务态。</p></li><li><p>exec ：提交事务，执行从multi到此命令前的命令队列，置客户端为非事务态。</p></li><li><p>discard ：取消事务，置客户端为非事务态。</p></li><li><p>watch：监视键值对，作用是如果事务提交exec时发现监视的对像发生变化,事务将被取消。</p></li></ol><h1 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h1><p>我们要使用Java来操作Redis ，知其然并知其所以然，授人以渔！学习不能急躁，慢慢来会很快！</p><p>什么是Jedis，Jedis是Redis官方推荐的java连接开发工具 ! 是操作Redis的中间件!如果你要使用java操作redis ,那么一定要对Jedis十分的熟悉!</p><blockquote><p>测试</p></blockquote><ol><li><p>导入依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--导入jedis的包--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/redis.clients/jedis --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--fastjson--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.62<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编码测试</p><ul><li><p>连接数据库</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment">// 1、 new Jedis 对象即可。 192.168.252.128 是Linux主机地址</span>        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"192.168.252.128"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// jedis 所有的方法就是我们之前学习的所有指令! 所以之前的指令学习很重要!</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis39.png"></p></li><li><p>操作命令</p></li><li><p>断开连接</p></li></ul></li></ol><h2 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h2><blockquote><p>对key操作命令</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestKey</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"192.168.252.128"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//对key操作命令</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"清空数据： "</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">flushDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"判断某个键是否存在： "</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新增&lt;'username','xhc'&gt;的键值对： "</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"xhc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新增&lt;'password','password'&gt;的键值对： "</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"系统中所有的键如下： "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> keys <span class="token operator">=</span>jedis<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除键password："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"判断键password是否存在："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查看键username所存储的值的类型："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"随机返回key空间的一个："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">randomKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"重命名key："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"取出改后的name："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"按索引查询："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除当前选择数据库中的所有key："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">flushDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"返回当前数据库中key的数目："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">dbSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除所有数据库中的所有key："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">flushAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis40.png"></p><p>其他的命令就不意义演示了，所有的api命令,就是我们对应的上面学习的指令,一个都没有变化</p><blockquote><p>事务</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestTX</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"192.168.252.128"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">flushDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JSONObject</span> jsonObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jsonObject<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jsonObject<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"xhc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 开启事务</span>        <span class="token class-name">Transaction</span> multi <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">multi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> jsonObject<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">try</span> <span class="token punctuation">{</span>           multi<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"user1"</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>           multi<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"user2"</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//代码抛出异常，事务执行失败</span>           multi<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 执行事务</span>       <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>           multi<span class="token punctuation">.</span><span class="token function">discard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//放弃事务</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"user1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"user2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//关闭连接</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正常情况下：</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis41.png"></p><p>出现异常：</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis42.png"></p><h1 id="SpringBoot整合"><a href="#SpringBoot整合" class="headerlink" title="SpringBoot整合"></a>SpringBoot整合</h1><p>SpringBoot操作数据 : spring-data jpa jdbc mongodb redis !</p><p>SpringData也是和SpringBoot齐名的项目 ! SpringData是对操作数据的整合</p><p>说明:在SpringBoot2.x之后，原来使用的jedis被替换为了lettuce</p><p>jedis : 采用的直连，多个线程操作的话，是不安全的，如果想要避免不安全的，使用jedis pool 连接池!更像BIO 模式</p><p>lettuce : 采用netty ，实例可以再多个线程中进行共享，不存在线程不安全的情况！可以减少线程数量了，更像NIO模式</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis43.png"></p><p>源码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token class-name">RedisOperations</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">RedisProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">LettuceConnectionConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">JedisConnectionConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisAutoConfiguration</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Bean</span> <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"redisTemplate"</span><span class="token punctuation">)</span> <span class="token comment">// 不存在这个bean才生效。也就是说我们可以自己定义一个redisTemplate来替换这个默认的!</span><span class="token annotation punctuation">@ConditionalOnSingleCandidate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> redisConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 默认的RedisTemplate 没有过多的设置，redis 对象都是需要序列化!</span><span class="token comment">// 两个泛型都是object， object 的类型，我们后使用需要强制转换&lt;String， object&gt;</span><span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> template<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token comment">// 由于string是redis中最常使用的类型，所以说单独提出来了一个bean!</span><span class="token annotation punctuation">@ConditionalOnSingleCandidate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">StringRedisTemplate</span> <span class="token function">stringRedisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> redisConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">StringRedisTemplate</span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> template<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>整合测试</p></blockquote><ol><li><p>导入依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--操作redis--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置连接</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># SpringBoot所有的配置类，都有一个 XXXAutoConfiguration 自动配置类    RedisAutoConfiguration</span><span class="token comment"># 自动配置类都会绑定一个xxxProperties配置类,通过这个配置类来绑定配置文件  RedisProperties</span><span class="token comment"># 配置Redis</span><span class="token attr-name">spring.redis.host</span><span class="token punctuation">=</span><span class="token attr-value">192.168.252.128</span><span class="token attr-name">spring.redis.port</span><span class="token punctuation">=</span><span class="token attr-value">6379</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">Redis02SpringbootApplicationTests</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Autowired</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"redisTemplate"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// redisTemplate 操作不同的数据类型，api和我们的指令是一样的</span><span class="token comment">// opsForValue 操作字符串 类似String</span><span class="token comment">// opsForList  操作List 类似List</span><span class="token comment">// 除了基本的操作，我们常用的方法都可以直接通过redisTemplate操作，比如事务，和基本的CRUD</span><span class="token comment">// opsForSet 操作Set</span><span class="token comment">// opsForHash 操作hash</span><span class="token comment">// opsForZSet 操作Zset</span><span class="token comment">// opsForGeo 操作Geo</span><span class="token comment">// opsForHyperLogLog操作HyperLogLog</span><span class="token comment">//除了基本的操作，我们常用的方法都可以直接通过redisTemplate操作，比如事务，和基本的CRUD</span><span class="token comment">//获取redis的连接对象</span><span class="token comment">//RedisConnection connection = redisTemplate.getConnectionFactory().getConnection();</span><span class="token comment">//connection.flushDb();</span><span class="token comment">//connection.flushAll();</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"mykey"</span><span class="token punctuation">,</span><span class="token string">"xhc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"mykey"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis44.png"></p><p>查看，redis数据库。数据库中的数据是转义字符</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis45.png"></p></li></ol><p>查看源码</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis46.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis47.png"></p><p>创建实体类User</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于对象的保存</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis48.png"></p><p>实体类实现序列化</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再次测试</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis49.png"></p><p>自定义RedisTemplete。这是一个固定的模板</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>    <span class="token comment">// 编写我们自己的 redisTemplate</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> redisConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 我们为了自己开发方便 一般直接使用 &lt;String, Object&gt;</span>        <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// json序列化配置</span>        <span class="token class-name">Jackson2JsonRedisSerializer</span> jackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectMapper<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span><span class="token class-name">PropertyAccessor</span><span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> <span class="token class-name">JsonAutoDetect</span><span class="token punctuation">.</span><span class="token class-name">Visibility</span><span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectMapper<span class="token punctuation">.</span><span class="token function">enableDefaultTyping</span><span class="token punctuation">(</span><span class="token class-name">ObjectMapper</span><span class="token punctuation">.</span><span class="token class-name">DefaultTyping</span><span class="token punctuation">.</span>NON_FINAL<span class="token punctuation">)</span><span class="token punctuation">;</span>        jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>objectMapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// String 的序列化</span>        <span class="token class-name">StringRedisSerializer</span> stringRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// key采用String的序列化方式</span>        template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// hash的key采用String的序列化方式</span>        template<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// value序列化方式采用Jackson</span>        template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// hash的value序列化方式采用Jackson</span>        template<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用自定义的RedisTemplete，进行测试。可以发现没有再出现转义字符了</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis50.png"></p><h1 id="Redis-conf-配置文件详解"><a href="#Redis-conf-配置文件详解" class="headerlink" title="Redis.conf 配置文件详解"></a>Redis.conf 配置文件详解</h1><p>启动Redis的时候，就通过配置文件来启动！在工作中，一些小小的配置，可以让你脱颖而出！</p><blockquote><p>单位</p></blockquote><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis51.png"></p><blockquote><p>Redis 不区分大小写</p></blockquote><blockquote><p>可以使用 include 组合多个配置文件</p></blockquote><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis52.png"></p><blockquote><p>网络配置</p></blockquote><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis53.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis54.png"></p><blockquote><p>通用配置</p></blockquote><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis55.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis56.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis57.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis58.png"></p><blockquote><p>快照</p></blockquote><p>持久化，在规定的时间内，执行了多少次操作，则会持久化到 <code>rdb文件</code> 或者 <code>aof文件</code></p><p>Redis 是内存数据库，如果没有持久化，那么数据断电即失！</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis59.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis60.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis61.png"></p><blockquote><p>主从复制 REPLICATION ，在主从复制再进行解释</p></blockquote><blockquote><p>安全 SECURITY</p></blockquote><p>可以在这里设置的redis密码，默认是没有密码的</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span>ping PONG<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> config get requirepass<span class="token comment">#获取 redis的密码</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token string">"requirepass"</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token string">""</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> config <span class="token builtin class-name">set</span> requirepass <span class="token string">"123456"</span>   <span class="token comment">#设置 redis的密码OK</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> config get requirepass<span class="token comment">#发现所有的命令都没有权限了</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> NoAUTH Authentication required<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span>ping（error） NOAUTH Authentication required<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span>auth <span class="token number">123456</span> <span class="token comment">#使用密码进行登录！</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> config get requirepass<span class="token number">1</span><span class="token punctuation">)</span><span class="token string">"requirepass"</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token string">"123456"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>客户端 CLIENTS</p></blockquote><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis62.png"></p><blockquote><p>内存管理 MEMORY MANAGEMENT</p></blockquote><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis63.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis64.png"></p><blockquote><p>APPEND ONLY 模式 aof配置</p></blockquote><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis65.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis66.png"></p><p>具体的配置，我们在Redis持久化中给大家详细的详解！</p><h1 id="Redis-持久化"><a href="#Redis-持久化" class="headerlink" title="Redis 持久化"></a>Redis 持久化</h1><p>Redis是内存数据库，如果不将内存中的数据库状态保存到磁盘，那么一旦Redis服务器进程退出，服务器中的数据库状态也会消失。所以Redis提供了持久化功能！</p><h2 id="RDB-Redis-DataBase"><a href="#RDB-Redis-DataBase" class="headerlink" title="RDB(Redis DataBase)"></a>RDB(Redis DataBase)</h2><blockquote><p>什么是RDB</p></blockquote><p>在主从复制中，rdb是备用在从机上面！</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis83.png"></p><p>在指定的时间间隔内将内存中的数据集快照写入磁盘，也就是行话里讲的 snashot 快照，恢复时是将快照文件直接读到内存中。</p><p>Redis会单独创建(fork)一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何 I/O 操作的。这就确保了极髙的性能。如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。RDB的缺点是最后一次持久化后的数据可能丢失。我们默认的就是RDB，一般情况下不需要修改这个配置。</p><p>有时候在生产环境我们会将这个文件进行备份！</p><p><code>rdb保存的文件是 dump.rdb</code></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis67.png"></p><p><strong>测试</strong></p><ol><li><p>修改配置文件，关于rdb的操作都可以在这里配置</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis68.png"></p></li><li><p>向Redis中插入5个键值对</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis69.png"></p></li><li><p>查看是否生成dump.rdb文件</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis70.png"></p></li><li><p>退出Redis再查看，数据是否存在</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis71.png"></p></li></ol><blockquote><p>触发规则</p></blockquote><ol><li>save的规则满足的情况下，会自动触发rdb</li><li>执行 flushall命令，也会触发我们的rdb</li><li>退出redis，也会产生rdb文件</li></ol><p>备份自动生成一个dump.rdb文件</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis72.png"></p><blockquote><p>如何恢复rdb文件</p></blockquote><ol><li><p>只需要将rdb文件放在我们redis 启动目录中就可以，redis启动的时候会自动检查dump.rdb文件，恢复其中的数据！</p></li><li><p>查看Redis启动目录的位置</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis73.png"></p></li></ol><blockquote><p>到这里可以知道，Redis默认的配置已经够用了，但是我们还是需要去学习！</p></blockquote><p><strong>优点：</strong></p><ul><li>适合大规模的数据恢复</li><li>对数据的完整性要求不高</li></ul><p><strong>缺点：</strong></p><ul><li>需要一定的时间间隔的进程操作！如果redis意外宕机了，这个最后一次修改数据就没有了</li><li>fork进程的时候，会占用一定的内存空间！！</li></ul><h2 id="AOF-Append-Only-File"><a href="#AOF-Append-Only-File" class="headerlink" title="AOF(Append Only File)"></a>AOF(Append Only File)</h2><p>将我们的所有命令都记录下来，恢复的时候就把这个文件全部再执行一遍！</p><blockquote><p>是什么</p></blockquote><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis84.png"></p><p>以曰志的形式来记录每个写操作，将 Redis执行过的所有指令都记录下来（读操作不记录），只许追加文件但不可以改写文件， redis启动之初会读取该文件重新构建数据，换言之， redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作</p><p><code>AOF保存的是appendonly.aof文件</code></p><blockquote><p>APPEND ONLY MODE</p></blockquote><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis74.png"></p><p>默认是不开启的，我们需要手动进行配置！我们只需要将 appendonly改为yes就开启了aof！</p><p>重启Redis就可以生效了</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis75.png"></p><p>向Redis中插入键值对，查看 <code>appendonly.aof 文件</code></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis76.png"></p><p>如果aof文件有错误，这时候redis是启动不起来的。</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis77.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis78.png"></p><p>redis 给我们提供了一个工具 <code>redis-check-aof --fix</code> 用来修复aof文件</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis79.png"></p><p>修复aof文件，其实就是丢弃，错误的内容</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis80.png"></p><p>如果文件正常，重启就可以直接恢复了！</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis81.png"></p><blockquote><p>重写规则</p></blockquote><p>aof默认就是文件的无限追加，文件会越来越大！</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis82.png"></p><p>如果aof文件大于64mb，太大了！fork一个新的进程来将我们的文件进行重写</p><blockquote><p>优点和缺点</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">appendonly no<span class="token comment">#默认是不开启aof模式的，默认是使用rdb方式持久化的，在大部分所有的情况下，rdb完全够用！</span>appendfi1ename <span class="token string">"appendonly.aof"</span><span class="token comment">#持久化的文件的名字</span><span class="token comment"># appendfsync always#每次修改都会sync。消耗性能</span>appendfsync everysec<span class="token comment">#每秒执行一次sync，可能会丢失这1s的数据！</span><span class="token comment"># appendfsync no#不执行sync，这个时候操作系统自己同步数据，速度最快！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优点：</strong></p><ul><li>每一次修改都同步，文件的完整性会更加好！</li><li>每秒同步一次，可能会丢失一秒的数据</li><li>从不同步，效率最高</li></ul><p><strong>缺点：</strong></p><ul><li>相对于数据文件来说，aof远远大于rdb，修复的速度也比rdb慢</li><li>aof运行效率要比rdb慢，所以我们redis默认的配置就是rdb持久化</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>RDB持久化方式能够在指定的时间间隔内对数据进行快照存储</p></li><li><p>AOF持久化方式记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来恢复原始的数据，AOF命令以 Redis协议追加保存每次写的操作到文件末尾， Redis还能对AOF文件进行后台重写，使得AOF文件的体积不至于过大</p></li><li><p>只做缓存，如果你只希望你的数据在服务器运行的时候存在，你也可以不使用任何持久化</p></li><li><p>同时开启两种持久化方式在这种情况下：</p><ul><li>当 redis重启的时候会优先载入AOF文件来恢复原始的数据，因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整。</li><li>RDB的数据不实时，同时使用两者时服务器重启也只会找AOF文件，那要不要只使用AOF呢？作者建议不要，因为RDB更适合用于备份数据库（AOF在不断变化不好备份），快速重启，而且不会有AOF可能潜在的Bug，留着作为一个万一的手段。</li></ul></li><li><p>性能建议</p><ul><li>因为RDB文件只用作后备用途，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次就够了，只保留<code>save 900 1</code>这条规则。</li><li>如果 Enable aof，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只load自己的AOF文件就可以了，代价一是带来了持续的IO，二是 AOF rewrite的最后将 rewrite过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘许可，应该尽量减少 AOF rewrite的频率，AOF重写的基础大小默认值64M太小了，可以设到5G以上，默认超过原大小100%大小重写可以改到适当的数值。</li><li>如果不 Enable aof，仅靠 Master-Slave Replication实现高可用性也可以，能省掉一大笔lO，也减少了 rewrite时带来的系统波动。代价是如果 Master/slave同时倒掉，会丟失十几分钟的数据，启动脚本也要比较两个 Master/ Slave中的RDB文件，载入较新的那个，微博就是这种架构。</li></ul></li></ol><h1 id="Redis-发布订阅"><a href="#Redis-发布订阅" class="headerlink" title="Redis 发布订阅"></a>Redis 发布订阅</h1><p>Redis发布订阅（pub/sub）是一种消息通信模式∶发送者（ρub）发送消息，订阅者（sub）接收消息。微信、微博、关注系统</p><p>Redis客户端可以订阅任意数量的频道。</p><p>订阅发布消息图：</p><p>第一个：消息发送者，第二个：频道，第三个：消息订阅者</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis85.png"></p><p>下图展示了频道 channel1，以及订阅这个频道的三个客户端一— client2、cent5和 client1之间的关系</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis86.png"></p><p>当有新消息通过 PUBLISH命令发送给频道 channe1时，这个消息就会被发送给订阅它的三个客户端</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis87.png"></p><blockquote><p>命令</p></blockquote><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis88.png"></p><blockquote><p>测试</p></blockquote><p>订阅端：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> subscribe xhc<span class="token comment"># 订阅一个频道 xhc</span>Reading messages<span class="token punctuation">..</span>. <span class="token punctuation">(</span>press Ctrl-C to quit<span class="token punctuation">)</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"subscribe"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"xhc"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token comment"># 等待读取推送的消息</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"message"</span><span class="token comment"># 消息</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"xhc"</span><span class="token comment"># 频道名称</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"hello xhc"</span><span class="token comment"># 消息内容</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"message"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"xhc"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"hello redis"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发送端：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> publish xhc <span class="token string">"hello xhc"</span><span class="token comment"># 发布者发布消息到频道</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> publish xhc <span class="token string">"hello redis"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>原理</p></blockquote><p>Redis是使用C实现的，通过分析 Redis源码里的 pubsub.C文件，了解发布和订阅机制的底层实现，籍此加深对 Redis的理解。</p><p>Redis通过 PUBLISH、 SUBSCRIBE和 PSUBSCRIBE等命令实现发布和订阅功能。</p><p>通过 SUBSCRIBE命令订阅某频道后， redis-server里维护了个字典，字典的键就是一个个 频道（channel），而字典的值则是一个链表，链表中保存了所有订阅这个 channel的客户端。 SUBSCRIBE命令的关键，就是将客户端添加到给定 channel的订阅链表中。</p><p>通过 PUBLISH命令向订阅者发送消息， redis-server会使用给定的频道作为键，在它所维护的 channel字典中査找记录了订阅这个频道的所有客户端的链表，遍历这个链表，将消息发布给所有订阅者</p><p>Pub/Sub从字面上理解就是发布（ Publish）与订阅（ Subscribe），在 Redis中，你可以设定对某一个key值进行消息发布及消息订阅，当一个key值上进行了消息发布后，所有订阅它的客户端都会收到相应的消息。这一功能最明显的用法就是用作实时消息系统，比如普通的即时聊天，群聊等功能。</p><p>使用场景：</p><ul><li>实时消息系统</li><li>实时聊天！（频道当做聊天室，将信息回显给所有人即可！）</li><li>订阅，关注系统都是可以的！</li></ul><p>稍微复杂的场景我们就会使用消息中间件 MQ</p><h1 id="Redis-主从复制"><a href="#Redis-主从复制" class="headerlink" title="Redis 主从复制"></a>Redis 主从复制</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>主从复制，是指将一台 Redis服务器的数据，复制到其他的 Redis服务器。前者称为主节点(master/ leader) ，后者称为从节点(slave/ follower)；<code>数据的复制是单向的，只能由主节点到从节点。 Master以写为主，Slave以读为主</code>。</p><p><code>默认情况下，每台 Redis服务器都是主节点；且一个主节点可以有多个从节点（或没有从节点），但一个从节点只能有一个主节点。</code></p><p>主从复制的作用主要包括：</p><ol><li>数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式</li><li>故障恢复：当主节点岀现问题时，可以由从节点提供服务，实现快速的故障恢复；实际上是一种服务的冗余</li><li>负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务（即写 Redis数据时应用连接主节点，读 redis数据时应用连接从节点），分担服务器负载；尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高 Redis服务器的并发量</li><li>高可用（集群）基石：除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是 Redis高可用的基础。</li></ol><p>一般来说，要将 Redis运用于工程项目中，只使用一台 Redis是万万不能的，原因如下</p><ol><li>从结构上，单个Redis服务器会发生单点故障，并且一台服务器需要处理所有的请求负载，压力较大；</li><li>从容量上，单个 Redis服务器内存容量有限，就算一台Redis服务器内存容量为256G，也不能将所有内存用作Redis存储内存，一般来说，单台Redis最大使用内存不应该超过20G</li></ol><p>电商网站上的商品，一般都是一次上传，无数次浏览的，说专业点也就是”多读少写”。</p><p>对于这种场景，我们可以使如下这种架构</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis106.png"></p><p>主从复制，读写分离！80%的情况下都是在进行读操作！减缓服务器的压力！架构中经常使用！</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>只配置从库，不用配置主库！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> info replication<span class="token comment">#查看当前库的信息</span><span class="token comment"># Replication</span>role:master<span class="token comment">#角色 master</span>connected_slaves:0<span class="token comment">#没有从机</span>master_failover_state:no-failovermaster_replid:99879018a425c3c644f6792220c8147000b70c1amaster_replid2:0000000000000000000000000000000000000000master_repl_offset:0second_repl_offset:-1repl_backlog_active:0repl_backlog_size:1048576repl_backlog_first_byte_offset:0repl_backlog_histlen:0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>复制3个配置文件，然后修改对应的信息</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis89.png"></p><ol><li><p>端口号</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis90.png"></p></li><li><p>pid名</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis91.png"></p></li><li><p>log文件名</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis92.png"></p></li><li><p>rdb文件名</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis107.png"></p><p>修改完成之后，启动我们的3个redis服务器，通过进程信息查看！</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis93.png"></p></li></ol><h2 id="一主二从"><a href="#一主二从" class="headerlink" title="一主二从"></a>一主二从</h2><p>架构图：</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis95.png"></p><p>默认情况下，每台 Redis服务器都是主节点。我们一般情况下只用配置从机就好了!</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis94.png"></p><p>一主（6379）二从（6380,6381）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 6380从机配置</span><span class="token number">127.0</span>.0.1:638<span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span> slaveof <span class="token number">127.0</span>.0.1 <span class="token number">6379</span><span class="token comment"># slaveof host 6379 找谁当自己的老大即主机！</span>OK<span class="token number">127.0</span>.0.1:638<span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span> info replication<span class="token comment"># Replication</span>role:slave<span class="token comment"># 当前角色是从机</span>master_host:127.0.0.1<span class="token comment"># 可以看到主机的信息</span>master_port:6379master_link_status:upmaster_last_io_seconds_ago:7master_sync_in_progress:0slave_repl_offset:14slave_priority:100slave_read_only:1connected_slaves:0master_failover_state:no-failovermaster_replid:bc38dc1397b5fb55ca36055851a278d7b4a7b23amaster_replid2:0000000000000000000000000000000000000000master_repl_offset:14second_repl_offset:-1repl_backlog_active:1repl_backlog_size:1048576repl_backlog_first_byte_offset:1repl_backlog_histlen:14<span class="token comment"># 6381从机配置</span><span class="token number">127.0</span>.0.1:638<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> slaveof <span class="token number">127.0</span>.0.1 <span class="token number">6379</span><span class="token comment"># slaveof host 6379 找谁当自己的老大即主机！</span>OK<span class="token number">127.0</span>.0.1:638<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> info replication<span class="token comment"># Replication</span>role:slave<span class="token comment"># 当前角色是从机</span>master_host:127.0.0.1<span class="token comment"># 可以看到主机的信息</span>master_port:6379master_link_status:upmaster_last_io_seconds_ago:2master_sync_in_progress:0slave_repl_offset:252slave_priority:100slave_read_only:1connected_slaves:0master_failover_state:no-failovermaster_replid:bc38dc1397b5fb55ca36055851a278d7b4a7b23amaster_replid2:0000000000000000000000000000000000000000master_repl_offset:252second_repl_offset:-1repl_backlog_active:1repl_backlog_size:1048576repl_backlog_first_byte_offset:239repl_backlog_histlen:14<span class="token comment"># 在主机中查看</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> info replication<span class="token comment"># Replication</span>role:masterconnected_slaves:2<span class="token comment"># 多了从机的配置</span>slave0:ip<span class="token operator">=</span><span class="token number">127.0</span>.0.1,port<span class="token operator">=</span><span class="token number">6380</span>,state<span class="token operator">=</span>online,offset<span class="token operator">=</span><span class="token number">280</span>,lag<span class="token operator">=</span><span class="token number">0</span><span class="token comment"># 从机的信息</span>slave1:ip<span class="token operator">=</span><span class="token number">127.0</span>.0.1,port<span class="token operator">=</span><span class="token number">6381</span>,state<span class="token operator">=</span>online,offset<span class="token operator">=</span><span class="token number">280</span>,lag<span class="token operator">=</span><span class="token number">0</span><span class="token comment"># 从机的信息</span>master_failover_state:no-failovermaster_replid:bc38dc1397b5fb55ca36055851a278d7b4a7b23amaster_replid2:0000000000000000000000000000000000000000master_repl_offset:280second_repl_offset:-1repl_backlog_active:1repl_backlog_size:1048576repl_backlog_first_byte_offset:1repl_backlog_histlen:280<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis96.png"></p><p>真实的从主配置应该在配置文件中配置，这样的话是永久的，我们这里使用的是命令，暂时的</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis97.png"></p><blockquote><p>细节</p></blockquote><p>主机可以写，从机不能写只能读！主机中的所有信息和数据，都会自动被从机保存！</p><p>主机写：</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis98.png"></p><p>从机只能读取内容！</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis99.png"></p><p>当主机关闭了，从机依旧连接到主机的，可以进行读操作。但是没有写操作，这个时候，主机如果回来了，从机依旧可以直接获取到主机写的信息！</p><p>如果是使用命令行，来配置的主从，这个时候如果从机重启了，从机就会变回主机！只要重新变为从机，立马就会从主机中获取值！</p><blockquote><p>复制原理</p></blockquote><p>Slave启动成功连接到 master后会发送一个sync同步命令</p><p>Master接到命令，启动后台的存盘进程，同时收集所有用于修改数据集命令，在后台进程执行完毕之后， <code>master将传送 整个数据文件到slave，并完成一次完全同步</code>。</p><p><code>全量复制：slave服务在接收到数据库文件数据后，将其存盘并加载到内存中</code></p><p><code>增量复制：Master继续将所有新的收集到的修改命令依次传给save，完成同步</code></p><p>但是只要是重新连接 master，一次完全同步（全量复制）将被自动执行！我们的数据一定可以在从机中看到！</p><blockquote><p>层层链路</p></blockquote><p>上一个M链接下一个S！</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis108.png"></p><p>这时候也可以完成我们的主从复制！80会把从79接收的修改命令，发给81，完成同步</p><blockquote><p>如果没有老大了，这个时候能不能选择一个老大出来呢？手动！</p></blockquote><p><code>谋朝篡位</code></p><p>如果主机断开了连接，我们可以使用<code>slaveof no one</code>让自己变成主机！其他的节点就可以手动连接到最新的这个主节点（手动）！如果这个时候老大修复了，那就要重新配置了，此时它是没有从机的</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis100.png"></p><h2 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h2><p>（自动选举老大的模式）</p><blockquote><p>概述</p></blockquote><p>主从切换技术的方法是：当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工干预，费时费力，还会造成短时间内服务不可用。这不是一种推荐的方式，更多时候，我们优先考虑哨兵模式。 Redis从2.8开始正式提供了 Sentinel（哨兵）架构来解决这个问题</p><p>谋朝篡位的自动版，能够后台监控主机是否故暲，<code>如果故障了根据投票数自动将从库转换为主库</code>。</p><p>哨兵模式是一种特殊的模式，首先Redis提供了哨兵的命令，哨兵是—个独立的进程，作为进程，它会独立运行。<strong>其原理是哨兵通过发送命令，等待 Redis服务器响应，从而监控运行的多个 Redis实例的状态。</strong></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis109.png"></p><p>这里的哨兵有两个作用</p><ul><li><p>通过发送命令，让 Redis服务器返回监控其运行状态，包括主服务器和从服务器。</p></li><li><p>当哨兵监测到 master宕机，会自动将 slave切换成 master，然后通过发布订阅模式通知其他的从服务器，修改配置文件，让它们切换主机</p></li></ul><p>然而一个哨兵进程对 Redis服务器进行监控，可能会出现问题，为此，我们可以使用多个哨兵进行监控。各个哨兵之间还会进行监控，这样就形成了多哨兵模式。</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis110.png"></p><p>假设主服务器宕机哨兵1先检测到这个结果，系统并不会马上进行failover【故障转移】过程，仅仅是哨兵1主观的认为主服务器不可用，这个现象成为<strong>主观下线</strong>，当别的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行 failover 【故障转移】操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为<strong>客观下线</strong></p><blockquote><p>测试</p></blockquote><p>我们目前的状态是一主二从！</p><ol><li><p>配置哨兵配置文件 sentinel.conf</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># sentinel monitor 主服务器的名称 host port 1</span>sentinel monitor myredis <span class="token number">127.0</span>.0.1 <span class="token number">6379</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>启动sentinel</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xhc bin<span class="token punctuation">]</span><span class="token comment"># redis-sentinel myconfig/sentinel.conf</span><span class="token number">5366</span>:X <span class="token number">14</span> Apr <span class="token number">2021</span> <span class="token number">14</span>:31:51.861 <span class="token comment"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span><span class="token number">5366</span>:X <span class="token number">14</span> Apr <span class="token number">2021</span> <span class="token number">14</span>:31:51.861 <span class="token comment"># Redis version=6.2.1, bits=64, commit=00000000, modified=0, pid=5366, just started</span><span class="token number">5366</span>:X <span class="token number">14</span> Apr <span class="token number">2021</span> <span class="token number">14</span>:31:51.861 <span class="token comment"># Configuration loaded</span><span class="token number">5366</span>:X <span class="token number">14</span> Apr <span class="token number">2021</span> <span class="token number">14</span>:31:51.862 * Increased maximum number of <span class="token function">open</span> files to <span class="token number">10032</span> <span class="token punctuation">(</span>it was originally <span class="token builtin class-name">set</span> to <span class="token number">1024</span><span class="token punctuation">)</span>.<span class="token number">5366</span>:X <span class="token number">14</span> Apr <span class="token number">2021</span> <span class="token number">14</span>:31:51.862 * monotonic clock: POSIX clock_gettime                _._                                                             _.-`<span class="token variable"><span class="token variable">`</span>__ <span class="token string">''</span>-._                                                   _.-<span class="token variable">`</span></span><span class="token variable"><span class="token variable">`</span>    <span class="token variable">`</span></span><span class="token builtin class-name">.</span>  <span class="token variable"><span class="token variable">`</span>_.  <span class="token string">''</span>-._           Redis <span class="token number">6.2</span>.1 <span class="token punctuation">(</span>00000000/0<span class="token punctuation">)</span> <span class="token number">64</span> bit  .-<span class="token variable">`</span></span><span class="token variable"><span class="token variable">`</span> .-<span class="token variable">`</span></span>`<span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">.</span>  <span class="token variable">`</span></span>`<span class="token variable"><span class="token variable">`</span><span class="token punctuation">\</span>/    _.,_ <span class="token string">''</span>-._                                    <span class="token punctuation">(</span>    '      ,       .-<span class="token variable">`</span></span>  <span class="token operator">|</span> <span class="token variable"><span class="token variable">`</span>,    <span class="token punctuation">)</span>     Running <span class="token keyword">in</span> sentinel mode <span class="token operator">|</span><span class="token variable">`</span></span>-._<span class="token variable"><span class="token variable">`</span>-<span class="token punctuation">..</span>.-<span class="token variable">`</span></span> __<span class="token punctuation">..</span>.-.`<span class="token variable"><span class="token variable">`</span>-._<span class="token operator">|</span>'<span class="token variable">`</span></span> _.-<span class="token string">'|     Port: 26379 |    <span class="token variable"><span class="token variable">`</span>-._   <span class="token variable">`</span></span>._    /     _.-'</span>    <span class="token operator">|</span>     PID: <span class="token number">5366</span>  <span class="token variable"><span class="token variable">`</span>-._    <span class="token variable">`</span></span>-._  <span class="token variable"><span class="token variable">`</span>-./  _.-<span class="token string">'    _.-'</span>                                    <span class="token operator">|</span><span class="token variable">`</span></span>-._<span class="token variable"><span class="token variable">`</span>-._    <span class="token variable">`</span></span>-.__.-<span class="token string">'    _.-'</span>_.-<span class="token string">'|                                   |    <span class="token variable"><span class="token variable">`</span>-._<span class="token variable">`</span></span>-._        _.-'</span>_.-<span class="token string">'    |           http://redis.io          <span class="token variable"><span class="token variable">`</span>-._    <span class="token variable">`</span></span>-._<span class="token variable"><span class="token variable">`</span>-.__.-<span class="token string">'_.-'</span>    _.-'                                    <span class="token operator">|</span><span class="token variable">`</span></span>-._<span class="token variable"><span class="token variable">`</span>-._    <span class="token variable">`</span></span>-.__.-'</span>    _.-<span class="token string">'_.-'</span><span class="token operator">|</span>                                   <span class="token operator">|</span>    <span class="token variable"><span class="token variable">`</span>-._<span class="token variable">`</span></span>-._        _.-<span class="token string">'_.-'</span>    <span class="token operator">|</span>                                    <span class="token variable"><span class="token variable">`</span>-._    <span class="token variable">`</span></span>-._<span class="token variable"><span class="token variable">`</span>-.__.-<span class="token string">'_.-'</span>    _.-'                                         <span class="token variable">`</span></span>-._    <span class="token variable"><span class="token variable">`</span>-.__.-<span class="token string">'    _.-'</span>                                                 <span class="token variable">`</span></span>-._        _.-<span class="token string">'                                                         `-.__.-'</span>                                               <span class="token number">5366</span>:X <span class="token number">14</span> Apr <span class="token number">2021</span> <span class="token number">14</span>:31:52.000 <span class="token comment"># WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span><span class="token number">5366</span>:X <span class="token number">14</span> Apr <span class="token number">2021</span> <span class="token number">14</span>:31:52.001 <span class="token comment"># Sentinel ID is 67fe927aeb18b3f363a121c47758115f37ceef3e</span><span class="token number">5366</span>:X <span class="token number">14</span> Apr <span class="token number">2021</span> <span class="token number">14</span>:31:52.001 <span class="token comment"># +monitor master myredis 127.0.0.1 6379 quorum 1</span><span class="token number">5366</span>:X <span class="token number">14</span> Apr <span class="token number">2021</span> <span class="token number">14</span>:31:52.002 * +slave slave <span class="token number">127.0</span>.0.1:6380 <span class="token number">127.0</span>.0.1 <span class="token number">6380</span> @ myredis <span class="token number">127.0</span>.0.1 <span class="token number">6379</span><span class="token number">5366</span>:X <span class="token number">14</span> Apr <span class="token number">2021</span> <span class="token number">14</span>:31:52.029 * +slave slave <span class="token number">127.0</span>.0.1:6381 <span class="token number">127.0</span>.0.1 <span class="token number">6381</span> @ myredis <span class="token number">127.0</span>.0.1 <span class="token number">6379</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis101.png"></p></li><li><p>关闭主机，查看从机信息</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis102.png"></p></li><li><p>等一会，查看sentinel日志</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis103.png"></p></li><li><p>查看6381的信息</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis104.png"></p></li></ol><p>如果 Master节点断开了，这个时候就会从从机中随机选择一个服务器作为Master！（这里面有一个投票算法！）<strong>如果主机此时回来了，只能归并到新的主机下，当做从机，这就是哨兵模式的规则！</strong></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis105.png"></p><blockquote><p>优缺点</p></blockquote><p>优点：</p><ul><li>哨兵集群，基于主从复制模式，所有的主从配置优点，它全有</li><li>主从可以切换，故障可以转移，系统的可用性就会更好</li><li>哨兵模式就是主从模式的升级，手动到自动，更加健壮！</li></ul><p>缺点：</p><ul><li>Redis不好在线扩容的，集群容量一旦到达上限，在线扩容就十分麻烦</li><li>实现哨兵模式的配置其实是很麻烦的，里面有很多选择！</li></ul><blockquote><p>哨兵模式的全部配置</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Example sentinel.conf</span> <span class="token comment"># 哨兵sentinel实例运行的端口 默认26379</span>port <span class="token number">26379</span> <span class="token comment"># 哨兵sentinel的工作目录</span><span class="token function">dir</span> /tmp <span class="token comment"># 哨兵sentinel监控的redis主节点的 ip port </span><span class="token comment"># master-name  可以自己命名的主节点名字 只能由字母A-z、数字0-9 、这三个字符".-_"组成。</span><span class="token comment"># quorum 当这些quorum个数sentinel哨兵认为master主节点失联 那么这时 客观上认为主节点失联了</span><span class="token comment"># sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;</span>sentinel monitor mymaster <span class="token number">127.0</span>.0.1 <span class="token number">6379</span> <span class="token number">1</span> <span class="token comment"># 当在Redis实例中开启了requirepass foobared 授权密码 这样所有连接Redis实例的客户端都要提供密码</span><span class="token comment"># 设置哨兵sentinel 连接主从的密码 注意必须为主从设置一样的验证密码</span><span class="token comment"># sentinel auth-pass &lt;master-name&gt; &lt;password&gt;</span>sentinel auth-pass mymaster MySUPER--secret-0123passw0rd  <span class="token comment"># 指定多少毫秒之后 主节点没有应答哨兵sentinel 此时 哨兵主观上认为主节点下线 默认30秒</span><span class="token comment"># sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt;</span>sentinel down-after-milliseconds mymaster <span class="token number">30000</span> <span class="token comment"># 这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master进行 同步，</span>这个数字越小，完成failover所需的时间就越长，但是如果这个数字越大，就意味着越 多的slave因为replication而不可用。可以通过将这个值设为 <span class="token number">1</span> 来保证每次只有一个slave 处于不能处理命令请求的状态。<span class="token comment"># sentinel parallel-syncs &lt;master-name&gt; &lt;numslaves&gt;</span>sentinel parallel-syncs mymaster <span class="token number">1</span>   <span class="token comment"># 故障转移的超时时间 failover-timeout 可以用在以下这些方面： </span><span class="token comment">#1. 同一个sentinel对同一个master两次failover之间的间隔时间。</span><span class="token comment">#2. 当一个slave从一个错误的master那里同步数据开始计算时间。直到slave被纠正为向正确的master那里同步数据时。</span><span class="token comment">#3.当想要取消一个正在进行的failover所需要的时间。  </span><span class="token comment">#4.当进行failover时，配置所有slaves指向新的master所需的最大时间。不过，即使过了这个超时，slaves依然会被正确配置为指向master，但是就不按parallel-syncs所配置的规则来了</span><span class="token comment"># 默认三分钟</span><span class="token comment"># sentinel failover-timeout &lt;master-name&gt; &lt;milliseconds&gt;</span>sentinel failover-timeout mymaster <span class="token number">180000</span> <span class="token comment"># SCRIPTS EXECUTION</span> <span class="token comment">#配置当某一事件发生时所需要执行的脚本，可以通过脚本来通知管理员，例如当系统运行不正常时发邮件通知相关人员。</span><span class="token comment">#对于脚本的运行结果有以下规则：</span><span class="token comment">#若脚本执行后返回1，那么该脚本稍后将会被再次执行，重复次数目前默认为10</span><span class="token comment">#若脚本执行后返回2，或者比2更高的一个返回值，脚本将不会重复执行。</span><span class="token comment">#如果脚本在执行过程中由于收到系统中断信号被终止了，则同返回值为1时的行为相同。</span><span class="token comment">#一个脚本的最大执行时间为60s，如果超过这个时间，脚本将会被一个SIGKILL信号终止，之后重新执行。</span> <span class="token comment">#通知型脚本:当sentinel有任何警告级别的事件发生时（比如说redis实例的主观失效和客观失效等等），将会去调用这个脚本，</span><span class="token comment">#这时这个脚本应该通过邮件，SMS等方式去通知系统管理员关于系统不正常运行的信息。调用该脚本时，将传给脚本两个参数，</span><span class="token comment">#一个是事件的类型，</span><span class="token comment">#一个是事件的描述。</span><span class="token comment">#如果sentinel.conf配置文件中配置了这个脚本路径，那么必须保证这个脚本存在于这个路径，并且是可执行的，否则sentinel无法正常启动成功。</span><span class="token comment">#通知脚本</span><span class="token comment"># sentinel notification-script &lt;master-name&gt; &lt;script-path&gt;</span>  sentinel notification-script mymaster /var/redis/notify.sh <span class="token comment"># 客户端重新配置主节点参数脚本</span><span class="token comment"># 当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端关于master地址已经发生改变的信息。</span><span class="token comment"># 以下参数将会在调用脚本时传给脚本:</span><span class="token comment"># &lt;master-name&gt; &lt;role&gt; &lt;state&gt; &lt;from-ip&gt; &lt;from-port&gt; &lt;to-ip&gt; &lt;to-port&gt;</span><span class="token comment"># 目前&lt;state&gt;总是“failover”,</span><span class="token comment"># &lt;role&gt;是“leader”或者“observer”中的一个。 </span><span class="token comment"># 参数 from-ip, from-port, to-ip, to-port是用来和旧的master和新的master(即旧的slave)通信的</span><span class="token comment"># 这个脚本应该是通用的，能被多次调用，不是针对性的。</span><span class="token comment"># sentinel client-reconfig-script &lt;master-name&gt; &lt;script-path&gt;</span>sentinel client-reconfig-script mymaster /var/redis/reconfig.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Redis-缓存穿透和雪崩（面试高频，工作常用）"><a href="#Redis-缓存穿透和雪崩（面试高频，工作常用）" class="headerlink" title="Redis 缓存穿透和雪崩（面试高频，工作常用）"></a>Redis 缓存穿透和雪崩（面试高频，工作常用）</h1><blockquote><p>服务的高可用问题</p></blockquote><p>Redis缓存的使用，极大的提升了应用程序的性能和效率，特别是数据査询方面。但同时也带来了一些问题。其中，最要害的问题就是数据的一致性问题，从严格意义上讲，这个问题无解。如果对数据的一致性要求很高，那么就不能使用缓存。</p><p>另外的一些典型问题就是，缓存穿透、缓存雪崩和缓存击穿。目前，业界也都有比较流行的解决方案。</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis111.png"></p><h2 id="缓存穿透（查不到）"><a href="#缓存穿透（查不到）" class="headerlink" title="缓存穿透（查不到）"></a>缓存穿透（查不到）</h2><blockquote><p>概念</p></blockquote><p>缓存穿透的概念很简单，用户想要査询一个数据，发现 redis内存数据库没有，也就是缓存没有命中，于是冋持久层数据库査询。发现也没有，于是本次查询失败。当用户很多的时候，缓存都没有命中（比如：秒杀场景！），于是都去请求了持久层数据库。这会给持久层数据库造成很大的压力，这时候就出现了缓存穿透。</p><blockquote><p>解决方案</p></blockquote><p><strong>布隆过滤器</strong></p><p> 布隆过滤器是一种数据结构，对所有可能査询的参数以hash形式存储，客户端请求先在控制层先进行校验，不符合则丟弃，从而避免了对底层存储系统的查询压力</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis112.png"></p><p><strong>绶存空对象</strong></p><p>当存储层不命中后，及时返回的空对象也将其缓存起来，同时会设置一个过期时间，之后再访问这个数据将会从缓存中获取，保护了后端数据源；</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis113.png"></p><p>但是这种方法会存在两个问题</p><ol><li>如果空值能够被缓存起来，这就意味着缓存需要更多的空间存储更多的键，因为这当中可能会有很多的空值的键</li><li>即使对空值设置了过期时间，还是会存在缓存层和存储层的数据会有一段时间窗口的不一致，这对于需要保持一致性的业务会有影响</li></ol><h2 id="缓存击穿（查太多了）"><a href="#缓存击穿（查太多了）" class="headerlink" title="缓存击穿（查太多了）"></a>缓存击穿（查太多了）</h2><blockquote><p>概述</p></blockquote><p>这里需要注意和缓存穿透的区别，缓存击穿，是指一个key非常热门，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个key在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，就像在一个屏障上凿开了一个洞。</p><p>当某个key在过期的瞬间，有大量的请求并发访问，这类数据一般是热点数据，由于缓存过期，会同时访问数据库来查询最新数据，并且回写缓存，会导使数据库瞬间压力过大</p><blockquote><p>解决方案</p></blockquote><ol><li><p><strong>设置热点数据永不过期</strong></p><p>从缓存层面来看，没有设置过期时间，所以不会出现热点key过期后产生的问题。</p></li><li><p><strong>加互斥锁</strong></p><p>分布式锁：使用分布式锁，保证对于每个key同时只有—个线程去査询后端服务，其他线程没有获得分布式锁的权限，因此只需要等待即可。这种方式将高并发的压力转移到了分布式锁，因此对分布式锁的考验很大。</p></li></ol><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><blockquote><p>概念</p></blockquote><p>缓存雪崩，是指在某一个时间段，缓存集中过期失效。Redis宕机！</p><p>产生雪崩的原因之一，比如，马上就要到双十二零点，很快就会迎来一波抢购，这波商品时间比较集中的放入了缓存，假设缓存—个小时。那么到了凌晨一点钟的时候，这批商品的缓存就都过期了。而对这批商品的访问査询，都落到了数据库上，对于数据库而言，就会产生周期性的压力波峰。于是所有的请求都会达到存储层，存储层的调用量会暴增，造成存储层也会挂掉的情况。</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/redis/redis114.png"></p><p>其实集中过期，倒不是非常致命，比较致命的缓存雪崩，是缓存服务器某个节点宕机或断网。因为自然形成的缓存雪崩，一定是在某个时间段集中创建缓存，这个时候，数据库也是可以顶住压力的。无非就是对数据库产生周期性的压力而已。而缓存服务节点的宕机，对数据库服务器造成的压力是不可预知的，很有可能瞬间就把数据库压垮。</p><blockquote><p>解决方案</p></blockquote><p><strong>redis高可用</strong></p><p>这个思想的含义是，既然 redis有可能挂掉，那我多增设几台 redis，这样一台挂掉之后其他的还可以继续工作，其实就是搭建的集群。</p><p><strong>限流降级</strong></p><p>这个解决方案的思想是，在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个key只允许一个线程查询数据和写缓存，其他线程等待。</p><p><strong>数据预热</strong></p><p>数据加热的含义就是在正式部署之前，我先把可能的数据先预先访问一遍，这样部分可能大量访问的数据就会加载到缓存中。在即将发生大并发访问前手动触发加载缓存不同的key，设置不同的过期时间，让缓存失效的时间点尽量均匀</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本次学习是从狂神的Redis教程视频中进行的，感谢狂神的分享。&lt;a href=&quot;https://www.bilibili.com/video</summary>
      
    
    
    
    <category term="笔记" scheme="http://mjean.life/categories/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Redis" scheme="http://mjean.life/categories/%E7%AC%94%E8%AE%B0/Redis/"/>
    
    
    <category term="Redis" scheme="http://mjean.life/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud笔记：Seata-分布式事务处理</title>
    <link href="http://mjean.life/posts/62090af6.html"/>
    <id>http://mjean.life/posts/62090af6.html</id>
    <published>2021-04-07T02:28:04.000Z</published>
    <updated>2022-04-18T12:48:45.803Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Seata"><a href="#Seata" class="headerlink" title="Seata"></a>Seata</h1><h2 id="分布式事务的问题"><a href="#分布式事务的问题" class="headerlink" title="分布式事务的问题"></a>分布式事务的问题</h2><blockquote><ul><li><p>在分布式之前</p><p>是一台电脑上包含所有的东西 —— 所有的数据、程序所有的内容 ……</p></li><li><p>慢慢向分布式演变</p><p>从 1 对 1 （一个程序对应一个数据库）</p><p>到 1 对 N （分库，一个程序对应多个数据库）</p><p>再 N 对 N （分布式微服务，多个微服务对应多个数据库）</p></li><li><p>分布式之后<br>举例： ​用户购买商品的业务逻辑。整个业务逻辑由3个微服务提供支持；</p><p>仓储服务：对给定的商品扣除仓储数量。</p><p>​订单服务：根据采购需求创建订单。</p><p>​账户服务：从用户账户中扣除余额。</p></li></ul><p>架构图：</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/seata/seata8.png"></p><ul><li>单体应用被拆分成微服务应用，原来的三个模块被拆分成三个独立的应用，分别使用三个独立的数据源，业务操作需要调用三个服务来完成。</li><li>此时每个服务内部的数据一致性由本地事务来保证，但是<strong>全局的数据一致性问题没法保证</strong>。</li></ul></blockquote><p><strong>一次业务操作需要跨多个数据源或需要跨多个系统进行远程调用，就会产生分布式事务问题</strong></p><h2 id="Seata简介"><a href="#Seata简介" class="headerlink" title="Seata简介"></a>Seata简介</h2><blockquote><p>Seate 处理分布式事务。</p><p>官网：  <a href="http://seata.io/zh-cn/">http://seata.io/zh-cn/</a> </p><p>Seata 是一款开源的分布式事务解决方案，致力于在微服务架构下提供高性能和简单易用的分布式事务服务。</p><p>微服务模块，连接多个数据库，多个数据源，而数据库之间的数据一致性需要被保证。</p></blockquote><p>Seata术语： <strong>一个 ID + 三个组件</strong></p><blockquote><ul><li>Transaction ID XID ：全局唯一的事务ID</li><li>Transaction Coordinator(TC) ：事务协调器，维护全局事务的运行状态，负责协调并驱动全局事务的提交或回滚;</li><li>Transaction Manager™ ：控制全局事务的边界，负责开启一个全局事务，并最终发起全局提交或全局回滚的决议;</li><li>Resource Manager(RM) ：控制分支事务，负责分支注册，状态汇报，并接收事务协调器的指令，驱动分支（本地）事务的提交和回滚</li></ul></blockquote><p>分布式事务处理过程</p><blockquote><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/seata/seata9.png"></p><ol><li>TM向TC申请开启一个全局事务，全局事务创建成功并生成一个全局唯一的XID</li><li>XID在微服务调用链路的上下文中传播</li><li>RM向TC注册分支事务，将其纳入XID对应全局事务的管辖</li><li>TM向TC发起针对XID的全局提交或回滚决议</li><li>TC调度XID下管辖的全部分支事务完成提交或回滚请求。</li></ol></blockquote><h2 id="Seata-Server下载安装"><a href="#Seata-Server下载安装" class="headerlink" title="Seata-Server下载安装"></a>Seata-Server下载安装</h2><blockquote><p>下载地址 ： <a href="https://github.com/seata/seata/releases/download/v1.0.0/seata-server-1.0.0.zip">https://github.com/seata/seata/releases/download/v1.0.0/seata-server-1.0.0.zip</a></p></blockquote><h2 id="初始化操作"><a href="#初始化操作" class="headerlink" title="初始化操作"></a>初始化操作</h2><ol><li>修改 conf/file.conf 文件：</li></ol><blockquote><p>主要修改自定义事务组名称 + 事务日志存储模式为db + 数据库连接信息</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/seata/seata10.png"></p></blockquote><ol start="2"><li><p>创建名和 file.conf 指定一致的数据库。</p></li><li><p>在新建的数据库里面创建数据表，db_store.sql文件在 conf 目录下（1.0.0有坑，没有sql文件，下载0.9.0的，使用它的sql文件即可）</p></li><li><p>修改 conf/registry.conf 文件内容：</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/seata/seata11.png"></p></li><li><p>先启动 nacos Server 服务，再启动seata Server 。</p></li></ol><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="数据库环境搭建"><a href="#数据库环境搭建" class="headerlink" title="数据库环境搭建"></a>数据库环境搭建</h3><blockquote><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/seata/seata12.png"></p><p>这里我们会创建三个服务 —— 一个订单服务，一个库存服务，一个账户服务。</p><ul><li>当用户下单时，会在订单服务中创建一个订单，然后通过远程调用库存服务来扣减下单商品的库存，</li><li>再通过远程调用账户服务来扣减用户账户里面的余额，</li><li>最后在订单服务中修改订单状态为已完成。</li></ul><p>该操作跨越三个数据库，有两次远程调用，很明显会有分布式事务问题。</p></blockquote><ol><li><p>启动 Nacos 、Seata</p></li><li><p>创建业务数据库</p><p><strong>seata_order</strong>: 存储订单的数据库</p><p><strong>seata_storage</strong>:存储库存的数据库</p><p><strong>seata_account</strong>: 存储账户信息的数据库</p><p>建表SQL ：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE DATABASE seata_order;CREATE DATABASE seata_storage;CREATE DATABASE seata_account;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/seata/seata13.png"></p></li><li><p>seata_order 库下建 t_order 表</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE t_order(    `id` BIGINT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,    `user_id` BIGINT(11) DEFAULT NULL COMMENT '用户id',    `product_id` BIGINT(11) DEFAULT NULL COMMENT '产品id',    `count` INT(11) DEFAULT NULL COMMENT '数量',    `money` DECIMAL(11,0) DEFAULT NULL COMMENT '金额',    `status` INT(1) DEFAULT NULL COMMENT '订单状态：0：创建中; 1：已完结') ENGINE=INNODB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8; SELECT * FROM t_order;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>seata_storage 库下建 t_storage 表</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE t_storage(    `id` BIGINT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,    `product_id` BIGINT(11) DEFAULT NULL COMMENT '产品id',    `total` INT(11) DEFAULT NULL COMMENT '总库存',    `used` INT(11) DEFAULT NULL COMMENT '已用库存',    `residue` INT(11) DEFAULT NULL COMMENT '剩余库存') ENGINE=INNODB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8; INSERT INTO seata_storage.t_storage(`id`,`product_id`,`total`,`used`,`residue`)VALUES('1','1','100','0','100'); SELECT * FROM t_storage;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>seata_account 库下建 t_account 表</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE t_account(    `id` BIGINT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT 'id',    `user_id` BIGINT(11) DEFAULT NULL COMMENT '用户id',    `total` DECIMAL(10,0) DEFAULT NULL COMMENT '总额度',    `used` DECIMAL(10,0) DEFAULT NULL COMMENT '已用余额',    `residue` DECIMAL(10,0) DEFAULT '0' COMMENT '剩余可用额度') ENGINE=INNODB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8; INSERT INTO seata_account.t_account(`id`,`user_id`,`total`,`used`,`residue`) VALUES('1','1','1000','0','1000')SELECT * FROM t_account;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>建立回滚日志表</p><p>找到 Seata中回滚日志建表 SQL 脚本 ：\seata\conf\db_undo_log.sql</p><p>三个数据库都需要执行该脚本</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE `undo_log` (  `id` bigint(20) NOT NULL AUTO_INCREMENT,  `branch_id` bigint(20) NOT NULL,  `xid` varchar(100) NOT NULL,  `context` varchar(128) NOT NULL,  `rollback_info` longblob NOT NULL,  `log_status` int(11) NOT NULL,  `log_created` datetime NOT NULL,  `log_modified` datetime NOT NULL,  `ext` varchar(100) DEFAULT NULL,  PRIMARY KEY (`id`),  UNIQUE KEY `ux_undo_log` (`xid`,`branch_id`)) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终效果：</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/seata/seata14.png"></p></li></ol><h3 id="代码环境搭建"><a href="#代码环境搭建" class="headerlink" title="代码环境搭建"></a>代码环境搭建</h3><blockquote><p>实现 下订单-&gt; 减库存 -&gt; 扣余额 -&gt; 改（订单）状态</p><p>需要注意的是，下面做了 seata 与 mybatis 的整合，所以注意一下，和以往的mybatis的使用不太一样。</p></blockquote><h4 id="订单模块"><a href="#订单模块" class="headerlink" title="订单模块"></a>订单模块</h4><p>新建模块 seata-order-service2001 ：</p><p>pom依赖：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>   <span class="token comment">&lt;!-- seata --&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>seata-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>seata-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>   <span class="token comment">&lt;!-- springcloud alibaba nacos 依赖,Nacos Server 服务注册中心 --&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>   <span class="token comment">&lt;!-- open feign 服务调用 --&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>   <span class="token comment">&lt;!-- springboot整合Web组件 --&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>   <span class="token comment">&lt;!-- 持久层支持 --&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.1.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>   <span class="token comment">&lt;!--mysql-connector-java--&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>   <span class="token comment">&lt;!--jdbc--&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>   <span class="token comment">&lt;!-- mybatis --&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>   <span class="token comment">&lt;!-- 日常通用jar包 --&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.xhc.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>yml配置：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">2001</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> seata<span class="token punctuation">-</span>order<span class="token punctuation">-</span>service  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">alibaba</span><span class="token punctuation">:</span>      <span class="token key atrule">seata</span><span class="token punctuation">:</span>        <span class="token comment">#自定义事务组名称需要与seata-server中的对应</span>        <span class="token key atrule">tx-service-group</span><span class="token punctuation">:</span> xhc_group    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/seata_order    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span><span class="token comment"># 注意，这是自定义的，原来的是mapper_locations</span><span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">mapperLocations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mapper/<span class="token important">*.xml</span><span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">level</span><span class="token punctuation">:</span>    <span class="token key atrule">io</span><span class="token punctuation">:</span>      <span class="token key atrule">seata</span><span class="token punctuation">:</span> info<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在resource目录下新建 file.conf文件：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">service {  #transaction service group mapping  vgroup_mapping.xhc_group = "default"  #only support when registry.type=file, please don't set multiple addresses  default.grouplist = "127.0.0.1:8091"  #disable seata  disableGlobalTransaction = false}## transaction log store, only used in seata-serverstore {  ## store mode: file、db  mode = "db"  ## file store property  file {    ## store location dir    dir = "sessionStore"  }  ## database store property  db {    ## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp) etc.    datasource = "dbcp"    ## mysql/oracle/h2/oceanbase etc.    db-type = "mysql"    driver-class-name = "com.mysql.jdbc.Driver"    url = "jdbc:mysql://127.0.0.1:3306/seata"    user = "root"    password = "123456"  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在resource目录下新建 registry.conf文件：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">registry {  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa  type = "nacos"  nacos {    serverAddr = "localhost:8848"    namespace = ""    cluster = "default"  }  eureka {    serviceUrl = "http://localhost:8761/eureka"    application = "default"    weight = "1"  }  redis {    serverAddr = "localhost:6379"    db = "0"  }  zk {    cluster = "default"    serverAddr = "127.0.0.1:2181"    session.timeout = 6000    connect.timeout = 2000  }  consul {    cluster = "default"    serverAddr = "127.0.0.1:8500"  }  etcd3 {    cluster = "default"    serverAddr = "http://localhost:2379"  }  sofa {    serverAddr = "127.0.0.1:9603"    application = "default"    region = "DEFAULT_ZONE"    datacenter = "DefaultDataCenter"    cluster = "default"    group = "SEATA_GROUP"    addressWaitTime = "3000"  }  file {    name = "file.conf"  }}config {  # file、nacos 、apollo、zk、consul、etcd3  type = "file"  nacos {    serverAddr = "localhost"    namespace = ""  }  consul {    serverAddr = "127.0.0.1:8500"  }  apollo {    app.id = "seata-server"    apollo.meta = "http://192.168.1.204:8801"  }  zk {    serverAddr = "127.0.0.1:2181"    session.timeout = 6000    connect.timeout = 2000  }  etcd3 {    serverAddr = "http://localhost:2379"  }  file {    name = "file.conf"  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建 domain 实体类 ： Order 和 CommonResult<t> 两个实体类</t></p><ul><li><p>CommonResult</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonResult</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">T</span> data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">,</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span>message<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Order</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> userId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> productId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> count<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> money<span class="token punctuation">;</span>    <span class="token comment">//订单状态，0：创建中；1:已完结</span>    <span class="token keyword">private</span>  <span class="token class-name">Integer</span> status<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>dao层 :</p><ul><li><p>OrderDao</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderDao</span> <span class="token punctuation">{</span>    <span class="token comment">//1 新建订单</span>    <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2 修改订单状态 从0改为1</span>    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">)</span><span class="token class-name">Long</span> userId<span class="token punctuation">,</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"status"</span><span class="token punctuation">)</span><span class="token class-name">Integer</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>OrderMapper.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.xhc.springcloud.alibaba.dao.OrderDao<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.xhc.springcloud.alibaba.domain.Order<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BIGINT<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userId<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BIGINT<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>product_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>productId<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BIGINT<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>count<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>count<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>money<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>money<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DECIMAL<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>status<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>status<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>create<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        insert into t_order(id,user_id,product_id,count,money,status)        values(null,#{userId},#{productId},#{count},#{money},0);    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>update<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        update t_order set status = 1        where user_id=#{userId} and status = #{status};    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>Service接口及实现类：</p><ul><li><p>OrderService</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Long</span> userId<span class="token punctuation">,</span> <span class="token class-name">Integer</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>StorageService</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"seata-storage-service"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StorageService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/storage/decrease"</span><span class="token punctuation">)</span>    <span class="token class-name">CommonResult</span> <span class="token function">decrease</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"productId"</span><span class="token punctuation">)</span><span class="token class-name">Long</span> productId<span class="token punctuation">,</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">)</span><span class="token class-name">Integer</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>AccountService</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"seata-account-service"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/account/decrease"</span><span class="token punctuation">)</span>    <span class="token class-name">CommonResult</span> <span class="token function">decrease</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">)</span><span class="token class-name">Long</span> userId<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"money"</span><span class="token punctuation">)</span> <span class="token class-name">BigDecimal</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>OrderServiceImpl</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">OrderDao</span> orderDao<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">StorageService</span> storageService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">AccountService</span> accountService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@GlobalTransactional</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"fsp-create-order"</span><span class="token punctuation">,</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"------&gt;开始创建订单"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 1 新建订单</span>        orderDao<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"-------&gt;订单微服务开始调用库存，做扣减count"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2 扣减库存</span>        storageService<span class="token punctuation">.</span><span class="token function">decrease</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getProductId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>order<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"-------&gt;订单微服务开始调用库存，做扣减end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"-------&gt;订单微服务开始调用账户，做扣减money"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 3 扣减账户</span>        accountService<span class="token punctuation">.</span><span class="token function">decrease</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>order<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"-------&gt;订单微服务开始调用账户，做扣减end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4 修改订单的状态 从 0 到 1 ，1代表已经完成</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"------&gt;修改订单状态开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderDao<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"------&gt;修改订单状态结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"------&gt;下订单结束了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Long</span> userId<span class="token punctuation">,</span> <span class="token class-name">Integer</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意，红框标记的是通过 open-feign 远程调用微服务的service</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/seata/seata15.png"></p></blockquote></li></ul><p>Controller:OrderController</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">OrderService</span> orderService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/order/create"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span><span class="token punctuation">{</span>        orderService<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"订单创建成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置数据源，替换掉 SpringBoot 默认的，换上 Seata 的</p><p>config （特殊点）:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//下面是两个配置类，这个是和mybatis整合需要的配置</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"com.xhc.springcloud.alibaba.dao"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//这个是配置使用 seata 管理数据源，所以必须配置</span><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xhc<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span></span><span class="token class-name">DruidDataSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>seata<span class="token punctuation">.</span>rm<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span></span><span class="token class-name">DataSourceProxy</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">SqlSessionFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span></span><span class="token class-name">SqlSessionFactoryBean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span></span><span class="token class-name">SpringManagedTransactionFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">PathMatchingResourcePatternResolver</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DataSource</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceProxyConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${mybatis.mapperLocations}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> mapperLocations<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">druidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">DataSourceProxy</span> <span class="token function">dataSourceProxy</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceProxy</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">SqlSessionFactory</span> <span class="token function">sqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token class-name">DataSourceProxy</span> dataSourceProxy<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>        <span class="token class-name">SqlSessionFactoryBean</span> sqlSessionFactoryBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSessionFactoryBean<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSourceProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSessionFactoryBean<span class="token punctuation">.</span><span class="token function">setMapperLocations</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PathMatchingResourcePatternResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span>mapperLocations<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSessionFactoryBean<span class="token punctuation">.</span><span class="token function">setTransactionFactory</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SpringManagedTransactionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sqlSessionFactoryBean<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主启动类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//这里必须排除数据源自动配置，因为写了配置类，让 seata 管理数据源</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token annotation punctuation">@EnableFeignClients</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token punctuation">(</span>exclude <span class="token operator">=</span> <span class="token class-name">DataSourceAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token comment">//取消数据源的自动创建</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SeataOrderMainApp2001</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SeataOrderMainApp2001</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先启动 nacos  –&gt;再启动 seata –&gt; 再启动此order服务，测试，可以启动。</p><p>仿照上面 创建  seata-storage-service2002 和  seata-account-service2003 两个模块，唯一大的区别就是这两个不需要导入 open-feign 远程调用其它模块。</p><h4 id="库存模块"><a href="#库存模块" class="headerlink" title="库存模块"></a>库存模块</h4><p>pom依赖、yml文件及file.conf、registry.conf文件和2001的基本一致</p><p>创建 domain 实体类 ： Storage和 CommonResult<t> 两个实体类</t></p><ul><li><p>CommonResult</p><p>和2001模块的一样</p></li><li><p>Storage</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Storage</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> productId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> total<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> used<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> residue<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>dao层 :</p><ul><li><p>StorageDao</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StorageDao</span> <span class="token punctuation">{</span>    <span class="token comment">//扣减库存</span>    <span class="token keyword">void</span> <span class="token function">decrease</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"productId"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> productId<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>StorageMapper.xnl</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.xhc.springcloud.alibaba.dao.StorageDao<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.xhc.springcloud.alibaba.domain.Storage<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BIGINT<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>product_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>productId<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BIGINT<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>total<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>total<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>used<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>used<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>residue<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>residue<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>decrease<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        UPDATE            t_storage        SET            used = used + #{count},residue = residue - #{count}        WHERE            product_id = #{productId}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>Service接口及实现类：</p><ul><li><p>StorageService</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StorageService</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">decrease</span><span class="token punctuation">(</span><span class="token class-name">Long</span> productId<span class="token punctuation">,</span><span class="token class-name">Integer</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>StorageServiceImpl</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StorageServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">StorageService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> LOGGER <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">StorageServiceImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">StorageDao</span> storageDao<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decrease</span><span class="token punctuation">(</span><span class="token class-name">Long</span> productId<span class="token punctuation">,</span> <span class="token class-name">Integer</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"---------&gt;storage-service中扣减库存开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        storageDao<span class="token punctuation">.</span><span class="token function">decrease</span><span class="token punctuation">(</span>productId<span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"---------&gt;storage-service中扣减库存结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>Controller:StorageController</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StorageController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">StorageService</span> storageService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/storage/decrease"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">decrease</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"productId"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> productId<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> count<span class="token punctuation">)</span><span class="token punctuation">{</span>        storageService<span class="token punctuation">.</span><span class="token function">decrease</span><span class="token punctuation">(</span>productId<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"成功减扣库存---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据源配置改用Seata的，和2001模块一样</p><p>主启动类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token punctuation">(</span>exclude <span class="token operator">=</span> <span class="token class-name">DataSourceAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token annotation punctuation">@EnableFeignClients</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SeataStorageServiceApplication2002</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SeataStorageServiceApplication2002</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动测试，完毕！</p><h4 id="账户模块"><a href="#账户模块" class="headerlink" title="账户模块"></a>账户模块</h4><p>pom依赖、yml文件及file.conf、registry.conf文件和2001的基本一致</p><p>创建 domain 实体类 ： Account 和 CommonResult<t> 两个实体类</t></p><ul><li><p>CommonResult</p><p>和2001模块的一样</p></li><li><p>Account</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> userId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> total<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> used<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> residue<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>dao层 :</p><ul><li><p>AccountDao</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountDao</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">decrease</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">)</span><span class="token class-name">Long</span> userId<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"money"</span><span class="token punctuation">)</span><span class="token class-name">BigDecimal</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>AccountMapper.xnl</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.xhc.springcloud.alibaba.dao.AccountDao<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.xhc.springcloud.alibaba.domain.Account<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BIGINT<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userId<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BIGINT<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>total<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>total<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DECIMAL<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>used<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>used<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DECIMAL<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>residue<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>residue<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DECIMAL<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>decrease<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        UPDATE t_account        SET            residue = residue - #{money},used = used + #{money}        WHERE            user_id = #{userId};    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>Service接口及实现类：</p><ul><li><p>AccountService</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountService</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">decrease</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">)</span><span class="token class-name">Long</span> userId<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"money"</span><span class="token punctuation">)</span><span class="token class-name">BigDecimal</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>AccountServiceImpl</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">AccountService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> LOGGER <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">AccountServiceImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token class-name">AccountDao</span> accountDao<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decrease</span><span class="token punctuation">(</span><span class="token class-name">Long</span> userId<span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span> money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"--------&gt;account-service中扣减账户余额开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        accountDao<span class="token punctuation">.</span><span class="token function">decrease</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>        LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"--------&gt;account-service中扣减账户余额结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>Controller:AccountController</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token class-name">AccountService</span> accountService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/account/decrease"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">decrease</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">)</span><span class="token class-name">Long</span> userId<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"money"</span><span class="token punctuation">)</span><span class="token class-name">BigDecimal</span> money<span class="token punctuation">)</span><span class="token punctuation">{</span>        accountService<span class="token punctuation">.</span><span class="token function">decrease</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"扣减账户余额成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据源配置改用Seata的，和2001模块一样</p><p>主启动类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token punctuation">(</span>exclude <span class="token operator">=</span> <span class="token class-name">DataSourceAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token annotation punctuation">@EnableFeignClients</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SeataAccountMainApp2003</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SeataAccountMainApp2003</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动测试，完毕！</p><h3 id="整合Seata测试"><a href="#整合Seata测试" class="headerlink" title="整合Seata测试"></a>整合Seata测试</h3><blockquote><p>上面已经把环境都搭建完成了，下面就是整合 Seata 进行测试使用了</p><p>下面的测试都是针对 2001 模块的</p></blockquote><ol><li><p>成功执行的测试</p><p>访问：<a href="http://localhost:2001/order/create?userId=1&amp;productId=1&amp;count=10&amp;money=100">http://localhost:2001/order/create?userId=1&amp;productId=1&amp;count=10&amp;money=100</a></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/seata/seata1.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/seata/seata2.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/seata/seata3.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/seata/seata4.png"></p></li><li><p>模拟异常</p><p>在AccountServiceImpl中加上如下代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//模拟超时异常，全局事务回滚</span>        <span class="token comment">//暂停几秒钟线程</span>       <span class="token keyword">try</span> <span class="token punctuation">{</span>           <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重启2003项目</p><p>访问：<a href="http://localhost:2001/order/create?userId=1&amp;productId=1&amp;count=10&amp;money=100">http://localhost:2001/order/create?userId=1&amp;productId=1&amp;count=10&amp;money=100</a></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/seata/seata5.png"></p><p>查看订单表</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/seata/seata6.png"></p><p>再查看库存表跟账户表，表的数据都改变了</p><p>错误情况</p><blockquote><ol><li>当库存和账户余额扣减后，订单状态并没有设置为已经完成，没有从零改为1</li><li>而且由于 feign 的重试机制，账户余额还有可能被多次扣减，（Account 就出现了重复扣减的情况）</li></ol></blockquote></li><li><p>在 2001 中需要进行事务的方法上添加 @GlobalTransactional</p><p><code>@GlobalTransactional(name = "fps-create-order", rollbackFor = Exception.class)</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@GlobalTransactional</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"fsp-create-order"</span><span class="token punctuation">,</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"------&gt;开始创建订单"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 1 新建订单</span>        orderDao<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"-------&gt;订单微服务开始调用库存，做扣减count"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2 扣减库存</span>        storageService<span class="token punctuation">.</span><span class="token function">decrease</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getProductId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>order<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"-------&gt;订单微服务开始调用库存，做扣减end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"-------&gt;订单微服务开始调用账户，做扣减money"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 3 扣减账户</span>        accountService<span class="token punctuation">.</span><span class="token function">decrease</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>order<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"-------&gt;订单微服务开始调用账户，做扣减end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4 修改订单的状态 从 0 到 1 ，1代表已经完成</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"------&gt;修改订单状态开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderDao<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"------&gt;修改订单状态结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"------&gt;下订单结束了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>​    <img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/seata/seata16.png"></p><p>​        重启2003项目</p><p>​        访问：<a href="http://localhost:2001/order/create?userId=1&amp;productId=1&amp;count=10&amp;money=100">http://localhost:2001/order/create?userId=1&amp;productId=1&amp;count=10&amp;money=100</a></p><p>​        发生了和刚才一样的异常，查看数据库发现三个数据表的数据都没有改变</p><h2 id="Seata原理"><a href="#Seata原理" class="headerlink" title="Seata原理"></a>Seata原理</h2><h3 id="TC-TM-RM三组件"><a href="#TC-TM-RM三组件" class="headerlink" title="TC/TM/RM三组件"></a>TC/TM/RM三组件</h3><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/seata/seata17.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/seata/seata18.png"></p><h3 id="分布式事务执行流程"><a href="#分布式事务执行流程" class="headerlink" title="分布式事务执行流程"></a>分布式事务执行流程</h3><ol><li>TM开启分布式事务(TM向TC注册全局事务记录) ;</li><li>按业务场景，编排数据库、服务等事务内资源(RM向TC汇报资源准备状态) ;</li><li>TM结束分布式事务,事务一阶段结束(TM通知TC提交/回滚分布式事务) ;</li><li>TC汇总事务信息，决定分布式事务是提交还是回滚;</li><li>TC通知所有RM提交/回滚资源,事务二阶段结束。</li></ol><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/seata/seata19.png"></p><h3 id="AT模式如何做到对业务的无侵入"><a href="#AT模式如何做到对业务的无侵入" class="headerlink" title="AT模式如何做到对业务的无侵入"></a>AT模式如何做到对业务的无侵入</h3><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/seata/seata25.png"></p><p><strong>一阶段加载</strong></p><p><code>在一阶段, Seata会拦截“业务SQL"</code></p><ol><li>解析SQL语义，找到“业务SQL” 要更新的业务数据,在业务数据被更新前，将其保存成”before image”,</li><li>执行“业务SQL” 更新业务数据,在业务数据更新之后,</li><li>其保存成”after image” ，最后生成行锁。</li></ol><p><code>以上操作全部在一个数据库事务内完成这样保证了一阶段操作的原子性。</code></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/seata/seata21.png"></p><p><strong>二阶段提交</strong></p><p><code>二阶段如是顺利提交的话,</code></p><p>因为“业务SQL”在-阶段已经提交至数据库,所以Seata框架只需将<code>一阶段保存的快照数据和行锁删掉, 完成数据清理即可.</code></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/seata/seata22.png"></p><p><strong>二阶段回滚</strong></p><p> 二阶段如果是回滚的话, ISeata就需要回滚一阶段已经执行的“业务SQL” ，还原业务数据。</p><p>回滚方式便是用”before image” 还原业务数据;但在还原前要首先要校验脏写,对比“数据库当前业务据”和”after image” ,如果两份数据完全一致就说明没有脏写,可以还原业务数据，如果不一 致就说明有脏写,出现脏写就需要转人工处理。</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/seata/seata23.png"></p><p><strong>过程图</strong></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/seata/seata24.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Seata&quot;&gt;&lt;a href=&quot;#Seata&quot; class=&quot;headerlink&quot; title=&quot;Seata&quot;&gt;&lt;/a&gt;Seata&lt;/h1&gt;&lt;h2 id=&quot;分布式事务的问题&quot;&gt;&lt;a href=&quot;#分布式事务的问题&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="笔记" scheme="http://mjean.life/categories/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="SpringCloud" scheme="http://mjean.life/categories/%E7%AC%94%E8%AE%B0/SpringCloud/"/>
    
    
    <category term="SpringCloud" scheme="http://mjean.life/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud笔记：Sentinel-流量控制</title>
    <link href="http://mjean.life/posts/53b3549e.html"/>
    <id>http://mjean.life/posts/53b3549e.html</id>
    <published>2021-03-30T08:48:42.000Z</published>
    <updated>2022-04-18T12:48:45.811Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel"></a>Sentinel</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>官网 ：<a href="https://github.com/alibaba/Sentinel">https://github.com/alibaba/Sentinel</a></li><li>中文文档 ：<a href="https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D">https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D</a></li><li>是一个轻量级的流量控制、熔断降级 Java 库</li><li>主要特性</li></ul><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sentinel/sentinel18.png"></p><h2 id="Sentinel控制台"><a href="#Sentinel控制台" class="headerlink" title="Sentinel控制台"></a>Sentinel控制台</h2><ul><li>Sentinel 组件由 2 部分组成</li></ul><blockquote><ul><li>核心库(Java客户端）不依赖任何框架/库，能够运行于所有Java运行时环境，同时对 Dubbo /Spring Cloud等框架也有较好的支持。</li><li>控制台(Dashboard)基于Spring Boot 开发，打包后可以直接运行，不需要额外的Tomcat等应用容器。</li></ul></blockquote><blockquote><p>下载地址： <a href="https://github.com/alibaba/Sentinel/releases/download/1.7.1/sentinel-dashboard-1.7.1.jar">https://github.com/alibaba/Sentinel/releases/download/1.7.1/sentinel-dashboard-1.7.1.jar</a></p><p>下载jar包以后，使用【java -jar】命令启动即可。(前提：确保有 Java 8 的环境，且 8080 端口没有被占用)</p><p>它使用 8080 端口，用户名和密码都为 ： sentinel</p></blockquote><h2 id="工程环境搭建"><a href="#工程环境搭建" class="headerlink" title="工程环境搭建"></a>工程环境搭建</h2><blockquote><p>新建模块 cloudalibaba-sentinel-service8401 ，使用nacos作为服务注册中心，来测试Sentinel的功能。</p></blockquote><p>pom依赖：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>       <span class="token comment">&lt;!--springcloud alibaba nacos--&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token comment">&lt;!--springcloud alibaba sentinel-datasource-nacos 后续做持久化用到--&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.csp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>sentinel-datasource-nacos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token comment">&lt;!--springcloud alibaba sentinel--&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token comment">&lt;!--openfeign--&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token comment">&lt;!-- springboot整合Web组件 --&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.xhc.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>yml 配置：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8401</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloudalibaba<span class="token punctuation">-</span>sentinel<span class="token punctuation">-</span>service  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span> <span class="token comment">#nacos服务注册中心地址</span>    <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>      <span class="token key atrule">transport</span><span class="token punctuation">:</span>        <span class="token key atrule">dashboard</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8080</span>  <span class="token comment">#配置sentinel dashboard地址</span>        <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8719</span>  <span class="token comment">#默认8719端口，假如被占用会自动从8719开始依次+1扫描，直至找到未被占用的端口</span><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">'*'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主启动类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainApp8401</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MainApp8401</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Controller层：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlowLimitController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/testA"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"------testA"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/testB"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"------testB"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1.启动Nacos、Sentinel控制台</p><p>2.启动cloudalibaba-sentinel-service8401项目</p><p>3.查看Sentinel控制台</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sentinel/sentinel19.png"></p><ul><li>因为 Sentinel 采用的是<strong>懒加载</strong></li><li>执行一下请求<br><a href="http://localhost:8401/testA">http://localhost:8401/testA</a><br><a href="http://localhost:8401/testB">http://localhost:8401/testB</a></li><li>再刷新 Sentinel 控制台</li></ul><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sentinel/sentinel20.png"></p><h2 id="流控规则"><a href="#流控规则" class="headerlink" title="流控规则"></a>流控规则</h2><h3 id="流控规则介绍"><a href="#流控规则介绍" class="headerlink" title="流控规则介绍"></a>流控规则介绍</h3><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sentinel/sentinel21.png"></p><ul><li>资源名:</li></ul><blockquote><p>唯一名称，默认请求路径</p></blockquote><ul><li>针对来源:</li></ul><blockquote><p> Sentinel可以针对调用者进行限流，填写微服务名，默认default (不区分来源)</p></blockquote><ul><li>阈值类型/单机阈值 :</li></ul><blockquote><ul><li>QPS ：表示每秒钟的请求数量，当调用该 api 的 QPS 达到阈值的时候，进行限流。</li><li>线程数 : 当调用该 api 的线程数达到阈值的时候，进行限流</li></ul></blockquote><ul><li>流控模式</li></ul><blockquote><ul><li>直接 : api 达到限流条件时，直接限流</li><li>关联 : 当关联的资源达到阈值时，就限流自己</li><li>链路 : 只记录指定链路上的流量（指定资源从入口资源进来的流量，如果达到阈值，就进行限流)【api级别的针对来源】</li></ul></blockquote><ul><li>流控效果:</li></ul><blockquote><ul><li>快速失败 : 直接失败，抛异常</li><li>Warm Up : 根据codeFactor(冷加载因子，默认3)的值，从阈值codeFactor，经过预热时长，才达到设置的QPS阈值</li><li>排队等待 : 匀速排队，让请求以匀速的速度通过，阈值类型必须设置为QPS，否则无效</li></ul></blockquote><h3 id="流控模式演示"><a href="#流控模式演示" class="headerlink" title="流控模式演示"></a>流控模式演示</h3><h4 id="流控模式–直接"><a href="#流控模式–直接" class="headerlink" title="流控模式–直接"></a>流控模式–直接</h4><ul><li><strong>api 达到限流条件时，直接限流</strong></li></ul><ol><li><p>为 /testA 请求设置流控规则</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sentinel/sentinel1.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sentinel/sentinel2.png"></p></li><li><p>查看流控规则</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sentinel/sentinel3.png"></p></li><li><p>发出请求，体验限流</p></li></ol><ul><li><p>先是一秒点一次，可以正常访问</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sentinel/sentinel4.png"></p></li><li><p>连续点几次，出现提示语句</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sentinel/sentinel5.png"></p></li></ul><h4 id="流控模式–关联"><a href="#流控模式–关联" class="headerlink" title="流控模式–关联"></a>流控模式–关联</h4><ul><li><strong>当关联的资源达到阈值时，就限流自己</strong></li><li>实际场景 ：对于同级别的服务，比如 <strong>下单、支付</strong> 两个服务，当 <strong>支付</strong> 流量过高，撑不住了，就限制一下 <strong>下单</strong> 服务，把资源留给 <strong>支付</strong> 服务，先撑过去。</li></ul><ol><li><p>修改上面建立的流控规则</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sentinel/sentinel6.jpg"></p></li><li><p>使用 PostMan 发出请求，体验限流</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sentinel/sentinel7.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sentinel/sentinel8.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sentinel/sentinel9.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sentinel/sentinel10.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sentinel/sentinel11.png"></p></li><li><p>访问 /testA</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sentinel/sentinel12.png"></p></li></ol><h4 id="流控模式–链路"><a href="#流控模式–链路" class="headerlink" title="流控模式–链路"></a>流控模式–链路</h4><ul><li><strong>只记录指定链路上的流量（指定资源从入口资源进来的流量，如果达到阈值，就进行限流)【api级别的针对来源】</strong></li></ul><ol><li><p>修改上面建立的流控规则</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sentinel/sentinel13.png"></p></li><li><p>使用 Postman 对 /testB 进行连续访问</p></li><li><p>访问 /testA</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sentinel/sentinel5.png"></p><p>因为从 资源入口 进入的请求过多，所以 testA 被限流</p></li></ol><hr><h3 id="流控效果演示"><a href="#流控效果演示" class="headerlink" title="流控效果演示"></a>流控效果演示</h3><h4 id="流控效果–快速失败-默认的"><a href="#流控效果–快速失败-默认的" class="headerlink" title="流控效果–快速失败(默认的)"></a>流控效果–快速失败(默认的)</h4><ul><li><p>就是上面一直出现的提示界面</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sentinel/sentinel5.png"></p></li></ul><h4 id="流控效果–预热-Warm-Up"><a href="#流控效果–预热-Warm-Up" class="headerlink" title="流控效果–预热(Warm Up)"></a>流控效果–预热(Warm Up)</h4><blockquote><p> 官方说明 ：<a href="https://github.com/alibaba/Sentinel/wiki/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6">https://github.com/alibaba/Sentinel/wiki/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6</a></p></blockquote><p>Warm Up（<code>RuleConstant.CONTROL_BEHAVIOR_WARM_UP</code>）方式，即预热/冷启动方式。当系统长期处于低水位的情况下，当流量突然增加时，直接把系统拉升到高水位可能瞬间把系统压垮。通过”冷启动”，让通过的流量缓慢增加，在一定时间内逐渐增加到阈值上限，给冷系统一个预热的时间，避免冷系统被压垮。详细文档可以参考 <a href="https://github.com/alibaba/Sentinel/wiki/%E9%99%90%E6%B5%81---%E5%86%B7%E5%90%AF%E5%8A%A8">流量控制 - Warm Up 文档</a></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sentinel/sentinel22.png"></p><blockquote><ul><li><p>冷加载因子 ：默认 coldFactor 为 3，即请求 QPS 从 threshold/3 开始，经预热时长逐渐升至设定的QPS阈值。</p></li><li><p>限流 冷启动 ：<a href="https://github.com/alibaba/Sentinel/wiki/%E9%99%90%E6%B5%81%E2%80%94%E5%86%B7%E5%90%AF%E5%8A%A8">https://github.com/alibaba/Sentinel/wiki/%E9%99%90%E6%B5%81—%E5%86%B7%E5%90%AF%E5%8A%A8</a></p></li></ul></blockquote><ol><li><p>修改流控效果</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sentinel/sentinel14.jpg"></p></li><li><p>一直发出 /testA 请求</p><p>发现刚开始提示 Blocked by Sentinel(flow limiting) 的频率比较高</p><p>越往后频率越低</p><p>最后几乎不会出现</p><p>这就是阈值再慢慢<strong>预热</strong>的过程</p></li></ol><h4 id="流控效果–排队等待"><a href="#流控效果–排队等待" class="headerlink" title="流控效果–排队等待"></a>流控效果–排队等待</h4><p>匀速排队（<code>RuleConstant.CONTROL_BEHAVIOR_RATE_LIMITER</code>）方式会严格控制请求通过的间隔时间，也即是让请求以均匀的速度通过，对应的是漏桶算法。</p><p>详细文档可以参考 <a href="https://github.com/alibaba/Sentinel/wiki/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6-%E5%8C%80%E9%80%9F%E6%8E%92%E9%98%9F%E6%A8%A1%E5%BC%8F">流量控制 - 匀速器模式</a></p><p>该方式的作用如下图所示：</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sentinel/sentinel23.png"></p><p>这种方式主要用于处理间隔性突发的流量，例如消息队列。想象一下这样的场景，在某一秒有大量的请求到来，而接下来的几秒 则处于空闲状态，我们希望系统</p><p>能够在接下来的空闲期间逐渐处理这些请求，而不是在第一秒直接拒绝多余的请求。</p><blockquote><p>注意：匀速排队模式暂时不支持 QPS &gt; 1000 的场景</p></blockquote><p>总而言之</p><blockquote><ul><li>让请求以匀速的速度通过，阈值类型必须设置为QPS，否则无效</li><li>每个请求，愿意等就等，不愿意等就超时重试</li></ul></blockquote><ol><li><p>修改 流控效果</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sentinel/sentinel15.jpg"></p></li><li><p>在 Controller 中添加一条语句打印日志，打印线程名</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sentinel/sentinel24.png"></p></li><li><p>使用 Postman 模拟大量请求</p></li><li><p>观察控制台</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sentinel/sentinel17.png"></p></li></ol><hr><h3 id="熔断降级"><a href="#熔断降级" class="headerlink" title="熔断降级"></a>熔断降级</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><ul><li>官方文档 ：<a href="https://github.com/alibaba/Sentinel/wiki/%E7%86%94%E6%96%AD%E9%99%8D%E7%BA%A7">https://github.com/alibaba/Sentinel/wiki/%E7%86%94%E6%96%AD%E9%99%8D%E7%BA%A7</a></li><li>熔断策略：</li></ul><blockquote><p><strong>慢调用比例 (SLOW_REQUEST_RATIO)：</strong></p><ul><li>选择以慢调用比例作为阈值，需要设置允许的 <strong>慢调用 RT（即最大的响应时间）</strong>，请求的响应时间大于该值则统计为慢调用。</li><li>当单位统计时长（statIntervalMs）内请求数目大于设置的最小请求数目，并且慢调用的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。</li><li>经过熔断时长后熔断器会进入<strong>探测恢复状态（HALF-OPEN 状态）</strong></li><li>若接下来的一个请求响应时间小于设置的慢调用 RT 则结束熔断，若大于设置的慢调用 RT 则会再次被熔断。</li></ul></blockquote><blockquote><p><strong>异常比例 (ERROR_RATIO)：</strong></p><ul><li>当单位统计时长（statIntervalMs）内请求数目大于设置的最小请求数目，并且异常的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。</li><li>经过熔断时长后熔断器会进入<strong>探测恢复状态（HALF-OPEN 状态）</strong>，若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。异常比率的阈值范围是 [0.0, 1.0]，代表 0% - 100%。</li></ul></blockquote><blockquote><p>**异常数 (ERROR_COUNT)**：</p><ul><li>当单位统计时长内的异常数目超过阈值之后会自动进行熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。</li></ul></blockquote><h4 id="降级策略–慢调用比例（RT）"><a href="#降级策略–慢调用比例（RT）" class="headerlink" title="降级策略–慢调用比例（RT）"></a>降级策略–慢调用比例（RT）</h4><ol><li><p>先在 Controller 中添加一个方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/testD"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"testD 测试RT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"----------testD"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>设置降级规则</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sentinel/sentinel25.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sentinel/sentinel26.png"></p></li><li><p>使用 JMeter 进行压力测试</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sentinel/sentinel27.jpg"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sentinel/sentinel28.jpg"></p></li><li><p>观察结果</p></li></ol><ul><li><p>启动JMeter，访问该请求</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sentinel/sentinel30.jpg"></p></li><li><p>停止JMeter，访问该请求</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sentinel/sentinel29.jpg"></p></li></ul><h4 id="降级策略–异常比例"><a href="#降级策略–异常比例" class="headerlink" title="降级策略–异常比例"></a>降级策略–异常比例</h4><ol><li><p>修改 Controller ，添加一个运行时异常</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sentinel/sentinel31.png"></p></li><li><p>修改 降级规则</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sentinel/sentinel32.png"></p></li><li><p>启动 JMeter ，去浏览器上访问该请求，查看结果</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sentinel/sentinel34.jpg"></p></li><li><p>停止 JMeter 后，再访问该请求</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sentinel/sentinel33.jpg"></p></li></ol><h4 id="降级测录–异常数"><a href="#降级测录–异常数" class="headerlink" title="降级测录–异常数"></a>降级测录–异常数</h4><ol><li><p>修改 降级规则</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sentinel/sentinel35.png"></p></li><li><p>连续发出请求，当刷新第六次的时候被熔断了</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sentinel/sentinel36.jpg"></p></li><li><p>过一段时间后再次访问</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sentinel/sentinel37.jpg"></p></li></ol><blockquote><p>说明：</p><p>@SentinelResource：处理的是Sentinel控制台配置的违规情况，有blockHandler方法配置的兜底处理；</p><p>RuntimeException：int age =10/0，这个是java运行时报出的运行时异常RuntimeException，@SentinelResource不管。</p></blockquote><hr><h3 id="热点Key限流"><a href="#热点Key限流" class="headerlink" title="热点Key限流"></a>热点Key限流</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><ul><li>官方文档 ：<a href="https://github.com/alibaba/Sentinel/wiki/%E7%83%AD%E7%82%B9%E5%8F%82%E6%95%B0%E9%99%90%E6%B5%81">https://github.com/alibaba/Sentinel/wiki/热点参数限流</a></li><li>何为热点？</li></ul><blockquote><p>热点即经常访问的数据。很多时候我们希望统计某个热点数据中访问频次最高的 Top K 数据，并对其访问进行限制。比如：</p><ul><li>商品 ID 为参数，统计一段时间内最常购买的商品 ID 并进行限制</li><li>用户 ID 为参数，针对一段时间内频繁访问的用户 ID 进行限制</li></ul><p>热点参数限流会统计入传入参数中的热点参数，并根据配置的限流阈值与模式，对包含热点参数的资源调用进行限流。热点参数限流可以看做是一种特殊的流量控制，仅包含热点参数的资源调用生效。</p></blockquote><h4 id="备选方案"><a href="#备选方案" class="headerlink" title="备选方案"></a>备选方案</h4><blockquote><ul><li>在 Hystrix 中某个方法被降级了、熔断了，都有一个备选方案兜底，这里也类似</li><li>每次服务出现问题页面都会提示 Blocked by Sentinel(flow limiting) ，能不能把它替换成我们自己的方案</li><li>可以，需要用到注解 —— @SentinelResource</li></ul></blockquote><ol><li>controller层写一个demo:</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/testhotkey"</span><span class="token punctuation">)</span>   <span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"testhotkey"</span><span class="token punctuation">,</span> blockHandler <span class="token operator">=</span> <span class="token string">"deal_testhotkey"</span><span class="token punctuation">)</span>   <span class="token comment">//这个value是随意的值，并不和请求路径必须一致</span>   <span class="token comment">//在填写热点限流的 资源名 这一项时，可以填 /testhotkey 或者是 @SentinelResource的value的值</span>   <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testHotKey</span><span class="token punctuation">(</span>           <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"p1"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">String</span> p1<span class="token punctuation">,</span>           <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"p2"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">String</span> p2   <span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token string">"testHotKey__success"</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token comment">//类似Hystrix 的兜底方法</span>   <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">deal_testhotkey</span><span class="token punctuation">(</span><span class="token class-name">String</span> p1<span class="token punctuation">,</span> <span class="token class-name">String</span> p2<span class="token punctuation">,</span> <span class="token class-name">BlockException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token string">"testhotkey__fail"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sentinel/sentinel38.png"></p><ol start="2"><li><p>发出请求并带上 p1 参数</p><p>访问 ：<a href="http://localhost:8401/testHotKey?p1=a">http://localhost:8401/testHotKey?p1=a</a></p><p>如果 1 秒点一下，可以正常访问，但是 1 秒内，连续请求，就会走备选方案</p></li></ol><h4 id="参数例外项"><a href="#参数例外项" class="headerlink" title="参数例外项"></a>参数例外项</h4><blockquote><ul><li>上述情况，不论被监控的参数传入的是何值，都会进行判断，并限流</li><li>但是有些时候有些特殊值，希望它的阈值和其他不一样，就要使用该配置</li><li>比如说：p1 传入 5 时的阈值可以允许达到 200，但是其他值只能达到 1</li></ul></blockquote><ol><li><p>修改 热 Key 配置 添加 参数例外项</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sentinel/sentinel39.png"></p></li><li><p>先传入普通值测试 ：<a href="http://localhost:8401/testHotKey?p1=a">http://localhost:8401/testHotKey?p1=a</a></p><p>会发现访问一秒内访问两次或以上就报错</p></li><li><p>再传入特殊值测试 ：<a href="http://localhost:8401/testHotKey?p1=5">http://localhost:8401/testHotKey?p1=5</a></p><p>会发现一秒内怎么点都不会出错，这是因为我们的阈值设置了200</p></li></ol><hr><h3 id="系统规则"><a href="#系统规则" class="headerlink" title="系统规则"></a>系统规则</h3><blockquote><p>一般配置在网关或者入口应用中，但是这个东西有点危险，不但值不合适，就相当于系统瘫痪。</p><p>官方文档 ：<a href="https://github.com/alibaba/Sentinel/wiki/%E7%B3%BB%E7%BB%9F%E8%87%AA%E9%80%82%E5%BA%94%E9%99%90%E6%B5%81">https://github.com/alibaba/Sentinel/wiki/%E7%B3%BB%E7%BB%9F%E8%87%AA%E9%80%82%E5%BA%94%E9%99%90%E6%B5%81</a></p></blockquote><p>Sentinel系统自适应限流从整体维度对应用入口流量进行控制，结合应用的Load、CPU使用率、总体平均RT、入口QPS和并发线程数等几个维度的监控指标，通过自适应的流控策略，让系统的入口流量和系统的负载达到一个平衡，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</p><p>系统规则的配置说明：</p><blockquote><ul><li><strong>Load 自适应（仅对 Linux/Unix-like 机器生效）</strong>：系统的 load1 作为启发指标，进行自适应系统保护。当系统 load1 超过设定的启发值，且系统当前的并发线程数超过估算的系统容量时才会触发系统保护（BBR 阶段）。系统容量由系统的 maxQps * minRt 估算得出。设定参考值一般是 CPU cores * 2.5。</li><li><strong>CPU usage（1.5.0+ 版本）</strong>：当系统 CPU 使用率超过阈值即触发系统保护（取值范围 0.0-1.0），比较灵敏。</li><li><strong>平均 RT</strong>：当单台机器上所有入口流量的平均 RT 达到阈值即触发系统保护，单位是毫秒。</li><li><strong>并发线程数</strong>：当单台机器上所有入口流量的并发线程数达到阈值即触发系统保护。</li><li><strong>入口 QPS</strong>：当单台机器上所有入口流量的 QPS 达到阈值即触发系统保护。</li></ul></blockquote><hr><h3 id="SentinelResource"><a href="#SentinelResource" class="headerlink" title="@SentinelResource"></a>@SentinelResource</h3><h4 id="两种配置备选方案"><a href="#两种配置备选方案" class="headerlink" title="两种配置备选方案"></a>两种配置备选方案</h4><blockquote><p>@SentinelResource 注解在限流时，有两种配置备选方案的方式：</p><ul><li>按资源名称限流 + 备选方案</li><li>按Url地址限流 + 备选方案</li></ul><p>主要是指定资源名（也可以用请求路径作为资源名），和指定降级处理方法的。</p></blockquote><p>例如： </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xhc<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">SentinelResource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>slots<span class="token punctuation">.</span>block<span class="token punctuation">.</span></span><span class="token class-name">BlockException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>dkf<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>entities<span class="token punctuation">.</span></span><span class="token class-name">CommonResult</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>dkf<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>entities<span class="token punctuation">.</span></span><span class="token class-name">Payment</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RateLimitController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/byResource"</span><span class="token punctuation">)</span><span class="token comment">//value=“资源名称”//处理降级的方法名</span>    <span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"byResource"</span><span class="token punctuation">,</span> blockHandler <span class="token operator">=</span> <span class="token string">"handleException"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">byResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"按照资源名限流测试0K"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Payment</span><span class="token punctuation">(</span><span class="token number">2020L</span><span class="token punctuation">,</span><span class="token string">"serial001"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//降级方法</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">handleException</span><span class="token punctuation">(</span><span class="token class-name">BlockException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token number">444</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCanonicalName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t 服务不可用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sentinel/sentinel40.jpg"></p><p>测试后同时也会发现上面 两个配置备选方案的方式 的问题</p><blockquote><ol><li>系统默认的，没有体现我们自己的业务要求。</li><li>依照现有条件，我们自定义的处理方法又和业务代码耦合在一块，不直观。</li><li>每个业务方法都添加一个兜底的，那代码膨胀加剧。</li><li>全局统—的处理方法没有体现。</li></ol></blockquote><h4 id="自定义全局BlockHandler处理类"><a href="#自定义全局BlockHandler处理类" class="headerlink" title="自定义全局BlockHandler处理类"></a>自定义全局BlockHandler处理类</h4><ul><li>修改 alibaba-sentinel-service-8401</li></ul><ol><li><p>自定义一个限流处理类 ：CustomerBlockHandler</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerBlockHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">CommonResult</span> <span class="token function">handlerException</span><span class="token punctuation">(</span><span class="token class-name">BlockException</span> exception<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token number">4444</span><span class="token punctuation">,</span><span class="token string">"按客户自定义,global handlerException----1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">CommonResult</span> <span class="token function">handlerException2</span><span class="token punctuation">(</span><span class="token class-name">BlockException</span> exception<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token number">4444</span><span class="token punctuation">,</span><span class="token string">"按客户自定义,global handlerException----2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改 Controller ：RateLimitController</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/rateLimit/customerBlockHandler"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"customerBlockHandler"</span><span class="token punctuation">,</span>                blockHandlerClass <span class="token operator">=</span> <span class="token class-name">CustomerBlockHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>                blockHandler <span class="token operator">=</span> <span class="token string">"handlerException2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">customerBlockHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"按客户自定义测试OK"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Payment</span><span class="token punctuation">(</span><span class="token number">2020L</span><span class="token punctuation">,</span><span class="token string">"serial003"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>重启 8401</p></li><li><p>访问 ：<a href="http://localhost:8401/rateLimit/customerBlockHandler">http://localhost:8401/rateLimit/customerBlockHandler</a></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sentinel/sentinel41.png"></p></li><li><p>配置限流规则后再测试</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sentinel/sentinel41.png"></p></li></ol><h4 id="SentinelResource-注解属性说明"><a href="#SentinelResource-注解属性说明" class="headerlink" title="@SentinelResource 注解属性说明"></a>@SentinelResource 注解属性说明</h4><blockquote><ul><li><p><strong>value</strong>：资源名称，必需项（不能为空）</p></li><li><p><strong>entryType</strong>：entry 类型，可选项（默认为 EntryType.OUT）</p></li><li><p><strong>blockHandler</strong>: 处理BlockException的函数名称。函数要求：</p><p>​    1、必须是 public</p><p>​    2、返回类型与原方法一致</p><p>​    3、参数类型需要和原方法相匹配，并在最后加 BlockException 类型的参数。</p><p>​    4、默认需和原方法在同一个类中。若希望使用其他类的函数，可配置 blockHandlerClass ，并指定blockHandlerClass里面的方法。</p></li><li><p><strong>blockHandlerClass</strong> ：存放blockHandler的类。<strong>对应的处理函数必须static修饰</strong>，否则无法解析，其他要求：同blockHandler。</p></li><li><p><strong>fallback</strong> ：fallback 函数名称，可选项，用于在抛出异常的时候提供 fallback 处理逻辑。fallback 函数可以针对所有类型的异常（除了 里面排除掉的异常类型）进行处理。fallback 函数签名和位置要求：</p><p>​    1、返回值类型必须与原函数返回值类型一致；</p><p>​    2、方法参数列表需要和原函数一致，或者可以额外多一个 Throwable 类型的参数用于接收对应的异常。</p><p>​    3、fallback 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 fallbackClass 为对应的类的 Class 对象，注意对应的函数必    需为 static 函数，否则无法解析。</p></li><li><p><strong>exceptionsToTrace</strong> ：需要trace的异常</p></li></ul></blockquote><hr><h3 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h3><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><blockquote><p>之前有 open-feign 和 hystrix 的整合，现在来实现sentinel 整合 ribbon + open-feign + fallback 进行服务熔断。</p><p>新建三个模块，两个提供者 cloudalibaba-provider-payment9003/9004，和一个消费者 cloudalibaba-consumer-nacos-order84</p><p>目的：</p><ul><li>fallback管运行异常</li><li>blockHandler管配置异常</li></ul><p><font color="red">上面使用sentinel有一个很明显的问题，就是sentinel，对程序内部异常（各种异常，包括超时）这种捕捉，显得很乏力，它主要是针对流量控制，系统吞吐量，或者是异常比例这种，会发生降级或熔断，但是当程序内部发生异常，直接返回给用户错误页面，根本不会触发异常比例这种降级。所以才需要整合open-feign 来解决程序内部异常时，配置相应的兜底方法</font></p></blockquote><hr><p>两个提供者模块一致，如下：</p><p>pom依赖：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>       <span class="token comment">&lt;!-- springcloud alibaba nacos 依赖 --&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token comment">&lt;!-- springboot整合Web组件 --&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token comment">&lt;!-- 日常通用jar包 --&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.xhc.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>yml配置：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9004</span>  <span class="token comment"># /9003</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>provider  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">'*'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主启动类:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentMain9004</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">PaymentMain9004</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>controller : </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${server.port}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> serverPort<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Payment</span><span class="token punctuation">&gt;</span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Payment</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span><span class="token string">"sadawdasd545a1d3aw54das32d5aw"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Payment</span><span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">,</span><span class="token string">"54dawdasd545a1d3aw54das32d5aw"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3L</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Payment</span><span class="token punctuation">(</span><span class="token number">3L</span><span class="token punctuation">,</span><span class="token string">"d68735asd545a1d3aw54das32d5aw"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/paymentSQL/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">&gt;</span></span> <span class="token function">paymentSQL</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Payment</span> payment <span class="token operator">=</span>hashMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"from mysql,serverPort: "</span><span class="token operator">+</span>serverPort<span class="token punctuation">,</span>payment<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>消费者：</p><p>pom依赖：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>       <span class="token comment">&lt;!-- 加入open-feign --&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token comment">&lt;!-- 后续做Sentinel的持久化会用到的依赖 --&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.csp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>sentinel-datasource-nacos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token comment">&lt;!-- sentinel  --&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token comment">&lt;!-- springcloud alibaba nacos 依赖 --&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token comment">&lt;!-- springboot整合Web组件 --&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token comment">&lt;!-- 日常通用jar包 --&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.xhc.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>yml配置：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">84</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>    <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>      <span class="token key atrule">transport</span><span class="token punctuation">:</span>        <span class="token key atrule">dashboard</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8080</span>        <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8719</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>order<span class="token punctuation">-</span>consumer<span class="token comment"># 自定义的一个属性，提供者服务地址</span><span class="token key atrule">service-url</span><span class="token punctuation">:</span>  <span class="token key atrule">nacos-user-service</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//nacos<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>provider<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主启动类:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderNacosMain84</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">OrderNacosMain84</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>config类里面注入 RestTemplate：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationContextConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@LoadBalanced</span>    <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">getRestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>controller 层：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CircleBreakerController</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> SERVICE_URL <span class="token operator">=</span> <span class="token string">"http://nacos-payment-provider"</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/fallback/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">&gt;</span></span> <span class="token function">fallback</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>SERVICE_URL<span class="token operator">+</span><span class="token string">"/paymentSQL/"</span><span class="token operator">+</span>id<span class="token punctuation">,</span><span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"IllegalArgumentException,非法参数异常。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"NullPointerException,该ID没有对应记录，空指针异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面只实现了 以nacos 作为服务注册中心，消费者使用ribbon 实现负载均衡调用提供者的效果。</p><h4 id="熔断降级配置"><a href="#熔断降级配置" class="headerlink" title="熔断降级配置"></a>熔断降级配置</h4><p>只配置 fallback:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/fallback/{id}"</span><span class="token punctuation">)</span>   <span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"fallback"</span><span class="token punctuation">,</span>fallback <span class="token operator">=</span> <span class="token string">"handlerFallback"</span><span class="token punctuation">)</span><span class="token comment">//fallback只负责业务异常</span>   <span class="token keyword">public</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">&gt;</span></span> <span class="token function">fallback</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>SERVICE_URL<span class="token operator">+</span><span class="token string">"/paymentSQL/"</span><span class="token operator">+</span>id<span class="token punctuation">,</span><span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"IllegalArgumentException,非法参数异常。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"NullPointerException,该ID没有对应记录，空指针异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">return</span> result<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment">//兜底方法</span>   <span class="token comment">//本例是fallback</span>   <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">handlerFallback</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">,</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token class-name">Payment</span> payment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Payment</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token string">"null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">444</span><span class="token punctuation">,</span><span class="token string">"兜底异常handlerFallback，exception内容 "</span><span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>payment<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>业务异常会被 fallback 处理，返回我们自定义的提示信息，而如果给它加上流控，并触发阈值，只能返回sentinel默认的提示信息。</p></blockquote><p>只配置blockHandler:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/fallback/{id}"</span><span class="token punctuation">)</span>   <span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"fallback"</span><span class="token punctuation">,</span>blockHandler <span class="token operator">=</span> <span class="token string">"blockHandler"</span><span class="token punctuation">)</span><span class="token comment">//blockHandler只负责sentinel控制台配置异常</span>   <span class="token keyword">public</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">&gt;</span></span> <span class="token function">fallback</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>SERVICE_URL<span class="token operator">+</span><span class="token string">"/paymentSQL/"</span><span class="token operator">+</span>id<span class="token punctuation">,</span><span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"IllegalArgumentException,非法参数异常。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"NullPointerException,该ID没有对应记录，空指针异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">return</span> result<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token comment">//本例是blockHandler</span>   <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">blockHandler</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">,</span> <span class="token class-name">BlockException</span> blockException<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token class-name">Payment</span> payment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Payment</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token string">"null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">445</span><span class="token punctuation">,</span> <span class="token string">"blockHandler-sentinel限流，无此流水： blockException "</span> <span class="token operator">+</span> blockException<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> payment<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这时候的效果就是，运行异常直接报错错误页面。在sentinel上添加一个降级规则，设置2s内触发异常2次，触发阈值以后，返回的是我们自定义的 blockhanlder 方法返回的内容。</p></blockquote><p>fallback和blockHandler两者都配置：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/fallback/{id}"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"fallback"</span><span class="token punctuation">,</span>fallback <span class="token operator">=</span> <span class="token string">"handlerFallback"</span><span class="token punctuation">,</span>blockHandler <span class="token operator">=</span> <span class="token string">"blockHandler"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">&gt;</span></span> <span class="token function">fallback</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>SERVICE_URL<span class="token operator">+</span><span class="token string">"/paymentSQL/"</span><span class="token operator">+</span>id<span class="token punctuation">,</span><span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"IllegalArgumentException,非法参数异常。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"NullPointerException,该ID没有对应记录，空指针异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//本例是fallback</span><span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">handlerFallback</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">,</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">Payment</span> payment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Payment</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token string">"null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">444</span><span class="token punctuation">,</span><span class="token string">"兜底异常handlerFallback，exception内容 "</span><span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>payment<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//本例是blockHandler</span><span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">blockHandler</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">,</span> <span class="token class-name">BlockException</span> blockException<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Payment</span> payment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Payment</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token string">"null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">445</span><span class="token punctuation">,</span> <span class="token string">"blockHandler-sentinel限流，无此流水： blockException "</span> <span class="token operator">+</span> blockException<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> payment<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>明显两者都是有效的，可以同时配置。</p></blockquote><h4 id="异常忽略"><a href="#异常忽略" class="headerlink" title="异常忽略"></a>异常忽略</h4><blockquote><p>这是 @SentinelResource 注解的一个值：</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sentinel/sentinel43.png"></p></blockquote><h4 id="全局降级-整合Feign"><a href="#全局降级-整合Feign" class="headerlink" title="全局降级(整合Feign)"></a>全局降级(整合Feign)</h4><blockquote><p>上面是单个进行 fallback 和 blockhandler 的测试，下面是整合 openfeign 实现把降级方法解耦。和Hystrix 几乎一摸一样！</p></blockquote><p>还是使用上面 84 这个消费者做测试：</p><ol><li>先添加open-feign依赖：</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>yml 追加如下配置：</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 激活Sentinel对Feign的支持</span><span class="token key atrule">feign</span><span class="token punctuation">:</span>  <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>主启动类添加注解 ： @EnableFeignClients  激活open-feign</li><li>service : </li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"nacos-payment-provider"</span><span class="token punctuation">,</span>fallback <span class="token operator">=</span> <span class="token class-name">PaymentFallbackService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PaymentService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/paymentSQL/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">&gt;</span></span> <span class="token function">paymentSQL</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>service 实现类：</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentFallbackService</span> <span class="token keyword">implements</span> <span class="token class-name">PaymentService</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">&gt;</span></span> <span class="token function">paymentSQL</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">44444</span><span class="token punctuation">,</span><span class="token string">"服务降级返回，-----PaymentFallbackService"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Payment</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token string">"errorSerial"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>controller 层：</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">PaymentService</span> paymentService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/paymentSQL/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">&gt;</span></span> <span class="token function">paymentSQL</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> paymentService<span class="token punctuation">.</span><span class="token function">paymentSQL</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li><p>测试，关闭提供者9003、9004，会触发 service 实现类的方法。</p></li><li><p>总结: 这种全局熔断，是针对 “访问提供者” 这个过程的，只有访问提供者过程中发生异常才会触发降级，也就是这些降级，是给service接口上这些提供者的方法加的，以保证在远程调用时能顺利进行。而且这明显是 fallback ，而不是 blockHandler，注意区分。</p></li></ol><blockquote><p>fallback 和 blockHandler 肤浅的区别：</p><p>F ：不需要指定规则，程序内部异常均可触发（超时异常需要配置超时时间）</p><p>B ：配上也没用，必须去 Sentinel 上指定规则才会被触发。 </p></blockquote><h4 id="熔断降级框架对比"><a href="#熔断降级框架对比" class="headerlink" title="熔断降级框架对比"></a>熔断降级框架对比</h4><table><thead><tr><th align="center"></th><th align="center">Sentinel</th><th align="center">Hystrix</th><th align="center">Resilience4j</th></tr></thead><tbody><tr><td align="center">隔离策略</td><td align="center">信号量隔离（并发线程数限流）</td><td align="center">线程池隔离/信号量隔离</td><td align="center">信号量隔离</td></tr><tr><td align="center">熔断降级策略</td><td align="center">基于响应时间、异常比、异常数</td><td align="center">基于异常比</td><td align="center">基于异常比、响应时间</td></tr><tr><td align="center">实时统计实现</td><td align="center">滑动窗口（LeapArray）</td><td align="center">滑动窗口（Rxjava）</td><td align="center">Ring Bit Buffer</td></tr><tr><td align="center">动态规则配置</td><td align="center">支持多种数据源</td><td align="center">支持多种数据源</td><td align="center">有限支持</td></tr><tr><td align="center">扩展性</td><td align="center">多个扩展点</td><td align="center">插件形式扩展</td><td align="center">接口形式扩展</td></tr><tr><td align="center">限流</td><td align="center">基于QPS、支持基于调用关系的限流</td><td align="center">有限支持</td><td align="center">Rate Limiter</td></tr><tr><td align="center">流量整形</td><td align="center">支持预热、匀加速、预热排队模式</td><td align="center">不支持</td><td align="center">简单的 Rate Limit</td></tr><tr><td align="center">系统自适应保护</td><td align="center">支持</td><td align="center">不支持</td><td align="center">不支持</td></tr><tr><td align="center">控制台</td><td align="center">提供开箱即用的控制台，可以配置规则、查看秒级监控、机器发现等</td><td align="center">简单的监控查看</td><td align="center">不提供控制台，可对接其他监控系统</td></tr><tr><td align="center">基于注解的支持</td><td align="center">支持</td><td align="center">支持</td><td align="center">支持</td></tr></tbody></table><hr><h3 id="Sentinel规则持久化"><a href="#Sentinel规则持久化" class="headerlink" title="Sentinel规则持久化"></a>Sentinel规则持久化</h3><blockquote><ul><li>一旦我们重启应用，Sentinel规则将消失</li><li>生产环境需要将配置规则进行<strong>持久化</strong></li><li>将限流配置规则<strong>持久化进 Nacos</strong> 保存</li><li>只要刷新 8401 某个 rest 地址，sentinel 控制台的流控规则就能看到，只要 Nacos 里面的配置不删除，针对 8401 上 Sentinel 上的流控规则持续有效</li></ul></blockquote><p><strong>具体操作步骤</strong></p><ol><li>修改 cloudalibaba-sentinel-service8401</li><li>pom依赖：</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.csp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>sentinel-datasource-nacos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>yml配置：</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>      <span class="token key atrule">datasource</span><span class="token punctuation">:</span>        <span class="token key atrule">ds1</span><span class="token punctuation">:</span>            <span class="token key atrule">nacos</span><span class="token punctuation">:</span>            <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>            <span class="token key atrule">dataId</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span>            <span class="token key atrule">group</span><span class="token punctuation">:</span> DEFAULT_GROUP            <span class="token key atrule">data-type</span><span class="token punctuation">:</span> json            <span class="token key atrule">rule-type</span><span class="token punctuation">:</span> flow<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><p>去nacos上创建一个dataid ,名字和yml配置的一致</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sentinel/sentinel44.png"></p></li><li><p>json格式，内容如下：</p></li></ol><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token property">"resource"</span><span class="token operator">:</span> <span class="token string">"/rateLimit/byUrl"</span><span class="token punctuation">,</span>        <span class="token property">"limitApp"</span><span class="token operator">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span>        <span class="token property">"grade"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"count"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"strategy"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"controlBehavior"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"clusterMode"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>resource:：资源名称</li><li>limitApp：来源应用</li><li>grade：阈值类型，0表示线程数，1表示QPS</li><li>count：单机阈值</li><li>strategy：流控模式，0表示直接，1表示关联，2表示链路</li><li>controlBehavior：流控效果，0表示快速失败，1表示Warm Up，2表示排队等待</li><li>clusterMode：是否集群</li></ul></blockquote><ol start="5"><li><p>启动应用，发现存在 关于 /rateLimit/byUrl 请求路径的流控规则。</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sentinel/sentinel47.png"></p></li><li><p>总结: 就是在 sentinel 启动的时候，去 nacos 上读取相关规则配置信息，实际上它规则的持久化，就是第三、第四步，粘贴到nacos上保存下来，就算以后在 sentinel 上面修改了，重启应用以后也是无效的。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Sentinel&quot;&gt;&lt;a href=&quot;#Sentinel&quot; class=&quot;headerlink&quot; title=&quot;Sentinel&quot;&gt;&lt;/a&gt;Sentinel&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="笔记" scheme="http://mjean.life/categories/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="SpringCloud" scheme="http://mjean.life/categories/%E7%AC%94%E8%AE%B0/SpringCloud/"/>
    
    
    <category term="SpringCloud" scheme="http://mjean.life/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud笔记：Nacos-服务注册与配置中心</title>
    <link href="http://mjean.life/posts/2c8aae46.html"/>
    <id>http://mjean.life/posts/2c8aae46.html</id>
    <published>2021-03-25T04:56:10.000Z</published>
    <updated>2022-04-18T12:48:45.780Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringCloud-Alibaba"><a href="#SpringCloud-Alibaba" class="headerlink" title="SpringCloud Alibaba"></a>SpringCloud Alibaba</h1><blockquote><p>GITHUB ：<a href="https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md">https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md</a></p></blockquote><h2 id="大简介"><a href="#大简介" class="headerlink" title="大简介"></a>大简介</h2><ul><li>能做什么</li></ul><blockquote><ul><li>服务限流降级:默认支持Servlet、Feign、RestTemplate、Dubbo和RocketMQ限流降级功能的接入，可以在运行时通过控制台</li><li>实时修改限流降级规则，还支持查看限流降级Metrics监控。</li><li>服务注册与发现:适配Spring Cloud服务注册与发现标准，默认集成了Ribbon的支持。</li><li>分布式配置管理:支持分布式系统中的外部化配置，配置更改时自动刷新。</li><li>消息驱动能力:基于Spring Cloud Stream为微服务应用构建消息驱动能力。</li><li>阿里云对象存储:阿里云提供的海量、安全、低成本、高可靠的云存储服务。支持在任何应用、任何时间、任何地点存储和访问任意类型的数据。</li><li>分布式任务调度:提供秒级、精准、高可靠、高可用的定时(基于Cron表达式)任务调度服务。同时提供分布式的任务执行模型，如网格任务。网格任务支持海量子任务均匀分配到所有Worker (schedulerx-client)上执行。</li></ul></blockquote><ul><li>相应的组件</li></ul><blockquote><ul><li>Sentinel：把流量作为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</li><li>Nacos：一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</li><li>RocketMQ：一款开源的分布式消息系统，基于高可用分布式集群技术，提供低延时的、高可靠的消息发布与订阅服务。</li><li>Dubbo：Apache Dubbo™ 是一款高性能 Java RPC 框架。</li><li>Seata：阿里巴巴开源产品，一个易于使用的高性能微服务分布式事务解决方案。</li><li>Alibaba Cloud ACM：一款在分布式架构环境中对应用配置进行集中管理和推送的应用配置中心产品。</li><li>Alibaba Cloud OSS: 阿里云对象存储服务（Object Storage Service，简称 OSS），是阿里云提供的海量、安全、低成本、高可靠的云存储服务。您可以在任何应用、任何时间、任何地点存储和访问任意类型的数据。</li><li>Alibaba Cloud SchedulerX: 阿里中间件团队开发的一款分布式任务调度产品，提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。</li><li>Alibaba Cloud SMS: 覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道</li></ul></blockquote><ul><li>官网</li></ul><blockquote><ul><li>官网 ：<a href="https://spring.io/projects/spring-cloud-alibaba#overview">https://spring.io/projects/spring-cloud-alibaba#overview</a></li><li>Github ：<a href="https://github.com/alibaba/spring-cloud-alibaba">https://github.com/alibaba/spring-cloud-alibaba</a></li><li>中文网站 ：<a href="https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md">https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md</a></li></ul></blockquote><h2 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><ul><li>Github ：<a href="https://github.com/alibaba/Nacos">https://github.com/alibaba/Nacos</a></li><li>官网 ：<a href="https://nacos.io/zh-cn/index.html">https://nacos.io/zh-cn/index.html</a></li><li>官方文档 ：<a href="https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html#_spring_cloud_alibaba_nacos_discovery">https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html#_spring_cloud_alibaba_nacos_discovery</a></li></ul></blockquote><h4 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h4><ul><li>一个更易于构建云原生应用的动态服务发现，配置管理和服务管理中心</li><li>Nacos就是注册中心+配置中心的组合</li><li>等价于 Netflix 中的 Eureka+Config+Bus</li></ul><h4 id="能干嘛？"><a href="#能干嘛？" class="headerlink" title="能干嘛？"></a>能干嘛？</h4><ul><li>替代 Eureka 做服务<strong>注册中心</strong></li><li>替代 Config 做服务<strong>配置中心</strong></li></ul><h4 id="与其他注册中心的对比"><a href="#与其他注册中心的对比" class="headerlink" title="与其他注册中心的对比"></a>与其他注册中心的对比</h4><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/nacos/nacos7.png"></p><h3 id="下载安装并运行"><a href="#下载安装并运行" class="headerlink" title="下载安装并运行"></a>下载安装并运行</h3><blockquote><p>下载地址：  <a href="https://github.com/alibaba/nacos/releases/tag/1.1.4">https://github.com/alibaba/nacos/releases/tag/1.1.4</a> </p><p>直接下载网址： <a href="https://github.com/alibaba/nacos/releases/download/1.1.4/nacos-server-1.1.4.zip">https://github.com/alibaba/nacos/releases/download/1.1.4/nacos-server-1.1.4.zip</a></p><p>解压安装包，直接运行bin目录下的startup.cmd</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/nacos/nacos1.png"></p><p>命令运行成功后直接访问 <a href="http://localhost:8848/nacos">http://localhost:8848/nacos</a></p><p>用户名 、密码 都是 nacos</p></blockquote><h3 id="服务注册发现"><a href="#服务注册发现" class="headerlink" title="服务注册发现"></a>服务注册发现</h3><h4 id="提供者"><a href="#提供者" class="headerlink" title="提供者"></a>提供者</h4><p>新建模块 cloudalibaba-provider-payment9001</p><p>pom依赖：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>       <span class="token comment">&lt;!-- springcloud alibaba nacos 依赖 --&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token comment">&lt;!-- springboot整合Web组件 --&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token comment">&lt;!-- 日常通用jar包 --&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.xhc.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>yml 配置：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9001</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>provider  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span> <span class="token comment">#配置nacos地址</span><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">'*'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主启动类:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentMain9001</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">PaymentMain9001</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>controller层：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${server.port}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> serverPort<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/payment/nacos/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPayment</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"nacos registry ,serverport :"</span><span class="token operator">+</span>serverPort<span class="token operator">+</span><span class="token string">"\t id"</span><span class="token operator">+</span>id<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试</p><p>启动 Nacos、alibaba-provider-payment-9001</p><p>查看 Nacos 界面</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/nacos/nacos2.png"></p><p><font color="red">Nacos 自带负载均衡机制</font>，下面创建第二个提供者。</p><p>在 alibaba-provider-payment-9001 的基础上再创建一个一模一样的项目 alibaba-provider-payment-9002 ，为了搭建一个简单的集群</p><ul><li>如果不想创建新项目，可以使用以下方法</li></ul><blockquote><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/nacos/nacos3.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/nacos/nacos4.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/nacos/nacos5.png"></p></blockquote><ul><li>再查看 Nacos 的界面</li></ul><blockquote><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/nacos/nacos6.jpg"></p></blockquote><h4 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h4><p>新建消费者 模块： cloudalibaba-customer-order80</p><p>pom文件：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- springboot整合Web组件 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 日常通用jar包 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.xhc.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>yml文件：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">83</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>order<span class="token punctuation">-</span>consumer  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span><span class="token comment">#消费者将要去访问的微服务名称（注册成功进nacos的微服务提供者）</span><span class="token key atrule">service-url</span><span class="token punctuation">:</span>  <span class="token key atrule">nacos-user-service</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//nacos<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>provider<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>nacos底层也是ribbon，注入ReatTemplate</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationContextConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@LoadBalanced</span>    <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">getRestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>controller :</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderNacosController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span>    <span class="token comment">//在yml里面写的提供者服务路径，  值为：nacos-payment-provider</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${service-url.nacos-user-service}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> serverURL<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/payment/nacos/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paymentInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>serverURL<span class="token operator">+</span><span class="token string">"/payment/nacos/"</span><span class="token operator">+</span>id<span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试</p><p>启动 Nacos 控制台<br>启动 9001、9002、83</p><p>访问：<a href="http://localhost:83/consumer/payment/nacos/111">http://localhost:83/consumer/payment/nacos/111</a></p><p>完成！</p><h4 id="各种注册中心进一步对比"><a href="#各种注册中心进一步对比" class="headerlink" title="各种注册中心进一步对比"></a>各种注册中心进一步对比</h4><ul><li>前面只是简单对比了一下，下面会更深层的对比</li><li><strong>Nacos全景图</strong></li></ul><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/nacos/nacos8.png"></p><ul><li><strong>Nacos 和 CAP</strong></li></ul><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/nacos/nacos9.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/nacos/nacos10.png"></p><ul><li><strong>Nacos支持AP和CP模式的切换</strong></li></ul><blockquote><ul><li><p>C是所有节点在同一时间看到的数据是一致的</p></li><li><p>A的定义是所有的请求都会收到响应。</p></li><li><p>一般来说，如果不需要存储服务级别的信息且服务实例是通过nacos-client注册，并能够保持心跳上报，那么就可以选择AP模式。当前主流的服务如 Sping cloud和Dubbo服务，都适用于AP模式，AP模式为了服务的可能性而减弱了一致性，因此AP模式下只支持注册临时实例。</p></li><li><p>如果需要在服务级别编辑或者存储配置信息，那么CP是必须，K8S服务和DNS服务则适用于CP模式.<br>CP模式下则支持注册持久化实例，此时则是以Raft协议为集群运行模式，该模式下注册实例之前必须先注册服务，如果服务不存在，则会返回错误。</p></li><li><p>切换命令 ：</p><p><code>curl -X PUT '$NACOS_SERVER:8848/nacos/v1/ns/operator/switches?entry=serverMode&amp;value=CP'</code></p></li></ul></blockquote><h3 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h3><h4 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h4><blockquote><p>nacos 还可以作为服务配置中心，下面是案例，创建一个模块，从nacos上读取配置信息。</p><p>nacos 作为配置中心，不需要像springcloud config 一样做一个Server端模块。</p></blockquote><p>新建模块 cloudalibaba-nacos-config3377</p><p>pom依赖：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token comment">&lt;!-- springboot整合Web组件 --&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token comment">&lt;!-- 日常通用jar包 --&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.xhc.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主启动类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CloudAlibabaConfigMain3377</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">CloudAlibabaConfigMain3377</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>bootstrap.yml 配置：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3377</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>config<span class="token punctuation">-</span>client  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>  <span class="token comment"># nacos作为服务注册中心</span>      <span class="token key atrule">config</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span> <span class="token comment"># nacos作为服务配置中心</span>        <span class="token key atrule">file-extension</span><span class="token punctuation">:</span> yaml <span class="token comment"># 指定yaml 格式的配置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>controller 层进行读取配置测试：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RefreshScope</span>  <span class="token comment">//支持nacos的动态刷新功能</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigClientController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${config.info}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> configInfo<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/config/info"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getConfigInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> configInfo<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>下面在 Nacos 中添加配置文件，需要遵循如下规则：</p><p>官网地址：<a href="https://nacos.io/zh-cn/docs/quick-start-spring-cloud.html">https://nacos.io/zh-cn/docs/quick-start-spring-cloud.html</a></p><p>在Nacos Spring Cloud中，<code>dataId</code>的完整格式如下：</p><pre class="line-numbers language-none"><code class="language-none">${prefix}-${spring.profile.active}.${file-extension}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>prefix</code> 默认为 <code>spring.application.name</code> 的值，也可以通过配置项 <code>spring.cloud.nacos.config.prefix</code>来配置。</li><li><code>spring.profiles.active</code> 即为当前环境对应的 profile，详情可以参考 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-profiles.html#boot-features-profiles">Spring Boot文档</a>。 <strong>注意：当 <code>spring.profiles.active</code> 为空时，对应的连接符 <code>-</code> 也将不存在，dataId 的拼接格式变成 <code>${prefix}.${file-extension}</code></strong></li><li><code>file-exetension</code> 为配置内容的数据格式，可以通过配置项 <code>spring.cloud.nacos.config.file-extension</code> 来配置。目前只支持 <code>properties</code> 和 <code>yaml</code> 类型。</li></ul></blockquote><p>从上面可以看到重要的一点，配置文件的名称第二项，spring.profiles.active 是依据当前环境的profile属性值的，也就是这个值如果是 dev，即开发环境，它就会读取 dev 的配置信息，如果是test，测试环境，它就会读取test的配置信息，就是从 spring.profile.active 值获取当前应该读取哪个环境下的配置信息。</p><p>所以要配置spring.profiles.active，新建application.yml文件，添加如下配置：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev <span class="token comment"># 表示开发环境</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>综合以上说明，和下面的截图，Nacos 的dataid（类似文件名）应为： nacos-config-client-dev.yaml  (必须是yaml)</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/nacos/nacos11.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/nacos/nacos12.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/nacos/nacos13.png"></p><p>当修改配置值，会发现 3377 上也已经修改，Nacos自带自动刷新功能！</p><h4 id="分类配置"><a href="#分类配置" class="headerlink" title="分类配置"></a>分类配置</h4><p><strong>存在的问题</strong></p><ul><li>问题1 ：</li></ul><blockquote><p>实际开发中，通常─个系统会准备:</p><ul><li><p>dev开发环境</p></li><li><p>test测试环境</p></li><li><p>prod生产环境</p></li></ul><p>如何保证指定环境启动时服务能正确读取到Nacos上相应环境的配置文件呢?</p></blockquote><ul><li>问题2:</li></ul><blockquote><p>一个大型分布式微服务系统会有很多微服务子项目，每个微服务项目又都会有相应的开发环境、测试环境、预发环境、正式环境…那怎么对这些微服务配置进行管理呢?</p></blockquote><p>nacos中的设计：</p><blockquote><p>Nacos 的 Group ,默认创建的配置文件，都是在DEFAULT_GROUP中，可以在创建配置文件时，给文件指定分组。</p><p>yml 配置如下，当修改开发环境时，只会从同一group中进行切换。</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/nacos/nacos14.png"></p><p>Nacos 的namespace ,默认的命名空间是public ,这个是不允许删除的，可以创建一个新的命名空间，会自动给创建的命名空间一个流水号。</p><p>在yml配置中，指定命名空间：</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/nacos/nacos15.png"></p><p>最后，dataid、group、namespace 三者关系如下：（不同的dataid，是相互独立的，不同的group是相互隔离的，不同的namespace也是相互独立的）</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/nacos/nacos16.png"></p></blockquote><h3 id="Nacos集群和持久化"><a href="#Nacos集群和持久化" class="headerlink" title="Nacos集群和持久化"></a>Nacos集群和持久化</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><blockquote><p>官方文档：<a href="https://nacos.io/zh-cn/docs/cluster-mode-quick-start.html">https://nacos.io/zh-cn/docs/cluster-mode-quick-start.html</a></p></blockquote><h5 id="集群架构图"><a href="#集群架构图" class="headerlink" title="集群架构图"></a>集群架构图</h5><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/nacos/nacos17.jpg"></p><p>对上图的理解</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/nacos/nacos18.png"></p><h5 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h5><blockquote><p>搭建集群必须持久化，不然多台机器上的nacos的配置信息不同，造成系统错乱。它不同于单个springcloud config，没有集群一说，而且数据保存在github上，也不同于eureka，配置集群就完事了，没有需要保存的配置信息。</p><p>Nacos默认使用它自带的嵌入式数据库derby:</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/nacos/nacos19.png"></p></blockquote><h4 id="Nacos持久化配置："><a href="#Nacos持久化配置：" class="headerlink" title="Nacos持久化配置："></a>Nacos持久化配置：</h4><blockquote><p>在 nacos的 conf目录下，有个nacos-mysql.sql 的sql文件，创建一个名为【nacos_config】的数据库，执行里面内容，在nacos_config数据库里面创建数据表。</p><p>找到conf/application.properties 文件，尾部追加如下内容：</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">spring.datasource.platform</span><span class="token punctuation">=</span><span class="token attr-value">mysql</span><span class="token attr-name">db.num</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token attr-name">db.url.0</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/nacos_config?characterEncoding=utf-8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</span><span class="token attr-name">db.user</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">db.password</span><span class="token punctuation">=</span><span class="token attr-value">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重启nacos，即完成持久化配置。</p></blockquote><h4 id="Linux版Nacos-MySQL生产环境配置"><a href="#Linux版Nacos-MySQL生产环境配置" class="headerlink" title="Linux版Nacos+MySQL生产环境配置"></a>Linux版Nacos+MySQL生产环境配置</h4><blockquote><p>现在进行企业中真正需要的nacos集群配置，而不是上面的单机模式，需要准备如下：</p><p>一台linux虚拟机：nginx服务器，3个nacos服务，一个mysql数据库。</p><p>nacos下载linux版本的 tar.gz 包：<a href="https://github.com/alibaba/nacos/releases/download/1.1.4/nacos-server-1.1.4.tar.gz">https://github.com/alibaba/nacos/releases/download/1.1.4/nacos-server-1.1.4.tar.gz</a></p></blockquote><p>Nacos集群配置</p><p>1.首先对 nacos 进行持久化操作，操作如上面一致。</p><p>2.修改 nacos/conf 下的cluster文件，最好先复制一份</p><ul><li><p>查看本机的IP</p><pre class="line-numbers language-none"><code class="language-none">hostname -i<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>编写 cluster.conf</p><p>前缀 IP 必须为上一步查到的 IP 地址</p><p>​    <img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/nacos/nacos20.png"></p></li><li><p>保存退出</p></li></ul><p>3.模拟三台nacos服务，编辑nacos的startup启动脚本，使他能够支持不同的端口启动多次。</p><ul><li>进入nacos/bin，找到startup.sh，最好先复制一份</li><li>编辑startup.sh</li></ul><p>​    <img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/nacos/nacos21.png"></p><p>​    <img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/nacos/nacos25.png"></p><p>​    <img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/nacos/nacos23.png"></p><p>​    <img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/nacos/nacos22.png"></p><ul><li>保存退出</li></ul><p>4.nginx配置负载均衡：</p><ul><li>进入/usr/local/nginx/conf，找到nginx.conf，最好先复制一份</li><li>编辑nginx.conf</li></ul><p>​    <img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/nacos/nacos24.png"></p><p>-保存退出</p><p>5.启动集群</p><ul><li><p>进入 /usr/local/nginx/sbin/目录</p></li><li><p>使用刚刚修改的配置文件启动 Nginx</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">.</span>/nginx <span class="token operator">-</span>c <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span>conf<span class="token operator">/</span>nginx<span class="token punctuation">.</span>conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>进入nacos/bin目录</p></li><li><p>启动nacos集群（3333、4444、5555）</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/nacos/nacos26.png"></p></li></ul><p>6.测试完成！</p><p>使用 9002模块注册进Nacos Server 并获取它上面配置文件的信息，进行测试。</p><blockquote><p>小总结</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/nacos/nacos28.png"></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringCloud-Alibaba&quot;&gt;&lt;a href=&quot;#SpringCloud-Alibaba&quot; class=&quot;headerlink&quot; title=&quot;SpringCloud Alibaba&quot;&gt;&lt;/a&gt;SpringCloud Alibaba&lt;/h1&gt;&lt;bloc</summary>
      
    
    
    
    <category term="笔记" scheme="http://mjean.life/categories/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="SpringCloud" scheme="http://mjean.life/categories/%E7%AC%94%E8%AE%B0/SpringCloud/"/>
    
    
    <category term="SpringCloud" scheme="http://mjean.life/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud笔记：Sleuth</title>
    <link href="http://mjean.life/posts/975bdb00.html"/>
    <id>http://mjean.life/posts/975bdb00.html</id>
    <published>2021-03-21T03:52:43.000Z</published>
    <updated>2022-04-18T12:48:45.644Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Sleuth"><a href="#Sleuth" class="headerlink" title="Sleuth"></a>Sleuth</h1><blockquote><p>分布式请求链路跟踪，超大型系统。需要在微服务模块极其多的情况下，比如80调用8001的，8001调用8002的，这样就形成了一个链路，如果链路中某环节出现了故障，我们可以使用Sleuth进行链路跟踪，从而找到出现故障的环节。</p></blockquote><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="分布式系统中存在的问题"><a href="#分布式系统中存在的问题" class="headerlink" title="分布式系统中存在的问题"></a>分布式系统中存在的问题</h3><p>在微服务框架中，一个由客户端发起的请求在后端系统中会经过多个不同的的服务节点调用来协同产生最后的请求结果，每一个前段请求都会形成─条复杂的分布式服务调用链路，链路中的任何一环出现高延时或错误都会引起整个请求最后的失败。</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sleuth/sleuth1.jpg"></p><h3 id="Sleuth简介"><a href="#Sleuth简介" class="headerlink" title="Sleuth简介"></a>Sleuth简介</h3><blockquote><p><a href="https://github.com/spring-cloud/spring-cloud-sleuth">官网</a></p><ul><li>Spring Cloud Sleuth提供了一套完整的服务跟踪的解决方案</li><li>在分布式系统中提供追踪解决方案并且兼容支持了 zipkin</li></ul><p>sleuth 负责跟踪，而zipkin负责展示。</p></blockquote><h3 id="zipkin"><a href="#zipkin" class="headerlink" title="zipkin"></a>zipkin</h3><ul><li><p>SpringCloud从F版起已不需要自己构建Zipkin server了，只需要调用jar包即可</p></li><li><p>zipkin 下载地址： <a href="http://dl.bintray.com/openzipkin/maven/io/zipkin/java/zipkin-server/2.12.9/zipkin-server-2.12.9-exec.jar">http://dl.bintray.com/openzipkin/maven/io/zipkin/java/zipkin-server/2.12.9/zipkin-server-2.12.9-exec.jar</a></p></li></ul><p>1.下载 zipkin</p><p>​    选择zipkin-server-<em>version</em>.exec.jar</p><p>2.运行 zipkin</p><p>​    使用 CMD 进入存放 zipkin.jar 的目录，并输入</p><pre class="line-numbers language-none"><code class="language-none">java -jar zipkin-server-2.12.9-exec.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sleuth/sleuth2.png"></p><p>3.查看仪表盘</p><p>​    访问：<a href="http://localhost:9411/zipkin/">http://localhost:9411/zipkin/</a></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sleuth/sleuth3.png"></p><ul><li>完整的调用链路</li></ul><blockquote><p>表示一条请求链路，一条链路通过 Trace ID 唯一标识，Span 标识发起的请求信息，各 Span 通过 parent id 关联起来</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sleuth/sleuth4.png"></p></blockquote><ul><li>上图简化</li></ul><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sleuth/sleuth5.png"></p><blockquote><ul><li>Trace : 类似于树结构的Span集合，表示一条调用链路，存在唯一标识</li><li>span ：表示调用链路来源，通俗的理解span就是一次请求信息</li></ul></blockquote><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><blockquote><p>使用之前的 提供者8001 和 消费者80</p></blockquote><p>分别给他们引入依赖：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 引入sleuth + zipkin --&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-zipkin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>yml增加配置：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">zipkin</span><span class="token punctuation">:</span>    <span class="token key atrule">base-url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">9411</span>  <span class="token comment"># zipkin 地址</span>  <span class="token key atrule">sleuth</span><span class="token punctuation">:</span>    <span class="token key atrule">sampler</span><span class="token punctuation">:</span>      <span class="token comment"># 采样率值 介于0-1之间 ，1表示全部采集</span>      <span class="token key atrule">probability</span><span class="token punctuation">:</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8001模块的Controller添加一个方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"payment/zipkin"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paymentZipkin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"hi , i am paymentzipkin server fall back, welcome!"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>80模块的Controller添加一个方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//=========================&gt; zipkin+sleuth</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/payment/zipkin"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paymentZipkin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">String</span> result <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8001"</span><span class="token operator">+</span><span class="token string">"/payment/zipkin/"</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><ul><li>启动以下服务</li></ul><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sleuth/sleuth6.png"></p><ul><li>调用服务消费者 80 端(多请求几次) ：<a href="http://localhost/consumer/payment/zipkin">http://localhost/consumer/payment/zipkin</a></li><li>查看 zipkin 的监控界面</li></ul><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sleuth/sleuth7.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sleuth/sleuth8.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sleuth/sleuth9.png"></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/sleuth/sleuth10.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Sleuth&quot;&gt;&lt;a href=&quot;#Sleuth&quot; class=&quot;headerlink&quot; title=&quot;Sleuth&quot;&gt;&lt;/a&gt;Sleuth&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;分布式请求链路跟踪，超大型系统。需要在微服务模块极其多的情况下，比如80调用800</summary>
      
    
    
    
    <category term="笔记" scheme="http://mjean.life/categories/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="SpringCloud" scheme="http://mjean.life/categories/%E7%AC%94%E8%AE%B0/SpringCloud/"/>
    
    
    <category term="SpringCloud" scheme="http://mjean.life/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud笔记：消息驱动-Stream</title>
    <link href="http://mjean.life/posts/96125f52.html"/>
    <id>http://mjean.life/posts/96125f52.html</id>
    <published>2021-03-20T03:54:13.000Z</published>
    <updated>2022-04-18T12:48:45.642Z</updated>
    
    <content type="html"><![CDATA[<h1 id="消息驱动"><a href="#消息驱动" class="headerlink" title="消息驱动"></a>消息驱动</h1><h2 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><strong>什么是SpringCloud Stream？</strong></p><ul><li>Spring Cloud Stream 是一个用来为微服务应用构建消息驱动能力的框架。</li><li>应用程序通过 Inputs或者 outputs来与 Spring Cloud Stream中 <strong>binder对象</strong>交互。</li><li>通过我们配置来 **binding(绑定)**，而 Spring Cloud Stream的 binder对象负责与消息中间件交互。</li><li>所以我们只需要搞清楚如何与 Spring Cloud Stream交互就可以方便使用消息驱动的方式。</li><li>通过使用 Spring Integration来连接消息代理中间件以实现消息事件驱动。</li><li>Spring Cloud Stream 为一些供应商的消息中间件产品提供了个性化的自动化配置实现，并引入了发布-订阅、消费组、分区这三个核心概念。</li><li>通过使用 Spring Cloud Stream，可以有效简化开发人员对消息中间件的使用复杂度，让系统开发人员可以有更多的精力关注于核心业务逻辑的处理。</li><li><font color="red">目前仅支持 RabbitMQ 和 Kafka 的自动化配置。</font></li></ul><p>概括：屏蔽底层消息中间件的差异，降低切换版本，统一消息的编程模型</p><blockquote><p><a href="https://m.wang1314.com/doc/webapp/topic/20971999.html">Spring Cloud Stream中文指导手册</a></p></blockquote><p><strong>设计思想</strong></p><p>​    1.标准MQ</p><blockquote><p> <img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/stream/stream1.jpg"></p><ul><li>生产者/消费者之间靠消息媒介传递信息内容 —— Message</li><li>消息必须走特定的通道 —— 消息通道 MessageChannel</li><li>消息通道里的消息如何被消费呢，谁负责收发处理 —— 消息通道 MessageChannel 的子接口 <strong>SubscribableChannel</strong>,由 <strong>MessageHandler</strong> 消息处理器订阅</li></ul></blockquote><p>​    2.为什么要引入SpringCloud Stream</p><blockquote><p>比方说我们用到了 RabbitMQ 和 Kafka ，由于这两个消息中间件的架构上的不同，像 RabbitMQ 有 exchange， kafka 有 Topic 和 Partitions 分区，</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/stream/stream2.jpg"></p><p>这些中间件的差异性导致我们实际项目开发给我们造成了一定的困扰，我们如果用了两个消息队列的其中一种，后面的业务需求，我想往另外一种消息队列进行迁移，这时候无疑就是一个灾难性的，一大堆东西都要重新推倒重新做，因为它跟我们的系统耦合了，这时候 springcloud Stream 给我们提供了—种解耦合的方式。</p></blockquote><p>​    3.SpringCloud Stream屏蔽差异</p><blockquote><ul><li>在没有绑定器这个概念的情况下，我们的 SpringBoot 应用要直接与消息中间件进行信息交互的时候,由于各消息中间件构建的初衷不同，它们的实现细节上会有较大的差异性</li><li>通过定义<strong>绑定器binder</strong>作为中间层，完美地实现了应用程序与消息中间件细节之间的隔离。</li><li>通过向应用程序暴露统一的Channel通道，使得应用程序不需要再考虑各种不同的消息中间件实现。</li></ul><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/stream/stream3.png"></p><ul><li>INPUT对应于生产者</li><li>OUTPUT对应于消费者</li></ul></blockquote><p>​    4.Stream中的消息通信方式遵循了 发布-订阅 模式</p><blockquote><ul><li>在 RabbitMQ 就是 Exchange 交换机</li><li>在kafka中就是Topic</li></ul></blockquote><p><strong>Spring Cloud Stream标准流程套路</strong></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/stream/stream4.png"></p><blockquote><p>1.Binder：很方便的连接中间件，屏蔽差异</p><p>2.Channel：通道，是队列Queue的一种抽象，在消息通讯系统中就是实现存储和转发的媒介，通过对Channel对队列进行配置</p><p>3.Source和Sink：简单的可理解为参照对象是Spring Cloud Stream自身，从Stream发布消息就是输出，接收消息就是输入</p></blockquote><p><strong>编码API和常用注解</strong></p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/stream/stream5.png"></p><h3 id="消息生产者"><a href="#消息生产者" class="headerlink" title="消息生产者"></a>消息生产者</h3><p>新建模块 cloud-stream-rabbitmq-provider8801 </p><p>pom依赖：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- stream-rabbit --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-stream-rabbit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--eureka-client 目前，这个不是必须的--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>yml 配置：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8801</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>stream<span class="token punctuation">-</span>provider  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">stream</span><span class="token punctuation">:</span>      <span class="token key atrule">binders</span><span class="token punctuation">:</span> <span class="token comment"># 在次配置要绑定的rabbitMQ的服务信息</span>        <span class="token key atrule">defaultRabbit</span><span class="token punctuation">:</span> <span class="token comment"># 表示定义的名称，用于和binding整合</span>          <span class="token key atrule">type</span><span class="token punctuation">:</span> rabbit  <span class="token comment"># 消息组件类型</span>          <span class="token key atrule">environment</span><span class="token punctuation">:</span>  <span class="token comment"># 设置rabbitmq的相关环境配置</span>            <span class="token key atrule">spring</span><span class="token punctuation">:</span>              <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>                <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost                <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>                <span class="token key atrule">username</span><span class="token punctuation">:</span> guest                <span class="token key atrule">password</span><span class="token punctuation">:</span> guest      <span class="token key atrule">bindings</span><span class="token punctuation">:</span>  <span class="token comment"># 服务的整合处理</span>        <span class="token key atrule">output</span><span class="token punctuation">:</span>   <span class="token comment"># 表示是生产者，向rabbitMQ发送消息</span>          <span class="token key atrule">destination</span><span class="token punctuation">:</span> studyExchange  <span class="token comment"># 表示要使用的Exchange名称</span>          <span class="token key atrule">content-type</span><span class="token punctuation">:</span> application/json  <span class="token comment"># 设置消息类型，本次是json，文本是 "text/plain"</span>          <span class="token key atrule">binder</span><span class="token punctuation">:</span> defaultRabbit  <span class="token comment"># 设置要绑定的消息服务的具体配置</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka/  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">lease-renewal-interval-in-seconds</span><span class="token punctuation">:</span> <span class="token number">2</span> <span class="token comment"># 设置心跳时间，默认是30秒</span>    <span class="token key atrule">lease-expiration-duration-in-seconds</span><span class="token punctuation">:</span> <span class="token number">5</span> <span class="token comment"># 最大心跳间隔不能超过5秒,默认90秒</span>    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> send<span class="token punctuation">-</span>8801.com <span class="token comment"># 在信息列表显示主机名称</span>    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 访问路径变为ip地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主启动类:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamMQProvider8801</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">StreamMQProvider8801</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>业务类：（此业务类不是以前的service，而是负责推送消息的服务类）</p><ul><li>发送消息接口</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IMessageProvider</span> <span class="token punctuation">{</span><span class="token comment">/** * @title send * @Description 发送消息 **/</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>发送消息接口实现类</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xhc<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">EnableBinding</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>messaging<span class="token punctuation">.</span></span><span class="token class-name">Source</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>messaging<span class="token punctuation">.</span></span><span class="token class-name">MessageChannel</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>messaging<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">MessageBuilder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>UUID<span class="token punctuation">;</span><span class="token annotation punctuation">@EnableBinding</span><span class="token punctuation">(</span><span class="token class-name">Source</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token comment">// 不是和controller打交道的service,而是发送消息的推送服务类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IMessageProviderImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IMessageProvider</span> <span class="token punctuation">{</span>     <span class="token comment">//上面是自定义的接口</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">MessageChannel</span> output<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> serial <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        output<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">MessageBuilder</span><span class="token punctuation">.</span><span class="token function">withPayload</span><span class="token punctuation">(</span>serial<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"******serial: "</span> <span class="token operator">+</span> serial<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>controller:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SendMessageController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">IMessageProvider</span> messageProvider<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/sendMessage"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> messageProvider<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>启动Eureka Server 7001，再启动8801，进行测试，看是否rabbitMQ中有我们发送的消息。</p><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/stream/stream6.png"></p></blockquote><h3 id="消息消费者"><a href="#消息消费者" class="headerlink" title="消息消费者"></a>消息消费者</h3><p>新建模块 cloud-stream-rabbitmq-consumer8802</p><p>pom依赖和生产者一样。</p><p>yml配置: 在 stream的配置上，和生产者只有一处不同的地方，output 改成 input</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8802</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>stream<span class="token punctuation">-</span>provider  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">stream</span><span class="token punctuation">:</span>      <span class="token key atrule">binders</span><span class="token punctuation">:</span> <span class="token comment"># 在次配置要绑定的rabbitMQ的服务信息</span>        <span class="token key atrule">defaultRabbit</span><span class="token punctuation">:</span> <span class="token comment"># 表示定义的名称，用于和binding整合</span>          <span class="token key atrule">type</span><span class="token punctuation">:</span> rabbit  <span class="token comment"># 消息组件类型</span>          <span class="token key atrule">environment</span><span class="token punctuation">:</span>  <span class="token comment"># 设置rabbitmq的相关环境配置</span>            <span class="token key atrule">spring</span><span class="token punctuation">:</span>              <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>                <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost                <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>                <span class="token key atrule">username</span><span class="token punctuation">:</span> guest                <span class="token key atrule">password</span><span class="token punctuation">:</span> guest      <span class="token key atrule">bindings</span><span class="token punctuation">:</span>  <span class="token comment"># 服务的整合处理</span>        <span class="token key atrule">input</span><span class="token punctuation">:</span>   <span class="token comment"># 表示是消费者，这里是唯一和生产者不同的地方，向rabbitMQ发送消息</span>          <span class="token key atrule">destination</span><span class="token punctuation">:</span> studyExchange  <span class="token comment"># 表示要使用的Exchange名称</span>          <span class="token key atrule">content-type</span><span class="token punctuation">:</span> application/json  <span class="token comment"># 设置消息类型，本次是json，文本是 "text/plain"</span>          <span class="token key atrule">binder</span><span class="token punctuation">:</span> defaultRabbit  <span class="token comment"># 设置要绑定的消息服务的具体配置</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka/  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">lease-renewal-interval-in-seconds</span><span class="token punctuation">:</span> <span class="token number">2</span> <span class="token comment"># 设置心跳时间，默认是30秒</span>    <span class="token key atrule">lease-expiration-duration-in-seconds</span><span class="token punctuation">:</span> <span class="token number">5</span> <span class="token comment"># 最大心跳间隔不能超过5秒,默认90秒</span>    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> receive<span class="token punctuation">-</span>8802.com <span class="token comment"># 在信息列表显示主机名称</span>    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 访问路径变为ip地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接收消息的业务类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">EnableBinding</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">StreamListener</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>messaging<span class="token punctuation">.</span></span><span class="token class-name">Sink</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>messaging<span class="token punctuation">.</span></span><span class="token class-name">Message</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@EnableBinding</span><span class="token punctuation">(</span><span class="token class-name">Sink</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${server.port}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> serverPort<span class="token punctuation">;</span>    <span class="token annotation punctuation">@StreamListener</span><span class="token punctuation">(</span><span class="token class-name">Sink</span><span class="token punctuation">.</span>INPUT<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token class-name">Message</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> message<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者1号，serverport: "</span> <span class="token operator">+</span> serverPort <span class="token operator">+</span> <span class="token string">"，接受到的消息："</span> <span class="token operator">+</span> message<span class="token punctuation">.</span><span class="token function">getPayload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置分组消费"><a href="#配置分组消费" class="headerlink" title="配置分组消费"></a>配置分组消费</h3><p>新建 cloud-stream-rabbitmq-consumer8803 模块：</p><blockquote><p>8803 就是 8802 clone出来的。</p></blockquote><p>启动两个消费者之后出现了问题：</p><ul><li>有重复消费问题(即两个消费者都接收到了消息，这属于重复消费。例如，消费者进行订单创建，这样就创建了两份订单，会造成系统错误。)</li><li>消息持久化问题</li></ul><blockquote><p>Stream默认不同的微服务是不同的组</p></blockquote><p><img src="http://image-hexo-hchan.test.upcdn.net/youpaiyun-image/study/springcloud/stream/stream7.png"></p><p>对于重复消费这种问题，导致的原因是默认每个微服务是不同的group，组流水号不一样，所以被认为是不同组，两个都可以消费。</p><p>解决的办法就是自定义配置分组：</p><p>消费者 yml 文件配置：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment"># 8802 的消费者</span><span class="token key atrule">bindings</span><span class="token punctuation">:</span>       <span class="token key atrule">input</span><span class="token punctuation">:</span>            <span class="token key atrule">destination</span><span class="token punctuation">:</span> studyExchange           <span class="token key atrule">content-type</span><span class="token punctuation">:</span> application/json           <span class="token key atrule">binder</span><span class="token punctuation">:</span> defaultRabbit           <span class="token key atrule">group</span><span class="token punctuation">:</span> xhcA  <span class="token comment"># 自定义分组配置</span>   <span class="token comment"># 8803 的消费者</span><span class="token key atrule">bindings</span><span class="token punctuation">:</span>       <span class="token key atrule">input</span><span class="token punctuation">:</span>            <span class="token key atrule">destination</span><span class="token punctuation">:</span> studyExchange           <span class="token key atrule">content-type</span><span class="token punctuation">:</span> application/json           <span class="token key atrule">binder</span><span class="token punctuation">:</span> defaultRabbit           <span class="token key atrule">group</span><span class="token punctuation">:</span> xhcB  <span class="token comment"># 自定义分组配置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>到现在只是自定义了分组</li><li>这两个服务还是在两个不同的组中，所以还是存在重复消费</li><li><strong>重复消费解决方案</strong></li></ul><blockquote><ul><li>8802 / 8803 实现轮询分组，每次只有一个消费者</li><li>8801 模块的发的消息只能被 8802 或 8803 其中一个接收到，这样避免了重复消费</li><li>将 8803 的分组修改为 <strong>xhcA</strong></li></ul></blockquote><p>当两个消费者配置的 group 都为 xhcA 时，就属于同一组，就不会被重复消费。</p><h3 id="消息持久化"><a href="#消息持久化" class="headerlink" title="消息持久化"></a>消息持久化</h3><blockquote><p>加上group配置，就已经实现了消息的持久化。</p></blockquote><p><strong>下面演示一下持久化的效果</strong></p><ol><li><p>先停止 8802、8803 服务</p></li><li><p>删去 8802 的 YML 中 Group，8803 的不删</p></li><li><p>8801 生产者先发送几条消息 </p><p> <a href="http://localhost:8801/sendMessage">http://localhost:8801/sendMessage</a></p></li><li><p>启动 8802 ，并观察控制台</p><p>控制台无输出，因为没有配置 Group，没有开启持久化，所以没有接收到消息</p></li><li><p>启动 8803 ，并观察控制台</p><p>控制台有输出，因为配置了 Group，开启了持久化，所以接收到了消息</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;消息驱动&quot;&gt;&lt;a href=&quot;#消息驱动&quot; class=&quot;headerlink&quot; title=&quot;消息驱动&quot;&gt;&lt;/a&gt;消息驱动&lt;/h1&gt;&lt;h2 id=&quot;Stream&quot;&gt;&lt;a href=&quot;#Stream&quot; class=&quot;headerlink&quot; title=&quot;Strea</summary>
      
    
    
    
    <category term="笔记" scheme="http://mjean.life/categories/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="SpringCloud" scheme="http://mjean.life/categories/%E7%AC%94%E8%AE%B0/SpringCloud/"/>
    
    
    <category term="SpringCloud" scheme="http://mjean.life/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud笔记：服务配置-Config、消息总线-Bus</title>
    <link href="http://mjean.life/posts/411dcfac.html"/>
    <id>http://mjean.life/posts/411dcfac.html</id>
    <published>2021-03-18T04:46:23.000Z</published>
    <updated>2022-04-18T12:48:45.789Z</updated>
    
    <content type="html"><![CDATA[<h1 id="服务配置"><a href="#服务配置" class="headerlink" title="服务配置"></a>服务配置</h1><h2 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h2><blockquote><p>SpringCloud Config 分布式配置中心</p></blockquote><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>在分布式系统中，由于服务数量巨多，为了方便服务配置文件统一管理，实时更新，所以需要分布式配置中心组件。Spring Cloud Config项目是就是这样一个解决分布式系统的配置管理方案。它包含了Client和Server两个部分，server提供配置文件的存储、以接口的形式将配置文件的内容提供出去，client通过接口获取数据、并依据此数据初始化自己的应用。</p><p><strong>作用：</strong></p><blockquote><p>1.集中统一管理配置文件;</p><p>2.不同环境不同配置，动态化的配置更新，分环境部署;</p><p>3.运行期间动态调整配置，不再需要在每个服务部署的机器上编写配置文件，服务会向配置中心统一拉取配置自己的信息;</p><p>4.当配置发生变动时，服务不需要重启即可感知到配置的变化并应用新的配置;</p><p>5.将配置信息以REST接口的形式暴露;</p></blockquote><p><strong>与github整合配置：</strong></p><p>由于SpringCloud Config默认使用Git来存储配置文件（也有其它方式，比如支持svn和本地文件，但最推荐的还是Git，而且使用的是http/https访问的形式）</p><p>1.在github上新建一个Repository：springcloud-config</p><p>2.获取新建仓库地址：<a href="mailto:git@github.com">git@github.com</a>:XXXX/springcloud-config.git</p><p>3.本地磁盘新建git仓库并clone</p><pre class="line-numbers language-GIT" data-language="GIT"><code class="language-GIT">mkdir SpringCloud2020git clone git@github.com:XXXX/springcloud-config.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h3 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h3><p>新建 cloud-config-center3344 模块：</p><p>pom文件：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>       <span class="token comment">&lt;!-- config Server --&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-config-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token comment">&lt;!--eureka-client config Server也要注册进服务中心--&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.xhc.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>yml 配置：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3344</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>config<span class="token punctuation">-</span>center <span class="token comment">#注册进Eureka服务器的微服务名</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>      <span class="token key atrule">server</span><span class="token punctuation">:</span>        <span class="token key atrule">git</span><span class="token punctuation">:</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/HChan<span class="token punctuation">-</span>X/springcloud<span class="token punctuation">-</span>config.git <span class="token comment">#Github上面的git仓库名字</span>          <span class="token comment">####搜索目录</span>          <span class="token key atrule">search-paths</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> springcloud<span class="token punctuation">-</span>config      <span class="token comment">####读取分支</span>      <span class="token key atrule">label</span><span class="token punctuation">:</span> main<span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><p>yml中 uri: <a href="mailto:git@github.com">git@github.com</a>:HChan-X/springcloud-config.git</p><p>配置远程仓库访问时会报错</p><pre class="line-numbers language-error" data-language="error"><code class="language-error">Cannot clone or checkout repository: git@github.com:HChan-X/springcloud-config.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改成 <a href="https://github.com/HChan-X/springcloud-config.git">https://github.com/HChan-X/springcloud-config.git</a> 即可</p><p>主启动类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableConfigServer</span>   <span class="token comment">//关键注解</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigCenterMain3344</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ConfigCenterMain3344</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加映射：【C:\Windows\System32\drivers\etc\hosts】文件中添加：  127.0.0.1 config-3344.com </p><p>测试通过Config微服务是否可以从Github上获取配置内容</p><p>1）启动7001</p><p>2）启动3344</p><p>3）访问<a href="http://config-3344.com:3344/main/config-dev.yml">http://config-3344.com:3344/main/config-dev.yml</a> 文件（注意，要提前在git上弄一个这文件）</p><p>4）成功实现了用SpringCloud Config 通过GitHub获取配置信息</p><p>配置读取规则<br>1)<strong>/{label}/{application}-{profile}.yml</strong>（最推荐使用这种方式）</p><p>2)<strong>/{application}-{profile}.yml</strong></p><p>3)<strong>/{application}-{profile}[/{label}]</strong></p><p><strong>总结：</strong></p><blockquote><p><strong>{application}</strong> 就是应用名称，对应到配置文件上来，就是配置文件的名称部分，例如我上面创建的配置文件。</p><p><strong>{profile}</strong> 就是配置文件的版本，我们的项目有开发版本、测试环境版本、生产环境版本，对应到配置文件上来就是以 application-{profile}.yml 加以区分，例如application-dev.yml、application-sit.yml、application-prod.yml。</p><p><strong>{label}</strong> 表示 git 分支，默认是 main 分支，如果项目是以分支做区分也是可以的，那就可以通过不同的 label 来控制访问不同的配置文件了。</p></blockquote><p>只要格式正确，还是能正常访问，但如果不存在配置，是没有配置数据出现的，如果输入的不是正确的格式，乱输入，是会出现404的。</p><h3 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h3><blockquote><p>这里的客户端指的是，使用 Config Server 统一配置文件的项目。既有之前说的消费者，又有提供者</p></blockquote><p>新建 cloud-config-client-3355 模块：</p><p>pom文件：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>       <span class="token comment">&lt;!-- config Client 和 服务端的依赖不一样 --&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token comment">&lt;!--eureka-client config Server也要注册进服务中心--&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.xhc.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>bootstrap.yml文件:</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3355</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> config<span class="token punctuation">-</span>client  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token comment"># config 客户端配置</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>      <span class="token key atrule">label</span><span class="token punctuation">:</span> main <span class="token comment"># 分支名称</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> config <span class="token comment"># 配置文件名称，文件也可以是client-config-dev.yml这种格式的，这里就写 client-config </span>      <span class="token key atrule">profile</span><span class="token punctuation">:</span> dev <span class="token comment"># 使用配置环境</span>      <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//config<span class="token punctuation">-</span>3344.com<span class="token punctuation">:</span><span class="token number">3344</span>  <span class="token comment"># config Server 地址</span>      <span class="token comment"># 综合上面四个 即读取配置文件地址为： http://config-3344.com:3344/master/config-dev.yml</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>说明：</strong></p><blockquote><ul><li>applicaiton.yml 是用户级的资源配置项</li><li>bootstrap.yml 是系统级的，优先级更加高</li><li>Spring Cloud 会创建一个 <strong>Bootstrap Context</strong> ，作为 Spring 应用的 <strong>Application Context</strong> 的父上下文。初始化的时候，<strong>BootstrapContext</strong> 负责从外部源加载配置属性并解析配置。这两个上下文共享一个从外部获取的 <strong>Environment</strong> </li><li>Bootstrap 属性有高优先级，默认情况下，它们不会被本地配置覆盖。Bootstrap context 和 Application Context 有着不同的约定，所以新增了一个 bootstrap.yml 文件，保证 Bootstrap Context 和 Application Context 配置的分离</li><li>要将 Client 模块下的 application.yml 文件改为 bootstrap.yml ,这是很关键的，因为 bootstrap.yml 是比 application.yml 先加载的。bootstrap.yml 优先级高于 application.yml</li></ul></blockquote><p>主启动类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigClientMain3355</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ConfigClientMain3355</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>controller层，测试读取配置信息</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xhc<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigClientController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${config.info}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> configInfo<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/configInfo"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getConfigInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> configInfo<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动测试完成！如果报错，注意github上的 yml 格式有没有写错！ </p><h3 id="动态刷新"><a href="#动态刷新" class="headerlink" title="动态刷新"></a>动态刷新</h3><p>问题：</p><p>1）修改GitHub上的配置文件内容：<br>config:<br>    info: “master branch,springcloud-config/config-dev.yml version=2”</p><p>2）刷新3344，发现ConfigServer配置中心立刻响应</p><p>3）刷新3355，发现ConfigServer客户端没有任何响应</p><p>4）3355没有变化除非自己重启或者重新加载</p><blockquote><p>就是github上面配置更新了，config Server 项目上是动态更新的，但是，client端的项目中的配置，目前还是之前的，它不能动态更新，必须重启才行。</p></blockquote><p>解决：</p><ol><li><p>client端一定要有如下依赖：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">&lt;dependency<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>org.springframework.boot&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>starter<span class="token punctuation">-</span>actuator&lt;/artifactId<span class="token punctuation">&gt;</span>&lt;/dependency<span class="token punctuation">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>client 端增加 yml 配置如下，即在 bootstrap.yml 文件中：</p></li></ol><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment"># 暴露监控端点</span><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">"*"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>在controller 上添加注解：@RefreshScope</li></ol><blockquote><p>到此为止，配置已经完成，但是测试仍然不能动态刷新，需要下一步。</p></blockquote><ol start="4"><li>发送Post请求刷新3355 （必须是post请求。打开命令行窗口执行以下命令）</li></ol><blockquote><p>curl -X POST “<a href="http://localhost:3355/actuator/refresh&quot;">http://localhost:3355/actuator/refresh"</a></p><p>两个必须：1.必须是 POST 请求，2.请求地址：<a href="http://localhost:3355/actuator/refresh">http://localhost:3355/actuator/refresh</a></p></blockquote><p>成功！</p><p>但是又有一个问题，就是如果多个客户端该怎么解决？不可能每一个都去发送post请求刷新！</p><p>就有下面的消息总线！</p><h1 id="消息总线"><a href="#消息总线" class="headerlink" title="消息总线"></a>消息总线</h1><h2 id="Bus"><a href="#Bus" class="headerlink" title="Bus"></a>Bus</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>Spring Cloud Bus 是用来将分布式系统的节点与轻量级消息系统链接起来的框架，整合了java的事件处理机制和消息中间件功能。</p><p>目前支持RabbitMQ和Kafka两种消息代理。</p><p>能管理和传播分布式系统间的消息，就像是一个分布式执行器，可用于广播状态更改、事件推送等，也可以当做微服务间的通信通道。</p><p>1.分布式自动刷新配置功能</p><p>2.Spring Cloud Bus配合Spring Cloud Config使用可以实现配置的动态刷新</p><p>3.Bus支持两种消息代理：RabbitMQ和Kafka</p><h3 id="安装RabbitMQ"><a href="#安装RabbitMQ" class="headerlink" title="安装RabbitMQ"></a>安装RabbitMQ</h3><blockquote><p>在windows 上安装RabbitMQ</p></blockquote><ol><li>安装RabbitMQ的依赖环境 Erlang  下载地址： <a href="http://erlang.org/download/otp_win64_21.3.exe">http://erlang.org/download/otp_win64_21.3.exe</a> </li><li>安装RabbitMQ   下载地址： <a href="http://dl.bintray.com/rabbitmq/all/rabbitmq-server/3.7.14/rabbitmq-server-3.7.14.exe">http://dl.bintray.com/rabbitmq/all/rabbitmq-server/3.7.14/rabbitmq-server-3.7.14.exe</a> </li><li>进入 rabbitMQ安装目录的sbin目录下，打开cmd窗口，执行 【rabbitmq-plugins enable rabbitmq_management】</li><li>可视化插件，rabbitMQservice - start 点击启动服务</li><li>访问【<a href="http://localhost:15672/%E3%80%91%EF%BC%8C%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E5%92%8C%E8%B4%A6%E5%8F%B7%EF%BC%9A%E9%BB%98%E8%AE%A4%E9%83%BD%E4%B8%BA">http://localhost:15672/】，输入密码和账号：默认都为</a> guest</li></ol><h3 id="广播式刷新配置"><a href="#广播式刷新配置" class="headerlink" title="广播式刷新配置"></a>广播式刷新配置</h3><p><strong>设计思想：</strong></p><blockquote><p>两种方式：</p><p>1.利用消息总线触发一个客户端/bus/refresh,从而刷新所有客户端的配置</p><p>2.利用消息总线触发一个服务端ConfigServer的/bus/refresh端点,而刷新所有客户端的配置（更加推荐）</p><p>第一种方式不适合的原因：</p><p>1.打破了微服务的职责单一性，因为微服务本身是业务模块，它本不应该承担配置刷新职责</p><p>2.破坏了微服务各节点的对等性</p><p>3.有一定的局限性。例如，微服务在迁移时，它的网络地址常常会发生变化，此时如果想要做到自动刷新，那就会增加更多的修改</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/HChan-X/image/pictures/study/bus1.png"></p><p>按照之前的 3344（config Server）和  3355（config client）,在原有的基础上增加一个config client：3366模块（直接copy3355就行了）。</p><p>pom文件：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--eureka-client--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>bootstrap.yml文件：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3366</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> config<span class="token punctuation">-</span>client  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token comment">#config客户端配置</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>      <span class="token key atrule">label</span><span class="token punctuation">:</span> main <span class="token comment">#分支名称</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> config <span class="token comment">#配置文件名称</span>      <span class="token key atrule">profile</span><span class="token punctuation">:</span> dev <span class="token comment">#读取后缀名称  上述3个综合：main分支上config-dev.yml的配置文件被读取http://config-3344.com:3344/main/config-dev.yml</span>      <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">3344</span> <span class="token comment">#配置中心地址</span><span class="token comment">#服务注册到Eureka地址</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>7001/eureka<span class="token comment">#暴露监控端点</span><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">"*"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主启动类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigClientMain3366</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ConfigClientMain3366</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>controller层，测试读取配置信息:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RefreshScope</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigClientController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${server.port}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> serverPort<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${config.info}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> configInfo<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/configInfo"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">configInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"serverPort: "</span><span class="token operator">+</span>serverPort<span class="token operator">+</span><span class="token string">"\t\n\n configInfo: "</span><span class="token operator">+</span>configInfo<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>给config Server 和 config client添加消息总线支持</p><p>在 config Server 和 config client 都添加如下依赖：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 添加rabbitMQ的消息总线支持包 --&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-bus-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>config Server 的yml文件增加如下配置：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment"># rabbitMq的相关配置</span><span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>  <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>  <span class="token comment"># 这里没错，虽然rabbitMQ网页是 15672</span>  <span class="token key atrule">username</span><span class="token punctuation">:</span> guest  <span class="token key atrule">password</span><span class="token punctuation">:</span> guest<span class="token comment"># rabbitmq 的相关配置2 暴露bus刷新配置的端点</span><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">'bus-refresh'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>config Client 的yml文件修改成如下配置：（注意对齐方式，和config Server不一样）</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> config<span class="token punctuation">-</span>client  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token comment"># config 客户端配置</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>      <span class="token key atrule">label</span><span class="token punctuation">:</span> main         <span class="token comment"># 分支名称</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> config       <span class="token comment"># 配置文件名称</span>      <span class="token key atrule">profile</span><span class="token punctuation">:</span> dev      <span class="token comment"># 使用配置环境</span>      <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//config<span class="token punctuation">-</span>3344.com<span class="token punctuation">:</span><span class="token number">3344</span>  <span class="token comment"># config Server 地址</span>  <span class="token comment"># 综合上面四个 即读取配置文件地址为： http://config-3344.com:3344/master/config-dev.yml</span>  <span class="token comment"># rabbitMq的相关配置</span>  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> guest    <span class="token key atrule">password</span><span class="token punctuation">:</span> guest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可在github上修改yml文件进行测试，修改完文件，向 config server 发送 请求：</p><p>【curl -X POST “<a href="http://localhost:3344/actuator/bus-refresh&quot;%E3%80%91">http://localhost:3344/actuator/bus-refresh"】</a></p><blockquote><p>注意，之前是向config client 一个个发送请求，但是这次是向 config Server 发送请求，而所有的config client 的配置也都全部更新。</p></blockquote><h3 id="定点通知"><a href="#定点通知" class="headerlink" title="定点通知"></a>定点通知</h3><p>指定具体某一个实例生效而不是全部</p><p><strong>公式：<a href="http://localhost:配置中心的端口号/actuator/bus-refresh/">http://localhost:配置中心的端口号/actuator/bus-refresh/</a><font color="red">{destination}</font></strong></p><blockquote><p>/bus/refresh请求不再发送到具体的服务实例上，而是发给config server并通过destination参数类指定需要更新配置的服务实例</p></blockquote><p>我们在这里以刷新运行在3355端口上的config-client为例（只通知3355，不通知3366）</p><pre class="line-numbers language-none"><code class="language-none">curl -X POST "http://localhost:3344/actuator/bus-refresh/config-client:3355"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的config-client:3355 就是 <strong>微服务名称+端口号</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;服务配置&quot;&gt;&lt;a href=&quot;#服务配置&quot; class=&quot;headerlink&quot; title=&quot;服务配置&quot;&gt;&lt;/a&gt;服务配置&lt;/h1&gt;&lt;h2 id=&quot;Config&quot;&gt;&lt;a href=&quot;#Config&quot; class=&quot;headerlink&quot; title=&quot;Confi</summary>
      
    
    
    
    <category term="笔记" scheme="http://mjean.life/categories/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="SpringCloud" scheme="http://mjean.life/categories/%E7%AC%94%E8%AE%B0/SpringCloud/"/>
    
    
    <category term="SpringCloud" scheme="http://mjean.life/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud笔记：服务网关-Gateway</title>
    <link href="http://mjean.life/posts/a62febd7.html"/>
    <id>http://mjean.life/posts/a62febd7.html</id>
    <published>2021-03-16T06:09:31.000Z</published>
    <updated>2022-04-18T12:48:45.634Z</updated>
    
    <content type="html"><![CDATA[<h1 id="服务网关"><a href="#服务网关" class="headerlink" title="服务网关"></a>服务网关</h1><h2 id="Gateway"><a href="#Gateway" class="headerlink" title="Gateway"></a>Gateway</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><strong>Spring Cloud Gateway是 Spring Cloud的一个全新项目，基于 Spring5.0+Spring Boot2.0和 Project Reactor等技术开发的网关,它旨在为微服务架构提供一种简单有效的统的API路由管理方式。</strong></p><p><strong>Spring Cloud Gateway作为 Spring Cloud生态系统中的网关，目标是替代Zuul,、，在 Spring Cloud2.0以上版本中,没有对新版本的Zuul2.0以上最新高性能版本进行集成，仍然还是使用的Zuul 1.x非 Reactor模式的老版本。而为了提升网关的性能, SpringCloud Gateway是基于 Webfluxi框架实现的,而 Webflux框架底层则使用了高性能的 Reactor模式通信框架Netty。</strong></p><p><strong>Spring Cloud Gateway的目标提供统一的路由方式且基于 Filter 链的方式提供了网关基本的功能,例如:安全,监控/指标,和限流。</strong></p><blockquote><p><font color="blue">SpringCloud Gateway使用的Webflux中的reactor-netty响应式编程组件，底层使用了Netty通讯框架。</font></p></blockquote><p>Gateway特性：</p><blockquote><p>基于 Spring Framework 5, Project Reactor和 Spring Boot2.0进行构建;</p><p>动态路由：能够匹配任何请求属性;</p><p>可以对路由指定 Predicate(断言) 和 Filter(过滤器);</p><p>集成 Hystrix的断路器功能;</p><p>集成 Spring cloud 服务发现功能</p><p>易于编写的 Predicate(断言) 和 Filter(过滤器);</p><p>请求限流功能;</p><p>支持路径重写。</p></blockquote><p>三大核心概念：</p><ul><li>Route路由：路由是构建网关的基本模块，它由ID、目标URI、一系列的断言和过滤器组成，如果断言为true则匹配该路由</li><li>Predicate断言：开发人员可以匹配Http请求中的所有内容（例如请求头、请求参数）如果请求与断言相匹配则进行路由（参考:Java8:java.util.function.Predicate）</li><li>Filter过滤：指的是Spring框架中GatewayFilter的实例，使用过滤器，可以在请求被路由之前或者之后对请求进行修改</li></ul><p>一句话概述：</p><blockquote><p>web请求，通过一些匹配条件，定位到真正的服务节点，并在这个转发过程的前后进行一些精细化控制。<br>predicate就是我们的匹配条件，而filter就可以理解为一个无所不能的拦截器。有了这两个元素，再加上目标uri，就可以实现一个具体的路由了</p></blockquote><p>工作流程：</p><p><img src="https://cdn.jsdelivr.net/gh/HChan-X/image/pictures/study/gateway/gateway1.png"></p><ul><li>客户端向SpringCloud Gateway发出请求，然后在GateWay Handler<br>Mapping中找到与请求相匹配的路由，将其发送到Gateway Web Hander；</li><li>Handler再通过指定的过滤器链来将请求发送到我们实际的服务执行业务逻辑，然后返回。过滤器之间用虚线分开是因为过滤器可能在发送代理请求之前（“pre”）或之后（“post”）执行业务逻辑</li><li>Filter在“pre”类型的过滤器中可以做参数校验、权限校验、流量监控、日志输出、协议转换等；在“post”类型的过滤器中可以做响应内容、响应头的修改、日志输出、流量监控等有着非常重要的作用。</li></ul><p><strong>核心逻辑：路由转发+执行过滤器链</strong></p><hr><h3 id="入门配置"><a href="#入门配置" class="headerlink" title="入门配置"></a>入门配置</h3><p>新建模块 cloud-gateway-gateway9527</p><blockquote><p>现在实现，通过Gateway (网关) 来访问其它项目，这里选择之前8001项目，要求注册进Eureka Server 。</p></blockquote><p>pom文件：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--gateway--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--eureka-client gateWay作为网关，也要注册进服务中心--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- gateway和web不能同时存在，即web相关jar包不能导入 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.xhc.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>yml文件：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">server:  port: 9527spring:  application:    name: cloud-gateway  ## GateWay配置  cloud:    gateway:      routes:        - id: payment_routh  # 路由ID ， 没有固定的规则但要求唯一，建议配合服务名          uri: http://localhost:8001  # 匹配后提供服务的路由地址          predicates:            - Path=/payment/get/**  # 断言，路径相匹配的进行路由        - id: payment_routh2  # 路由ID ， 没有固定的规则但要求唯一，建议配合服务名          uri: http://localhost:8001  # 匹配后提供服务的路由地址          predicates:            - Path=/payment/lb/**  # 断言，路径相匹配的进行路由# 注册进 eureka Servereureka:  client:    service-url:      defaultZone: http://eureka7001.com:7001/eureka/    register-with-eureka: true    fetch-registry: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主启动类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GateWayMain9527</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">GateWayMain9527</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问测试：1 启动eureka Server7001，2 启动 8001 项目，3 启动9527（Gateway项目）</p><blockquote><p>可见，当我们访问 <a href="http://localhost:9527/payment/get/1">http://localhost:9527/payment/get/1</a> 时，即访问网关地址时，会给我们转发到 8001 项目的请求地址，以此作出响应。</p><p>加入网关前：<a href="http://localhost:8001/payment/get/1">http://localhost:8001/payment/get/1</a></p><p>加入网关后：<a href="http://localhost:9527/payment/get/1">http://localhost:9527/payment/get/1</a></p></blockquote><p>上面是以 yml 文件配置的路由，也有使用config类配置的方式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GateWayConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RouteLocator</span> <span class="token function">customRouteLocator</span><span class="token punctuation">(</span><span class="token class-name">RouteLocatorBuilder</span> routeLocatorBuilder<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">RouteLocatorBuilder</span><span class="token punctuation">.</span><span class="token class-name">Builder</span> routes <span class="token operator">=</span> routeLocatorBuilder<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        routes<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"path_route"</span><span class="token punctuation">,</span>                r <span class="token operator">-&gt;</span> r<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">"/guonei"</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"http://news.baidu.com/guonei"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> routes<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="动态配置"><a href="#动态配置" class="headerlink" title="动态配置"></a>动态配置</h3><blockquote><p>这里所谓的动态配置就是利用服务注册中心，来实现 负载均衡 的调用 多个微服务。</p><p>注意，这是Gateway 的负载均衡</p></blockquote><p>对yml进行配置：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">spring:  application:    name: cloud-gateway  cloud:    gateway:      discovery:        locator:          enabled: true # 开启从注册中心动态创建路由的功能，利用微服务名进行路由      routes:        - id: payment_routh  # 路由ID ， 没有固定的规则但要求唯一，建议配合服务名         # uri: http://localhost:8001  # 匹配后提供服务的路由地址          uri: lb://CLOUD-PROVIDER-SERVICE          predicates:            - Path=/payment/get/**  # 断言，路径相匹配的进行路由        - id: payment_routh2  # 路由ID ， 没有固定的规则但要求唯一，建议配合服务名        #  uri: http://localhost:8001  # 匹配后提供服务的路由地址          uri: lb://CLOUD-PROVIDER-SERVICE          predicates:            - Path=/payment/lb/**  # 断言，路径相匹配的进行路由# uri: lb://CLOUD-PROVIDER-SERVICE  解释：lb 属于GateWay 的关键字，代表是动态uri，即代表使用的是服务注册中心的微服务名，它默认开启使用负载均衡机制 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>下面可以开启 8002 模块，并将它与8001同微服务名，注册到 Eureka Server 进行测试。</p></blockquote><h3 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate</h3><blockquote><p>常用的Predicate：<a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/#gateway-request-predicates-factories">官方文档</a></p></blockquote><p>部分代码示例：</p><p>修改yml gateway的配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">predicates</span><span class="token punctuation">:</span>    <span class="token comment"># 断言，路径相匹配的进行路由</span>    <span class="token punctuation">-</span> Path=/payment/get/<span class="token important">**</span>    <span class="token comment">#- After=2020-08-03T15:45:34.102+08:00[Asia/Shanghai]</span>    <span class="token comment">#- Before=2017-01-20T17:42:47.789-07:00[America/Denver]</span>    <span class="token comment">#- Cookie=username,zzyy</span>    <span class="token comment">#- Header=X-Request-Id, \d+ #请求头要有X-Request-Id属性，并且值为正数</span>    <span class="token comment">#- Host=**.atguigu.com</span>    <span class="token comment">#- Method=GET</span>    <span class="token comment">#- Query=username, \d+ # 要有参数名username并且值还要是正整数才能路由</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ul><li>After=2020-08-03T15:45:34.102+08:00[Asia/Shanghai]：需要在这个时间之后生效。Before同理！</li><li>Cookie：Cookie Route Predicate 需要两个参数，一个是Cookie name，一个是正则表达式。路由规则会通过获取对应的Cookie name 值和正则表达式去匹配，如果匹配上就会执行路由。</li><li>Header：两个参数：一个是属性名称和一个正则表达式，这个属性值和正则表达式匹配则执行。</li><li>Host：Host Route Predicate 接收一组参数，一组匹配的域名列表，这个模板是一个ant分隔的模板，用.号作为分隔符。它通过参数中的主机地址作为匹配规则。</li></ul><p>配置错误页面:</p><blockquote><p>注意，springboot默认/static/error/ 下错误代码命名的页面为错误页面，即 404.html</p><p>而且不需要导入额外的包，Gateway 里面都有。</p></blockquote><h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><blockquote><p><a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/#gatewayfilter-factories">官方文档</a></p></blockquote><p>Filter分类：Gateway Fliter（单一31种）、Global Filter（全局–10种）</p><p>自定义过滤器类实现GlobalFilter，Orderd接口即可<br>　　<br>可以全局日志记录、统一网关鉴权</p><p>自定义全局过滤器配置类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GateWayFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GlobalFilter</span><span class="token punctuation">,</span> <span class="token class-name">Ordered</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------come in MyGlobalFilter : "</span><span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> uname <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueryParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token string">"uname"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//合法性检验</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>uname <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----用户名为null,非法用户，请求不被接受"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//设置 response 状态码   因为在请求之前过滤的，所以就算是返回NOT_FOUND 也不会返回错误页面</span>            exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>NOT_FOUND<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//完成请求调用</span>            <span class="token keyword">return</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//返回值是加载顺序，一般全局的都是第一位加载</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/HChan-X/image/pictures/study/gateway/gateway2.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/HChan-X/image/pictures/study/gateway/gateway3.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;服务网关&quot;&gt;&lt;a href=&quot;#服务网关&quot; class=&quot;headerlink&quot; title=&quot;服务网关&quot;&gt;&lt;/a&gt;服务网关&lt;/h1&gt;&lt;h2 id=&quot;Gateway&quot;&gt;&lt;a href=&quot;#Gateway&quot; class=&quot;headerlink&quot; title=&quot;Gat</summary>
      
    
    
    
    <category term="笔记" scheme="http://mjean.life/categories/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="SpringCloud" scheme="http://mjean.life/categories/%E7%AC%94%E8%AE%B0/SpringCloud/"/>
    
    
    <category term="SpringCloud" scheme="http://mjean.life/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud笔记：Hystrix断路器</title>
    <link href="http://mjean.life/posts/8c98e87.html"/>
    <id>http://mjean.life/posts/8c98e87.html</id>
    <published>2021-03-05T12:55:32.917Z</published>
    <updated>2022-04-18T12:48:45.783Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hystrix-断路器"><a href="#Hystrix-断路器" class="headerlink" title="Hystrix 断路器"></a>Hystrix 断路器</h1><blockquote><p>官方地址：<a href="https://github.com/Netflix/Hystrix/wiki/How-To-Use">https://github.com/Netflix/Hystrix/wiki/How-To-Use</a></p></blockquote><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><font color="blue"><strong>服务雪崩</strong></font><br><strong>多个微服务之间调用的时候，假设微服务A调用微服务B和微服务C,微服务B和微服务C又调用其它的微服务，这就是所谓的<font color="red">“扇出“</font>。如果扇出的链路上某个微服务的调用响应时间过长或者不可用，对微服务A的调用就会占用越来越多的系统资源，进而引起系统崩溃,所谓的“雪崩效应”。</strong></p><p><strong>对于高流量的应用来说，单一的后端依赖可能会导致所有服务器上的所有资源都在几秒钟内饱和。比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，备份队列，线程和其他系统资源紧张，导致整个系统发生更多的级联故障。这些都表示需要对故障和延迟进行隔离和管理，以便单个依赖关系的失败，不能取消整个应用程序或系统。</strong></p><p><strong>Hystrix是一个用于处理分布式系统的<font color="red">延迟</font>和<font color="red">容错</font>的开源库，在分布式系统里，许多依赖不可避免的会调用失败,比如超时、异常等，Hystrix能够保证在一个依赖出问题的情况下，<font color="red">不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性。</font></strong></p><p><strong>”断路器”本身是一种开关装置,当某个服务单元发生故障之后,通过断路器的故障监控(类似熔断保险丝)，<font color="red">向调用方返回个符合预期的、可处理的备选响应(Fallback)，而不是长时间的等待或者抛出调用方无法处理的异常</font>，这样就保证了服务调用方的线程不会被长时间、不必要地占用，从而避免了故障在分布式系统中的蔓延,乃至雪崩。</strong></p><p><strong>Hystrix的作用</strong></p><blockquote><ol><li>对通过第三方客户端库访问的依赖项（通常是通过网络）的延迟和故障进行保护和控制。</li><li>在复杂的分布式系统中阻止级联故障。</li><li>快速失败，快速恢复。</li><li>回退，尽可能优雅地降级。</li><li>启用近实时监控、警报和操作控制。</li></ol></blockquote><p>服务降级：</p><blockquote><p>服务器忙碌或者网络拥堵时，不让客户端等待并立刻返回一个友好提示，fallback发生的情况有：</p><ul><li>程序运行异常</li><li>超时</li><li>服务熔断触发服务降级</li><li>线程池/信号量打满也会导致服务降级</li></ul></blockquote><p>服务熔断：</p><blockquote><p>类比保险丝达到最大服务访问后，直接拒绝访问，拉闸限电，然后调用服务降级的方法并返回友好提示就是保险丝。<strong>服务的降级-&gt;进而熔断-&gt;恢复调用链路</strong></p></blockquote><p>服务限流：</p><blockquote><p> 秒杀高并发等操作，严禁一窝蜂的过来拥挤，大家排队，一秒钟n个，有序进行</p></blockquote><p><strong>可见，上面的技术不论是消费者还是提供者，根据真实环境都是可以加入配置的。</strong></p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><blockquote><p>首先构建一个eureka作为服务中心的单机版微服务架构 ，这里使用之前eureka Server 7001模块，作为服务中心</p></blockquote><p>新建 提供者  cloud-provider-hystrix-payment8001 模块：</p><p>pom 文件：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>       <span class="token comment">&lt;!--hystrix--&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--引入自己定义的api通用包，可以使用Payment 支付 Entity--&gt;</span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.xhc.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面主启动类、service、和controller</p><p>主启动类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token punctuation">(</span>exclude <span class="token operator">=</span> <span class="token class-name">DataSourceAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentMain8001</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">PaymentMain8001</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>service层：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentService</span> <span class="token punctuation">{</span>     <span class="token comment">/**     * 正常访问，肯定OK     * @param id     * @return     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paymentInfo_OK</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"线程池： "</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" paymentInfo_OK,id:  "</span><span class="token operator">+</span>id<span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span><span class="token string">"哈哈"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"paymentInfo_TimeOutHandler"</span><span class="token punctuation">,</span>            commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"execution.isolation.thread.timeoutInMilliseconds"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"5000"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paymentInfo_TimeOut</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//暂停几秒钟线程</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"线程池： "</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" paymentInfo_TimeOut,id:  "</span><span class="token operator">+</span>id<span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span><span class="token string">"哈哈"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>controller层：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">PaymentService</span> paymentService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${server.port}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> serverPort<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/payment/hystrix/ok/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paymentInfo_OK</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> paymentService<span class="token punctuation">.</span><span class="token function">paymentInfo_OK</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"*******result: "</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/payment/hystrix/timeout/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paymentInfo_TimeOut</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> paymentService<span class="token punctuation">.</span><span class="token function">paymentInfo_TimeOut</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"*******result: "</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="模拟高并发"><a href="#模拟高并发" class="headerlink" title="模拟高并发"></a>模拟高并发</h3><blockquote><p>这里使用一个新工具 JMeter 压力测试器</p><p>下载压缩包，解压，双击 /bin/ 下的 jmeter.bat 即可启动</p><p><img src="https://cdn.jsdelivr.net/gh/HChan-X/image/pictures/study/hystrix/h1.png"></p><p><img src="https://cdn.jsdelivr.net/gh/HChan-X/image/pictures/study/hystrix/h2.png"></p><p>ctrl + S 保存。</p><p><img src="https://cdn.jsdelivr.net/gh/HChan-X/image/pictures/study/hystrix/h3.png"></p></blockquote><p>从测试可以看出，当模拟的超长请求被高并发以后，访问普通的小请求速率也会被拉低。</p><p>新建消费者 cloud-customer-feign-hystrix-order80 模块：以feign为服务调用，eureka为服务中心的模块，yml、pom等文件不再赘写。</p><p>测试可见，当启动高并发测试时，消费者访问也会变得很慢，甚至出现超时报错。</p><p>解决思路：</p><p><img src="https://cdn.jsdelivr.net/gh/HChan-X/image/pictures/study/hystrix/h4.png"></p><h3 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h3><blockquote><p>一般服务降级放在客户端，即 消费者端 ，但是提供者端一样能使用。</p><p>首先提供者，即8001 先从自身找问题，设置自身调用超时的峰值，峰值内正常运行，超出峰值需要有兜底的方法处理，作服务降级fallback</p></blockquote><p>首先 对 8001 的service进行配置（对容易超时的方法进行配置) :</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"paymentInfo_timeoutHandler"</span><span class="token punctuation">,</span> commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token comment">//设置峰值，超过 3 秒，就会调用兜底方法，这个时间也可以由feign控制</span>            <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"execution.isolation.thread.timeoutInMilliseconds"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"3000"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paymentinfo_Timeout</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>会执行<span class="token number">5</span>秒<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token comment">//兜底方法，根据上述配置，程序内发生异常、或者运行超时，都会执行该兜底方法</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paymentInfo_timeoutHandler</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 主启动类添加注解： @EnableCircuitBreaker</p><p>然后对 80 进行服务降级：很明显 service 层是接口，所以我们对消费者，在它的 controller 层进行降级</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"paymentInfo_timeoutHandler"</span><span class="token punctuation">,</span> commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>           <span class="token comment">//设置峰值，超过 3 秒，就会调用兜底方法</span>           <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"execution.isolation.thread.timeoutInMilliseconds"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"3000"</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/customer/payment/hystrix/timeout/{id}"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paymentInfo_Timeout</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>       log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"paymentInfo_timeout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> orderService<span class="token punctuation">.</span><span class="token function">paymentInfo_Timeout</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token comment">//兜底方法，注意，兜底方法参数随意</span>   <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paymentInfo_timeoutHandler</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>       log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"paymentInfo_timeout--handler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token string">"访问 payment 失败"</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主启动类添加注解： @EnableCircuitBreaker</p><p>完成测试！ 注意，消费者降级设置的超时时间和提供者的没有任何关系，就算提供者峰值是 5 秒，而消费者峰值是 3秒，那么消费者依然报错。就是每个模块在服务降级上，都是独立的。</p><h3 id="全局服务降级"><a href="#全局服务降级" class="headerlink" title="全局服务降级"></a>全局服务降级</h3><blockquote><p>上面的降级策略，很明显造成了两个问题：</p><p>1、每个方法有一个对应的处理方法，代码膨胀。</p><p>2、处理方法和主业务逻辑混合在一起。</p><p>解决方案：将降级处理方法（兜底方法）做一个全局的配置，设置共有的兜底方法和独享的兜底方法。</p></blockquote><p>问题1：每个方法有一个对应的处理方法，代码膨胀。解决：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Slf4j</span><span class="token comment">//全局配置降级方法的注解</span><span class="token annotation punctuation">@DefaultProperties</span><span class="token punctuation">(</span>defaultFallback <span class="token operator">=</span> <span class="token string">"paymentInfo_timeoutHandler"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment">// 不写自己的 fallbackMethod 属性，就使用全局默认的</span>    <span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"execution.isolation.thread.timeoutInMilliseconds"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"3000"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/customer/payment/hystrix/timeout/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paymentInfo_Timeout</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token comment">//兜底方法</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paymentInfo_timeoutHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"paymentInfo_timeout--handler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"访问 payment 失败"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>问题2：处理方法和主业务逻辑混合在一起。解决（解耦）：</p><blockquote><p>在这种方式一般是在客户端，即消费者端，首先上面再controller中添加的  @HystrixCommand 和 @DefaultProperties 两个注解去掉。就是保持原来的controller</p></blockquote><ol><li>yml文件配置</li></ol><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>customer<span class="token punctuation">-</span>feign<span class="token punctuation">-</span>hystrix<span class="token punctuation">-</span>service<span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka/<span class="token comment"># 用于服务降级 在注解@FeignClient 中添加 fallback 属性值</span><span class="token key atrule">feign</span><span class="token punctuation">:</span>  <span class="token key atrule">hystrix</span><span class="token punctuation">:</span>    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 在feign中开启 hystrix</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>修改service 接口：</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token comment">// 这里是重点</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"CLOUD-PROVIDER-HYSTRIX-PAYMENT"</span><span class="token punctuation">,</span> fallback <span class="token operator">=</span> <span class="token class-name">OrderFallbackService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/payment/hystrix/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paymentInfo_OK</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/payment/hystrix/timeout/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paymentInfo_Timeout</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>fallback 指向的类：</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xhc<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token comment">//注意这里，它实现了service接口</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderFallbackService</span> <span class="token keyword">implements</span>  <span class="token class-name">OrderService</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paymentInfo_OK</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"OrderFallbackService --发生异常"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paymentInfo_Timeout</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"OrderFallbackService --发生异常--paymentInfo_Timeout"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么，如何设置超时时间？</p><blockquote><p>首先要知道 下面两个 yml 配置项：</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">hystrix.command.default.execution.timeout.enable</span><span class="token punctuation">=</span><span class="token attr-value">true    ## 默认值</span><span class="token comment">## 为false则超时控制有ribbon控制，为true则hystrix超时和ribbon超时都使用，但是谁小谁生效，默认为true</span><span class="token attr-name">hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds</span><span class="token punctuation">=</span><span class="token attr-value">1000  ## 默认值</span><span class="token comment">## 熔断器的超时时长默认1秒，最常修改的参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以：</p><p>只需要在yml配置里面配置 Ribbon 的 超时时长即可。<strong>注意：hystrix 默认自带 ribbon包。</strong></p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">ribbon</span><span class="token punctuation">:</span><span class="token key atrule">ReadTimeout</span><span class="token punctuation">:</span> xxxx<span class="token key atrule">ConnectTimeout</span><span class="token punctuation">:</span> xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h3><blockquote><p>实际上服务熔断 和 服务降级 没有任何关系，就像 java 和 javaScript</p></blockquote><p><strong><font color="blue">熔断机制概述</font></strong><br><strong>熔断机制是应对雪崩效应的一种微服务链路保护机制。当扇岀链路的某个微服务岀错不可用或者响应时间太长时，会进行服务的降级,进而熔断该节点微服务的调用，快速返回错误的响应信息。</strong><br><strong><font color="blue">当检测到该节点微服务调用响应正常后,恢复调用链路</font>。</strong></p><p><strong>在Spring Cloud框架里,熔断机制通过Hystrix实现。 Hystrix会监控微服务间调用的状况,当失败的调用到定阈值,缺省是5秒内20次调用失败,就会启动熔断机制。熔断机制的注解是@HystrixCommand。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/HChan-X/image/pictures/study/hystrix/h5.png"></p><p><img src="https://cdn.jsdelivr.net/gh/HChan-X/image/pictures/study/hystrix/h6.png"></p><p><strong>Hystrix断路器使用时最常用的三个重要参数：</strong></p><p><strong><font color="blue">circuitBreaker.sleepWindowInMilliseconds（快照时间窗）</font></strong></p><blockquote><p>断路器确定是否打开需要统计一些请求和错误数据，而统计的时间范围就是快照时间窗，默认为最近的10秒。</p></blockquote><p><strong><font color="blue">circuitBreaker.requestVolumeThreshold（请求总数阀值）</font></strong></p><blockquote><p>在快照时间窗内，<strong>必须满足请求总数阀值才有资格熔断</strong>。默认为20，意味着在10秒内，如果该hystrix命令的调用次数不足20次，即使所有的请求都超时或其他原因失败，断路器都不会打开。</p></blockquote><p><strong><font color="blue">circuitBreaker.errorThresholdPercentage（错误百分比阀值）</font></strong></p><blockquote><p>当请求总数在快照时间窗内超过了阀值，比如发生了30次调用，如果在这30次调用中，有15次发生了超时异常，<strong>也就是超过50%的错误百分比</strong>，在默认设定50%阀值情况下，这时候就会将断路器打开。</p></blockquote><p><strong>综上所述，在以上三个参数缺省的情况下，Hystrix断路器触发的默认策略为：</strong></p><blockquote><p>在10秒内，发生20次以上的请求时，假如错误率达到50%以上，则断路器将被打开。（当一个窗口期过去的时候，断路器将变成半开（HALF-OPEN）状态，如果这时候发生的请求正常，则关闭，否则又打开）</p></blockquote><p>以 8001 项目为示例：</p><p>service层的方法设置服务熔断:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//=====服务熔断</span>  <span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"paymentCircuitBreaker_fallback"</span><span class="token punctuation">,</span> commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>          <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"circuitBreaker.enabled"</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 是否开启断路器</span>          <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"circuitBreaker.requestVolumeThreshold"</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">//请求次数</span>          <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"circuitBreaker.sleepWindowInMilliseconds"</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">"10000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 时间窗口期</span>          <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"circuitBreaker.errorThresholdPercentage"</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">"60"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 失败率达到多少后跳闸</span>          <span class="token comment">//整体意思：10秒内 10次请求，有6次失败，就跳闸</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paymentCircuitBreaker</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment">//模拟发生异常</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>id <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"*****id，不能为负数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token class-name">String</span> serialNumber <span class="token operator">=</span> <span class="token class-name">IdUtil</span><span class="token punctuation">.</span><span class="token function">simpleUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> <span class="token string">"调用成功，流水号："</span> <span class="token operator">+</span> serialNumber<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paymentCircuitBreaker_fallback</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">"id 不能为负数，请稍后再试...."</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>controller:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//====服务熔断</span>   <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/payment/circuit/{id}"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paymentCircuitBreaker</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span> paymentService<span class="token punctuation">.</span><span class="token function">paymentCircuitBreaker</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于解耦以后的全局配置说明：</p><p>例如上面提到的全局服务降级，并且是feign+hystrix整合，即 service 实现类的方式，如何做全局配置？</p><blockquote><p>上面有 做全局配置时，设置超时时间的方式，我们可以从中获得灵感，即在yml文件中 进行熔断配置：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">hystrix</span><span class="token punctuation">:</span><span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token key atrule">default</span><span class="token punctuation">:</span>   <span class="token key atrule">circuitBreaker</span><span class="token punctuation">:</span>     <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>     <span class="token key atrule">requestVolumeThreshold</span><span class="token punctuation">:</span> <span class="token number">10</span>     <span class="token key atrule">sleepWindowInMilliseconds</span><span class="token punctuation">:</span> <span class="token number">10000</span>     <span class="token key atrule">errorThresholdPercentage</span><span class="token punctuation">:</span> <span class="token number">60</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="Hystrix-DashBoard"><a href="#Hystrix-DashBoard" class="headerlink" title="Hystrix DashBoard"></a>Hystrix DashBoard</h2><p><strong>除了隔离依赖服务的调用以外， Hystrix还提供了<font color="red">准实时的调用监控( Hystrix Dashboard)</font>，Hystrix会持续地记录所有通过 Hystrix发起的请求的执行信息，并以统计报表和图形的形式展示给用户，包括每秒执行多少请求多少成功，多少失败等。 Netflix通过hystrix-metrics-event- stream项目实现了对以上指标的监控。 Spring Cloud也提供了 Hystrix Dashboard的整合,对监控内容转化成可视化界面。</strong></p><p>新建模块 cloud-hystrix-dashboard9001 ：</p><p>pom 文件：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-hystrix-dashboard<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>yml文件只需要配置端口号，主启动类加上这样注解：@EnableHystrixDashboard</p><p>启动测试：访问  <a href="http://ocalhost:9001/hystrix">http://ocalhost:9001/hystrix</a></p><h3 id="监控实战"><a href="#监控实战" class="headerlink" title="监控实战"></a>监控实战</h3><blockquote><p>下面使用上面 9001 Hystrix Dashboard 项目，来监控 8001 项目 Hystrix 的实时情况：</p><p>注意：新版本Hystrix需要在主启动类中指定监控路径</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">ServletRegistrationBean</span> <span class="token function">getServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">HystrixMetricsStreamServlet</span> streamServlet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HystrixMetricsStreamServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ServletRegistrationBean</span> servletRegistrationBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span>streamServlet<span class="token punctuation">)</span><span class="token punctuation">;</span>        servletRegistrationBean<span class="token punctuation">.</span><span class="token function">setLoadOnStartup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        servletRegistrationBean<span class="token punctuation">.</span><span class="token function">addUrlMappings</span><span class="token punctuation">(</span><span class="token string">"/hystrix.stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        servletRegistrationBean<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"HystrixMetricsStreamServlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> servletRegistrationBean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/HChan-X/image/pictures/study/hystrix/h7.png"></p><p><img src="https://cdn.jsdelivr.net/gh/HChan-X/image/pictures/study/hystrix/h8.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Hystrix-断路器&quot;&gt;&lt;a href=&quot;#Hystrix-断路器&quot; class=&quot;headerlink&quot; title=&quot;Hystrix 断路器&quot;&gt;&lt;/a&gt;Hystrix 断路器&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;官方地址：&lt;a href=&quot;https:/</summary>
      
    
    
    
    <category term="笔记" scheme="http://mjean.life/categories/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="SpringCloud" scheme="http://mjean.life/categories/%E7%AC%94%E8%AE%B0/SpringCloud/"/>
    
    
    <category term="SpringCloud" scheme="http://mjean.life/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud笔记：服务调用</title>
    <link href="http://mjean.life/posts/e74c79f1.html"/>
    <id>http://mjean.life/posts/e74c79f1.html</id>
    <published>2021-03-01T12:41:25.000Z</published>
    <updated>2022-04-18T12:48:45.639Z</updated>
    
    <content type="html"><![CDATA[<h1 id="服务调用"><a href="#服务调用" class="headerlink" title="服务调用"></a>服务调用</h1><blockquote><p>都是使用在 client端，即有 ”消费者“ 需求的模块中。</p></blockquote><h2 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><strong>Spring Cloud Ribbon是基于 Netflix Ribbon实现的一套客户端</strong>一一<font color="red"><strong>负载均衡的工具</strong></font>。</p><p><strong>简单的说, Ribbon是Netflix发布的开源项目,主要功能是提供<font color="red">客户端的软件负载均衡算法和服务调用</font>。 Ribbon客户端组件提供一系列完善的配置项如连接超时,重试等。简单的说,就是在配置文件中列出Load Balancer(筒称LB)后面所有的机器, Ribbon会自动的帮助你基于某种规则(如简单轮询,随机连接等)去连接这些机器。我们很容易使用Ribbon实现自定义的负载均衡算法。</strong></p><p><font color="blue"><strong>LB负载均衡(Load Balance)是什么</strong></font><br><strong>简单的说就是将用户的请求平摊的分配到多个服务上,从而达到系统的HA(高可用)。</strong><br><strong>常见的负载均衡有软件Nginx,LVS,硬件F5等。</strong></p><p><font color="blue"><strong>Ribbon本地负载均衡客户端 VS Nginx服务端负载均衡区别</strong></font><br><strong>Nginx是服务器负载均衡,客户端所有请求都会交给nginx,然后由nginx实现转发请求。即负载均衡是由服务端实现的。</strong></p><p><strong>Ribbon本地负载均衡,在调用微服务接口时候,会在注册中心上获取注册信息服务列表之后缓存到JVM本地,从而在本地实现RPC远程服务调用技术。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/HChan-X/image/pictures/study/Ribbon/rb1.png"></p><blockquote><p><strong>Ribbon在工作时分成两步</strong><br><strong>第一步先选择 Eurekaserver,它优先选择在同一个区域内负载较少的server。</strong><br><strong>第二步再根据用户指定的策略，在从server取到的服务注册列表中选择一个地址。</strong><br><strong>其中Ribbon提供了多种策略:比如轮询、随机和根据响应时间加权。</strong></p></blockquote><p>上面在eureka时，确实实现了负载均衡机制，那是因为 eureka-client包里面自带着ribbon：</p><blockquote><p>一句话，Ribbon 就是 负载均衡 + RestTemplate 调用。实际上不止eureka的jar包有，zookeeper的jar包，还有consul的jar包都包含了他，就是上面使用的服务调用。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/HChan-X/image/pictures/study/Ribbon/rb2.png"></p><p>如果自己添加，在 模块的 pom 文件中引入：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-ribbon<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>对于RestTemplate 的一些说明：</p><blockquote><p>有两种请求方式：post和get ,还有两种返回类型：object 和 Entity </p><p>例如<br><code>getForObject</code>返回对象为响应体中数据转化为的对象，基本上可以理解为Json<br><code>getForEntity</code>返回对象为ResponseEntity对象，包含了响应中的一些重要信息，比如响应头、响应状态码、响应体等</p><p>RestTemplate 的 <code>ForEntity</code> 相比 <code>ForObject</code>特殊的地方:</p><p>就是 如果使用 ForObject 得到的就是提供者返回的对象，而如果要使用 ForEntity 得到时 ResponstEntity对象，使用getBody()才能得到提供者返回的数据。</p><p><img src="https://cdn.jsdelivr.net/gh/HChan-X/image/pictures/study/Ribbon/rb3.png"></p></blockquote><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p><strong>Ribbon 负载均衡规则类型：</strong></p><blockquote><ul><li><strong>com.netflix.loadbalancer.RoundRobinRule: 轮询</strong></li><li><strong>com.netflix.loadbalancer.RandomRule: 随机</strong></li><li><strong>com.netflix.loadbalancer.RetryRule: 先按照RoundRobinRule的策略获取服务,如果获取服务失败则在指定时间内会进行重试,获取可用的服务</strong></li><li><strong>WeightedResponseTimeRule: 对RoundRobinRule的扩展,响应速度越快的实例选择权重越大,越容易被选择</strong></li><li><strong>BestAvailableRule: 先过滤掉由于多次访问故障而处于断路器跳闻状态的服务,然后选择一个并发量最小的服务</strong></li><li><strong>AvailabilityFilteringRule: 先过滤掉故障实例,再选择并发较小的实例</strong></li><li><strong>ZoneAvoidanceRule: 默认规则,复合判断server所在区域的性能和server的可用性选择服务器</strong></li></ul></blockquote><p>配置负载均衡规则：</p><blockquote><p><font color="blue"><strong>官方文档明确给出了警告:</strong></font></p><p><strong>这个自定义配置类</strong><font color="red"><strong>不能放在@ComponentScan所扫描的当前包下以及子包下,</strong></font>&nbsp;</p><p><strong>否则我们自定义的这个配置类就会被所有的Ribbon客户端所共享,达不到特殊化定制的目的了。</strong></p><p><strong>注意上面说的，而Springboot主启动类上的 @SpringBootApplication 注解，相当于加了@ComponentScan注解，会自动扫描当前包及子包，所以注意不要放在SpringBoot主启动类的包内。</strong></p></blockquote><p>创建包：</p><p><img src="https://cdn.jsdelivr.net/gh/HChan-X/image/pictures/study/Ribbon/rb4.png"></p><p>在这个包下新建 MySelfRule类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xhc<span class="token punctuation">.</span>myrule</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>loadbalancer<span class="token punctuation">.</span></span><span class="token class-name">IRule</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>loadbalancer<span class="token punctuation">.</span></span><span class="token class-name">RandomRule</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token comment">/** * @author xhc * @date 2021/3/1 10:04 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySelfRule</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">IRule</span> <span class="token function">myRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RandomRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//负载均衡规则定义为随机</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在主启动类上添加如下注解 @RibbonClient：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xhc<span class="token punctuation">.</span>springcloud</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>dkf<span class="token punctuation">.</span>myrule<span class="token punctuation">.</span></span><span class="token class-name">MySelfRule</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>discovery<span class="token punctuation">.</span></span><span class="token class-name">EnableDiscoveryClient</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>eureka<span class="token punctuation">.</span></span><span class="token class-name">EnableEurekaClient</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>ribbon<span class="token punctuation">.</span></span><span class="token class-name">RibbonClient</span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token annotation punctuation">@EnableDiscoveryClient</span>   <span class="token comment">//指定该负载均衡规则对哪个提供者服务使用    加载自定义规则的配置类</span><span class="token annotation punctuation">@RibbonClient</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"CLOUD-PROVIDER-SERVICE"</span><span class="token punctuation">,</span> configuration <span class="token operator">=</span> <span class="token class-name">MySelfRule</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderMain80</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">OrderMain80</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="轮询算法原理"><a href="#轮询算法原理" class="headerlink" title="轮询算法原理"></a>轮询算法原理</h3><p><font color="red"><strong>负载均衡算法:rest接口第几次请求数 % 服务器集群总数量=实际调用服务器位置下标,毎次服务重启动后rest接口计数从1开始。</strong></font></p><p><code>List&lt;ServiceInstance&gt; instances= discoveryClient.getInstances("CLOUD-PAYMENT-SERVICE");</code></p><p>如： </p><p><strong><em>List[0] instances = 127.0.0.1:8002</em></strong><br><strong><em>List[1] instances = 127.0.0.1:8001</em></strong></p><p> <strong>8001+8002组合成为集群,它们共计2台机器,集群总数为2,按照轮询算法原理：</strong><br> <strong>当总请求数为1时:1 % 2 = 1对应下标位置为1,则获得服务地址为127.0.0.1:8001</strong><br> <strong>当总请求数位2时:2 % 2 = 0对应下标位置为0,则获得服务地址为127.0.0.1:8002</strong><br> <strong>当总请求数位3时:3 % 2 = 1对应下标位置为1,则获得服务地址为127.0.0.1:8001</strong><br> <strong>当总请求数位4时:4 % 2 = 0对应下标位置为0,则获得服务地址为127.0.0.1:8002</strong><br> <strong>如此类推….</strong></p><p><strong>ribbon部分源码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">incrementAndGetModulo</span><span class="token punctuation">(</span><span class="token keyword">int</span> modulo<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> current<span class="token punctuation">;</span>    <span class="token keyword">int</span> next<span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nextServerCyclicCounter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        next <span class="token operator">=</span> <span class="token punctuation">(</span>current <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> modulo<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>nextServerCyclicCounter<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> next<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>手写一个负载的算法:CAS+自旋锁</strong></p><p>首先8001、8002服务controller层加上</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/payment/lb"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPaymentLB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> SERVER_PORT<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>LoadBalancer接口:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xhc<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>lb</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">ServiceInstance</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LoadBalancer</span> <span class="token punctuation">{</span>    <span class="token class-name">ServiceInstance</span> <span class="token function">instances</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceInstance</span><span class="token punctuation">&gt;</span></span> serviceInstances<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xhc<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>lb</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">ServiceInstance</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicInteger</span><span class="token punctuation">;</span><span class="token comment">/** * @author xhc * @date 2021/3/1 11:13 */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLB</span> <span class="token keyword">implements</span> <span class="token class-name">LoadBalancer</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">AtomicInteger</span> atomicInteger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> current<span class="token punctuation">;</span>        <span class="token keyword">int</span> next<span class="token punctuation">;</span>        <span class="token keyword">do</span><span class="token punctuation">{</span>            current<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>atomicInteger<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            next <span class="token operator">=</span> current <span class="token operator">&gt;=</span> <span class="token number">2147483647</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> current<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>atomicInteger<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*******第几次访问，次数next:"</span><span class="token operator">+</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">ServiceInstance</span> <span class="token function">instances</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceInstance</span><span class="token punctuation">&gt;</span></span> serviceInstances<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> serviceInstances<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> serviceInstances<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>controller类中添加:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/payment/lb"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPaymentLB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceInstance</span><span class="token punctuation">&gt;</span></span> instances <span class="token operator">=</span> discoveryClient<span class="token punctuation">.</span><span class="token function">getInstances</span><span class="token punctuation">(</span><span class="token string">"CLOUD-PAYMENT-SERVICE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>instances <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> instances<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">ServiceInstance</span> serviceInstance<span class="token operator">=</span>loadBalancer<span class="token punctuation">.</span><span class="token function">instances</span><span class="token punctuation">(</span>instances<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">URI</span> uri <span class="token operator">=</span> serviceInstance<span class="token punctuation">.</span><span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>uri<span class="token operator">+</span><span class="token string">"/payment/lb"</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="OpenFeign"><a href="#OpenFeign" class="headerlink" title="OpenFeign"></a>OpenFeign</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote><p>这里和之前学的dubbo很像，例如消费者的controller 可以调用提供者的 service层方法，但是不一样，它貌似只能调用提供者的 controller，即写一个提供者项目的controller的接口，消费者来调用这个接口方法，就还是相当于是调用提供者的 controller ，和RestTemplate 没有本质区别。</p></blockquote><p><font color="blue"><strong>Feign能干什么</strong></font><br><strong>Feign旨在使编写Java Http客户端变得更容易。</strong><br><strong>前面在使用Ribbon+RestTemplate时,利用RestTemplate对http请求的封装处理,形成了一套模版化的调用方法。但是在实际开发中,由于对服务依赖的调用可能不止一处,<font color="red">往往一个接口会被多处调用,所以通常都会针对每个微服务自行封装珰客户端类来包装这些依赖服务的调用.</font>所以,Feign在此基础上做了进一步封装,由他来帮助我们定义和实现依赖服务接口的定义。在Feigη的实现下,<font color="red">我们只需创建一个接口并使用注解的方式来配置它(以前是Dao接口上面标注Mappe注解，现在是一个微服务接口上面标注一个Feign注解即可)</font>,即可完成对服务提供方的接口绑定,简化了使用 Spring cloud Ribbon时,自动封装服务调用客户端的开发量。</strong></p><p><font color="blue"><strong>Feign集成了Ribbon</strong></font><br><strong>利用Ribbon维护了Payment的服务列表信息,并且通过轮询实现了客户端的负载均衡。而与Ribbon不同的是,<font color="red">通过feign只需要定义服务绑定接口且以声明式的方法</font>,优雅而简单的实现了服务调用.</strong></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><blockquote><p>新建一个消费者募模块。<font color="red">feign自带负载均衡配置</font>，所以不用手动配置</p></blockquote><p>pom ：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>       <span class="token comment">&lt;!--OpenFeign--&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--引入自己定义的api通用包，可以使用Payment 支付 Entity--&gt;</span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.xhc.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主启动类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableFeignClients</span>   <span class="token comment">//关键注解</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerFeignMain80</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">CustomerFeignMain80</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建一个service</p><blockquote><p>这个service还是 customer 模块的接口，和提供者没有任何关系，不需要包类名一致。它使用起来就相当于是普通的service。</p><p>大致原理，对于这个service 接口，读取它某个方法的注解（GET或者POST注解不写报错），知道了请求方式和请求地址，而抽象方法，只是对于我们来讲，调用该方法时，可以进行传参等。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"CLOUD-PROVIDER-SERVICE"</span><span class="token punctuation">)</span>  <span class="token comment">//服务名称，要和eureka上面的一致才行</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PaymentFeignService</span> <span class="token punctuation">{</span>    <span class="token comment">//这个就是provider 的controller层的方法定义。</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/payment/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">getPaymentById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Controller层：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//使用起来就相当于是普通的service。</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerFeignController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">PaymentFeignService</span> paymentFeignService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"customer/feign/payment/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">&gt;</span></span> <span class="token function">getPaymentById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> paymentFeignService<span class="token punctuation">.</span><span class="token function">getPaymentById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="超时控制"><a href="#超时控制" class="headerlink" title="超时控制"></a>超时控制</h3><p><strong>首先来模拟feign超时</strong></p><p>service层加上：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/payment/feign/timeout"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paymentFeignTimeOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Controller层加上：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/payment/feign/timeout"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paymentFeignTimeOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//openFeign-ribbon,客户端默认等待一秒</span>    <span class="token keyword">return</span> paymentFeignService<span class="token punctuation">.</span><span class="token function">paymentFeignTimeOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试出现访问超时错误，原因是，feign客户端默认超时时间是1秒，超时就出现异常。</strong></p><p><strong>解决办法：yml配置中添加</strong></p><p><img src="https://cdn.jsdelivr.net/gh/HChan-X/image/pictures/study/Ribbon/rb5.png"></p><h3 id="Openfeign日志增强"><a href="#Openfeign日志增强" class="headerlink" title="Openfeign日志增强"></a>Openfeign日志增强</h3><p><strong>openfeign提供了日志打印功能。</strong></p><p><strong>Logger有四种类型：<code>NONE(默认)</code>、<code>BASIC</code>、<code>HEADERS</code>、<code>FULL</code>，通过注册Bean来设置日志记录级别</strong></p><p>首先写一个config配置类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeignConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token class-name">Level</span> <span class="token function">feignLoggerLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// 请求和响应的头信息,请求和响应的正文及元数据</span>        <span class="token keyword">return</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token class-name">Level</span><span class="token punctuation">.</span>FULL<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在yml文件中开启日志打印配置：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">logging:  level:    #feign日志以什么级别监控哪个接口    com.xhc.springcloud.service.PaymentFeignService: debug<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;服务调用&quot;&gt;&lt;a href=&quot;#服务调用&quot; class=&quot;headerlink&quot; title=&quot;服务调用&quot;&gt;&lt;/a&gt;服务调用&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;都是使用在 client端，即有 ”消费者“ 需求的模块中。&lt;/p&gt;
&lt;/blockquote&gt;
</summary>
      
    
    
    
    <category term="笔记" scheme="http://mjean.life/categories/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="SpringCloud" scheme="http://mjean.life/categories/%E7%AC%94%E8%AE%B0/SpringCloud/"/>
    
    
    <category term="SpringCloud" scheme="http://mjean.life/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud笔记：服务注册中心之Zookeeper&amp;Consul</title>
    <link href="http://mjean.life/posts/2672e38f.html"/>
    <id>http://mjean.life/posts/2672e38f.html</id>
    <published>2021-02-28T13:50:08.000Z</published>
    <updated>2022-04-18T12:48:45.695Z</updated>
    
    <content type="html"><![CDATA[<h1 id="服务注册中心"><a href="#服务注册中心" class="headerlink" title="服务注册中心"></a>服务注册中心</h1><h2 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h2><blockquote><p>springCloud 整合 zookeeper </p><ul><li>zookeeper是一个分布式协调工具，可以实现中心功能</li><li>测试时先关闭linux服务器防火墙后再启动zookeeper服务器</li><li>zookeeper服务器取代Eureka服务器，zookeeper作为服务中心</li></ul></blockquote><h3 id="提供者"><a href="#提供者" class="headerlink" title="提供者"></a>提供者</h3><blockquote><p>创建一个提供者，和之前的一样即可，使用 8004端口</p></blockquote><p>pom文件如下：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-provider-payment8004<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--引入自己定义的api通用包，可以使用Payment 支付 Entity--&gt;</span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.xhc.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token comment">&lt;!--SpringBoot整合zookeeper客户端--&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-zookeeper-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token comment">&lt;!--先排除自带的zookeeper3.5.3--&gt;</span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token comment">&lt;!--添加zookeeper3.4.9版本--&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.4.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主启动类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>discovery<span class="token punctuation">.</span></span><span class="token class-name">EnableDiscoveryClient</span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentMain8004</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">PaymentMain8004</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Controller 打印信息：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">PaymentService</span> paymentService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${server.port}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> serverPort<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/payment/zk"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paymentzk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"springcloud with zookeeper :"</span> <span class="token operator">+</span> serverPort <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>如果 zookeeper 的版本和导入的jar包版本不一致，启动就会报错，由jar包冲突的问题。</strong></p><p><strong>解决这种冲突，需要在 pom 文件中，排除掉引起冲突的jar包，添加和服务器zookeeper版本一致的 jar 包，</strong></p><p><strong>但是新导入的 zookeeper jar包 又有 slf4j 冲突问题，于是再次排除引起冲突的jar包</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--springcloud 整合 zookeeper 组件--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-zookeeper-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 排除与zookeeper版本不一致到导致 冲突的 jar包 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 添加对应版本的jar包 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.4.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 排除和 slf4j 冲突的 jar包 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>yml文件：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">server:  port: 8004spring:  application:    name: cloud-provider-service  cloud:    zookeeper:      connect-string: 192.168.40.100:2181<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动测试：</p><p><img src="https://cdn.jsdelivr.net/gh/HChan-X/image/pictures/study/eureka/zk1.png"></p><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><blockquote><p>创建测试zookeeper作为服务注册中心的 消费者 模块 cloud-customerzk-order80</p><p>主启动类、pom文件、yml文件和提供者的类似</p></blockquote><p>config类，注入 RestTemplate</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootConfiguration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationContextConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@LoadBalanced</span>    <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">getTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>controller层也是和之前类似：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerZkController</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> INVOKE_URL<span class="token operator">=</span><span class="token string">"http://cloud-provider-service"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/customer/payment/zk"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paymentInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>INVOKE_URL <span class="token operator">+</span> <span class="token string">"/payment/zk"</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于 zookeeper 的集群搭建，目前使用较少，而且在 yml 文件中的配置也是类似，以列表形式写入 zookeeper 的多个地址即可，而且zookeeper 集群，在 hadoop的笔记中也有记录。总而言之，只要配合zookeeper集群，以及yml文件的配置就能完成集群搭建,。</p><blockquote><p>问题:zookeeper中的节点是持久还是临时的？</p><p><strong>答</strong>：临时的。</p></blockquote><h2 id="Consul"><a href="#Consul" class="headerlink" title="Consul"></a>Consul</h2><blockquote><p><strong>Consul是什么</strong></p><p>Consul是一个服务网格（微服务间的 TCP/IP，负责服务之间的网络调用、限流、熔断和监控）解决方案，它是一个一个分布式的，高度可用的系统，而且开发使用都很简便。它提供了一个功能齐全的控制平面，主要特点是：服务发现、健康检查、键值存储、安全服务通信、多数据中心。</p><p>与其它分布式服务注册与发现的方案相比，Consul 的方案更“一站式”——内置了服务注册与发现框架、分布一致性协议实现、健康检查、Key/Value 存储、多数据中心方案，不再需要依赖其它工具。Consul 本身使用 go 语言开发，具有跨平台、运行高效等特点，也非常方便和 Docker 配合使用。</p><p>官网地址： <a href="https://www.consul.io/intro">https://www.consul.io/intro</a> </p><p>中文地址： <a href="https://www.springcloud.cc/spring-cloud-consul.html">https://www.springcloud.cc/spring-cloud-consul.html</a> </p></blockquote><h3 id="安装并运行"><a href="#安装并运行" class="headerlink" title="安装并运行"></a>安装并运行</h3><blockquote><p> 下载地址：<a href="https://www.consul.io/downloads.html">https://www.consul.io/downloads.html</a></p><p> 打开下载的压缩包，只有一个exe文件，实际上是不用安装的，在exe文件所在目录打开dos窗口使用即可。</p><p> 使用开发模式启动：consul agent -dev</p><p> 访问8500端口，即可访问首页</p></blockquote><h3 id="提供者-1"><a href="#提供者-1" class="headerlink" title="提供者"></a>提供者</h3><blockquote><p>新建提供者模块：cloud-providerconsul-payment8006</p></blockquote><p>pom 文件：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-providerconsul-payment8006<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--引入自己定义的api通用包，可以使用Payment 支付 Entity--&gt;</span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.xhc.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token comment">&lt;!--springcloud consul server--&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-consul-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>yml 文件：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">server:  port: 8006spring:  application:    name: consul-provider-payment  cloud:    consul:      host: localhost      port: 8500      discovery:    # 指定注册对外暴露的服务名称        service-name: ${spring.application.name}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主启动类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentMain8006</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">PaymentMain8006</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>controller也是简单</p><p>controller层：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${server.port}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> serverPort<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/payment/consul"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paymentConsul</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"springcloud with consul: "</span><span class="token operator">+</span>serverPort<span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="消费者-1"><a href="#消费者-1" class="headerlink" title="消费者"></a>消费者</h3><blockquote><p>新建 一个 在80端口的 消费者模块。pom和yml和提供者的类似，主启动类不用说，记得注入RestTemplate</p></blockquote><p>controller层：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderConsulController</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> INVOKE_URL<span class="token operator">=</span><span class="token string">"http://consul-provider-payment"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/payment/consul"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paymentInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> result<span class="token operator">=</span>restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>INVOKE_URL<span class="token operator">+</span><span class="token string">"/payment/consul"</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="Eureka、Zookeeper、Consul三个注册中心的异同点"><a href="#Eureka、Zookeeper、Consul三个注册中心的异同点" class="headerlink" title="Eureka、Zookeeper、Consul三个注册中心的异同点"></a><strong>Eureka、Zookeeper、Consul三个注册中心的异同点</strong></h3><table><thead><tr><th align="left">组件名</th><th align="left">语言</th><th align="left">健康检查</th><th align="left">对外暴露接口</th><th align="left">CAP</th><th align="left">Spring Cloud 集成</th></tr></thead><tbody><tr><td align="left">Eureka</td><td align="left">Java</td><td align="left">可配支持</td><td align="left">HTTP</td><td align="left">AP</td><td align="left">集成</td></tr><tr><td align="left">Consul</td><td align="left">Go</td><td align="left">支持</td><td align="left">HTTP/DFS</td><td align="left">CP</td><td align="left">集成</td></tr><tr><td align="left">Zookeeper</td><td align="left">java</td><td align="left">支持</td><td align="left">客户端</td><td align="left">CP</td><td align="left">集成</td></tr></tbody></table><h3 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h3><blockquote><p>C:Consistency (强一致性)</p><p>A:Availability (可用性)</p><p>P:Partition tolerance (分区容错性)</p><p>CAP理论关注粒度是数据，而不是整体系统设计的。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/HChan-X/image/pictures/study/eureka/zj.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;服务注册中心&quot;&gt;&lt;a href=&quot;#服务注册中心&quot; class=&quot;headerlink&quot; title=&quot;服务注册中心&quot;&gt;&lt;/a&gt;服务注册中心&lt;/h1&gt;&lt;h2 id=&quot;Zookeeper&quot;&gt;&lt;a href=&quot;#Zookeeper&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="笔记" scheme="http://mjean.life/categories/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="SpringCloud" scheme="http://mjean.life/categories/%E7%AC%94%E8%AE%B0/SpringCloud/"/>
    
    
    <category term="SpringCloud" scheme="http://mjean.life/tags/SpringCloud/"/>
    
  </entry>
  
</feed>
